/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google-cloud";
exports.ids = ["vendor-chunks/@google-cloud"];
exports.modules = {

/***/ "(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/paginator/build/src/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResourceStream = exports.paginator = exports.Paginator = void 0;\n/*!\n * @module common/paginator\n */\nconst arrify = __webpack_require__(/*! arrify */ \"(rsc)/./node_modules/arrify/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst resource_stream_1 = __webpack_require__(/*! ./resource-stream */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js\");\nObject.defineProperty(exports, \"ResourceStream\", ({ enumerable: true, get: function () { return resource_stream_1.ResourceStream; } }));\n/*! Developer Documentation\n *\n * paginator is used to auto-paginate `nextQuery` methods as well as\n * streamifying them.\n *\n * Before:\n *\n *   search.query('done=true', function(err, results, nextQuery) {\n *     search.query(nextQuery, function(err, results, nextQuery) {});\n *   });\n *\n * After:\n *\n *   search.query('done=true', function(err, results) {});\n *\n * Methods to extend should be written to accept callbacks and return a\n * `nextQuery`.\n */\nclass Paginator {\n    /**\n     * Cache the original method, then overwrite it on the Class's prototype.\n     *\n     * @param {function} Class - The parent class of the methods to extend.\n     * @param {string|string[]} methodNames - Name(s) of the methods to extend.\n     */\n    // tslint:disable-next-line:variable-name\n    extend(Class, methodNames) {\n        methodNames = arrify(methodNames);\n        methodNames.forEach(methodName => {\n            const originalMethod = Class.prototype[methodName];\n            // map the original method to a private member\n            Class.prototype[methodName + '_'] = originalMethod;\n            // overwrite the original to auto-paginate\n            /* eslint-disable  @typescript-eslint/no-explicit-any */\n            Class.prototype[methodName] = function (...args) {\n                const parsedArguments = paginator.parseArguments_(args);\n                return paginator.run_(parsedArguments, originalMethod.bind(this));\n            };\n        });\n    }\n    /**\n     * Wraps paginated API calls in a readable object stream.\n     *\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {string} methodName - Name of the method to streamify.\n     * @return {function} - Wrapped function.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    streamify(methodName) {\n        return function (\n        /* eslint-disable  @typescript-eslint/no-explicit-any */\n        ...args) {\n            const parsedArguments = paginator.parseArguments_(args);\n            const originalMethod = this[methodName + '_'] || this[methodName];\n            return paginator.runAsStream_(parsedArguments, originalMethod.bind(this));\n        };\n    }\n    /**\n     * Parse a pseudo-array `arguments` for a query and callback.\n     *\n     * @param {array} args - The original `arguments` pseduo-array that the original\n     *     method received.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    parseArguments_(args) {\n        let query;\n        let autoPaginate = true;\n        let maxApiCalls = -1;\n        let maxResults = -1;\n        let callback;\n        const firstArgument = args[0];\n        const lastArgument = args[args.length - 1];\n        if (typeof firstArgument === 'function') {\n            callback = firstArgument;\n        }\n        else {\n            query = firstArgument;\n        }\n        if (typeof lastArgument === 'function') {\n            callback = lastArgument;\n        }\n        if (typeof query === 'object') {\n            query = extend(true, {}, query);\n            // Check if the user only asked for a certain amount of results.\n            if (query.maxResults && typeof query.maxResults === 'number') {\n                // `maxResults` is used API-wide.\n                maxResults = query.maxResults;\n            }\n            else if (typeof query.pageSize === 'number') {\n                // `pageSize` is Pub/Sub's `maxResults`.\n                maxResults = query.pageSize;\n            }\n            if (query.maxApiCalls && typeof query.maxApiCalls === 'number') {\n                maxApiCalls = query.maxApiCalls;\n                delete query.maxApiCalls;\n            }\n            // maxResults is the user specified limit.\n            if (maxResults !== -1 || query.autoPaginate === false) {\n                autoPaginate = false;\n            }\n        }\n        const parsedArguments = {\n            query: query || {},\n            autoPaginate,\n            maxApiCalls,\n            maxResults,\n            callback,\n        };\n        parsedArguments.streamOptions = extend(true, {}, parsedArguments.query);\n        delete parsedArguments.streamOptions.autoPaginate;\n        delete parsedArguments.streamOptions.maxResults;\n        delete parsedArguments.streamOptions.pageSize;\n        return parsedArguments;\n    }\n    /**\n     * This simply checks to see if `autoPaginate` is set or not, if it's true\n     * then we buffer all results, otherwise simply call the original method.\n     *\n     * @param {array} parsedArguments - Parsed arguments from the original method\n     *     call.\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     */\n    run_(parsedArguments, originalMethod) {\n        const query = parsedArguments.query;\n        const callback = parsedArguments.callback;\n        if (!parsedArguments.autoPaginate) {\n            return originalMethod(query, callback);\n        }\n        const results = new Array();\n        let otherArgs = [];\n        const promise = new Promise((resolve, reject) => {\n            const stream = paginator.runAsStream_(parsedArguments, originalMethod);\n            stream\n                .on('error', reject)\n                .on('data', (data) => results.push(data))\n                .on('end', () => {\n                otherArgs = stream._otherArgs || [];\n                resolve(results);\n            });\n        });\n        if (!callback) {\n            return promise.then(results => [results, query, ...otherArgs]);\n        }\n        promise.then(results => callback(null, results, query, ...otherArgs), (err) => callback(err));\n    }\n    /**\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     * @return {stream} - Readable object stream.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    runAsStream_(parsedArguments, originalMethod) {\n        return new resource_stream_1.ResourceStream(parsedArguments, originalMethod);\n    }\n}\nexports.Paginator = Paginator;\nconst paginator = new Paginator();\nexports.paginator = paginator;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wYWdpbmF0b3IvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsb0RBQVE7QUFDL0IsZUFBZSxtQkFBTyxDQUFDLG9EQUFRO0FBQy9CLDBCQUEwQixtQkFBTyxDQUFDLG9HQUFtQjtBQUNyRCxrREFBaUQsRUFBRSxxQ0FBcUMsNENBQTRDLEVBQUM7QUFDckk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQSxlQUFlLFdBQVc7QUFDMUIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBLGVBQWUsV0FBVztBQUMxQixlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFVBQVU7QUFDekI7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvcGFnaW5hdG9yL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlc291cmNlU3RyZWFtID0gZXhwb3J0cy5wYWdpbmF0b3IgPSBleHBvcnRzLlBhZ2luYXRvciA9IHZvaWQgMDtcbi8qIVxuICogQG1vZHVsZSBjb21tb24vcGFnaW5hdG9yXG4gKi9cbmNvbnN0IGFycmlmeSA9IHJlcXVpcmUoXCJhcnJpZnlcIik7XG5jb25zdCBleHRlbmQgPSByZXF1aXJlKFwiZXh0ZW5kXCIpO1xuY29uc3QgcmVzb3VyY2Vfc3RyZWFtXzEgPSByZXF1aXJlKFwiLi9yZXNvdXJjZS1zdHJlYW1cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXNvdXJjZVN0cmVhbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb3VyY2Vfc3RyZWFtXzEuUmVzb3VyY2VTdHJlYW07IH0gfSk7XG4vKiEgRGV2ZWxvcGVyIERvY3VtZW50YXRpb25cbiAqXG4gKiBwYWdpbmF0b3IgaXMgdXNlZCB0byBhdXRvLXBhZ2luYXRlIGBuZXh0UXVlcnlgIG1ldGhvZHMgYXMgd2VsbCBhc1xuICogc3RyZWFtaWZ5aW5nIHRoZW0uXG4gKlxuICogQmVmb3JlOlxuICpcbiAqICAgc2VhcmNoLnF1ZXJ5KCdkb25lPXRydWUnLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMsIG5leHRRdWVyeSkge1xuICogICAgIHNlYXJjaC5xdWVyeShuZXh0UXVlcnksIGZ1bmN0aW9uKGVyciwgcmVzdWx0cywgbmV4dFF1ZXJ5KSB7fSk7XG4gKiAgIH0pO1xuICpcbiAqIEFmdGVyOlxuICpcbiAqICAgc2VhcmNoLnF1ZXJ5KCdkb25lPXRydWUnLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHt9KTtcbiAqXG4gKiBNZXRob2RzIHRvIGV4dGVuZCBzaG91bGQgYmUgd3JpdHRlbiB0byBhY2NlcHQgY2FsbGJhY2tzIGFuZCByZXR1cm4gYVxuICogYG5leHRRdWVyeWAuXG4gKi9cbmNsYXNzIFBhZ2luYXRvciB7XG4gICAgLyoqXG4gICAgICogQ2FjaGUgdGhlIG9yaWdpbmFsIG1ldGhvZCwgdGhlbiBvdmVyd3JpdGUgaXQgb24gdGhlIENsYXNzJ3MgcHJvdG90eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gQ2xhc3MgLSBUaGUgcGFyZW50IGNsYXNzIG9mIHRoZSBtZXRob2RzIHRvIGV4dGVuZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gbWV0aG9kTmFtZXMgLSBOYW1lKHMpIG9mIHRoZSBtZXRob2RzIHRvIGV4dGVuZC5cbiAgICAgKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dmFyaWFibGUtbmFtZVxuICAgIGV4dGVuZChDbGFzcywgbWV0aG9kTmFtZXMpIHtcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBhcnJpZnkobWV0aG9kTmFtZXMpO1xuICAgICAgICBtZXRob2ROYW1lcy5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBDbGFzcy5wcm90b3R5cGVbbWV0aG9kTmFtZV07XG4gICAgICAgICAgICAvLyBtYXAgdGhlIG9yaWdpbmFsIG1ldGhvZCB0byBhIHByaXZhdGUgbWVtYmVyXG4gICAgICAgICAgICBDbGFzcy5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdfJ10gPSBvcmlnaW5hbE1ldGhvZDtcbiAgICAgICAgICAgIC8vIG92ZXJ3cml0ZSB0aGUgb3JpZ2luYWwgdG8gYXV0by1wYWdpbmF0ZVxuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICAgICAgICAgIENsYXNzLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkQXJndW1lbnRzID0gcGFnaW5hdG9yLnBhcnNlQXJndW1lbnRzXyhhcmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFnaW5hdG9yLnJ1bl8ocGFyc2VkQXJndW1lbnRzLCBvcmlnaW5hbE1ldGhvZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcmFwcyBwYWdpbmF0ZWQgQVBJIGNhbGxzIGluIGEgcmVhZGFibGUgb2JqZWN0IHN0cmVhbS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHNpbXBseSBjYWxscyB0aGUgbmV4dFF1ZXJ5IHJlY3Vyc2l2ZWx5LCBlbWl0dGluZyByZXN1bHRzIHRvIGFcbiAgICAgKiBzdHJlYW0uIFRoZSBzdHJlYW0gZW5kcyB3aGVuIGBuZXh0UXVlcnlgIGlzIG51bGwuXG4gICAgICpcbiAgICAgKiBgbWF4UmVzdWx0c2Agd2lsbCBhY3QgYXMgYSBjYXAgZm9yIGhvdyBtYW55IHJlc3VsdHMgYXJlIGZldGNoZWQgYW5kIGVtaXR0ZWRcbiAgICAgKiB0byB0aGUgc3RyZWFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgLSBOYW1lIG9mIHRoZSBtZXRob2QgdG8gc3RyZWFtaWZ5LlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSAtIFdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICBzdHJlYW1pZnkobWV0aG9kTmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKFxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuICAgICAgICAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRBcmd1bWVudHMgPSBwYWdpbmF0b3IucGFyc2VBcmd1bWVudHNfKGFyZ3MpO1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSB0aGlzW21ldGhvZE5hbWUgKyAnXyddIHx8IHRoaXNbbWV0aG9kTmFtZV07XG4gICAgICAgICAgICByZXR1cm4gcGFnaW5hdG9yLnJ1bkFzU3RyZWFtXyhwYXJzZWRBcmd1bWVudHMsIG9yaWdpbmFsTWV0aG9kLmJpbmQodGhpcykpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBhIHBzZXVkby1hcnJheSBgYXJndW1lbnRzYCBmb3IgYSBxdWVyeSBhbmQgY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBhcmdzIC0gVGhlIG9yaWdpbmFsIGBhcmd1bWVudHNgIHBzZWR1by1hcnJheSB0aGF0IHRoZSBvcmlnaW5hbFxuICAgICAqICAgICBtZXRob2QgcmVjZWl2ZWQuXG4gICAgICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICBwYXJzZUFyZ3VtZW50c18oYXJncykge1xuICAgICAgICBsZXQgcXVlcnk7XG4gICAgICAgIGxldCBhdXRvUGFnaW5hdGUgPSB0cnVlO1xuICAgICAgICBsZXQgbWF4QXBpQ2FsbHMgPSAtMTtcbiAgICAgICAgbGV0IG1heFJlc3VsdHMgPSAtMTtcbiAgICAgICAgbGV0IGNhbGxiYWNrO1xuICAgICAgICBjb25zdCBmaXJzdEFyZ3VtZW50ID0gYXJnc1swXTtcbiAgICAgICAgY29uc3QgbGFzdEFyZ3VtZW50ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodHlwZW9mIGZpcnN0QXJndW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZmlyc3RBcmd1bWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gZmlyc3RBcmd1bWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxhc3RBcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBsYXN0QXJndW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gZXh0ZW5kKHRydWUsIHt9LCBxdWVyeSk7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdXNlciBvbmx5IGFza2VkIGZvciBhIGNlcnRhaW4gYW1vdW50IG9mIHJlc3VsdHMuXG4gICAgICAgICAgICBpZiAocXVlcnkubWF4UmVzdWx0cyAmJiB0eXBlb2YgcXVlcnkubWF4UmVzdWx0cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAvLyBgbWF4UmVzdWx0c2AgaXMgdXNlZCBBUEktd2lkZS5cbiAgICAgICAgICAgICAgICBtYXhSZXN1bHRzID0gcXVlcnkubWF4UmVzdWx0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBxdWVyeS5wYWdlU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAvLyBgcGFnZVNpemVgIGlzIFB1Yi9TdWIncyBgbWF4UmVzdWx0c2AuXG4gICAgICAgICAgICAgICAgbWF4UmVzdWx0cyA9IHF1ZXJ5LnBhZ2VTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lm1heEFwaUNhbGxzICYmIHR5cGVvZiBxdWVyeS5tYXhBcGlDYWxscyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBtYXhBcGlDYWxscyA9IHF1ZXJ5Lm1heEFwaUNhbGxzO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBxdWVyeS5tYXhBcGlDYWxscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1heFJlc3VsdHMgaXMgdGhlIHVzZXIgc3BlY2lmaWVkIGxpbWl0LlxuICAgICAgICAgICAgaWYgKG1heFJlc3VsdHMgIT09IC0xIHx8IHF1ZXJ5LmF1dG9QYWdpbmF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBhdXRvUGFnaW5hdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRBcmd1bWVudHMgPSB7XG4gICAgICAgICAgICBxdWVyeTogcXVlcnkgfHwge30sXG4gICAgICAgICAgICBhdXRvUGFnaW5hdGUsXG4gICAgICAgICAgICBtYXhBcGlDYWxscyxcbiAgICAgICAgICAgIG1heFJlc3VsdHMsXG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgfTtcbiAgICAgICAgcGFyc2VkQXJndW1lbnRzLnN0cmVhbU9wdGlvbnMgPSBleHRlbmQodHJ1ZSwge30sIHBhcnNlZEFyZ3VtZW50cy5xdWVyeSk7XG4gICAgICAgIGRlbGV0ZSBwYXJzZWRBcmd1bWVudHMuc3RyZWFtT3B0aW9ucy5hdXRvUGFnaW5hdGU7XG4gICAgICAgIGRlbGV0ZSBwYXJzZWRBcmd1bWVudHMuc3RyZWFtT3B0aW9ucy5tYXhSZXN1bHRzO1xuICAgICAgICBkZWxldGUgcGFyc2VkQXJndW1lbnRzLnN0cmVhbU9wdGlvbnMucGFnZVNpemU7XG4gICAgICAgIHJldHVybiBwYXJzZWRBcmd1bWVudHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgc2ltcGx5IGNoZWNrcyB0byBzZWUgaWYgYGF1dG9QYWdpbmF0ZWAgaXMgc2V0IG9yIG5vdCwgaWYgaXQncyB0cnVlXG4gICAgICogdGhlbiB3ZSBidWZmZXIgYWxsIHJlc3VsdHMsIG90aGVyd2lzZSBzaW1wbHkgY2FsbCB0aGUgb3JpZ2luYWwgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHthcnJheX0gcGFyc2VkQXJndW1lbnRzIC0gUGFyc2VkIGFyZ3VtZW50cyBmcm9tIHRoZSBvcmlnaW5hbCBtZXRob2RcbiAgICAgKiAgICAgY2FsbC5cbiAgICAgKiBAcGFyYW0ge29iamVjdD18c3RyaW5nPX0gcGFyc2VkQXJndW1lbnRzLnF1ZXJ5IC0gUXVlcnkgb2JqZWN0LiBUaGlzIGlzIG1vc3RcbiAgICAgKiAgICAgY29tbW9ubHkgYW4gb2JqZWN0LCBidXQgdG8gbWFrZSB0aGUgQVBJIG1vcmUgc2ltcGxlLCBpdCBjYW4gYWxzbyBiZSBhXG4gICAgICogICAgIHN0cmluZyBpbiBzb21lIHBsYWNlcy5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gcGFyc2VkQXJndW1lbnRzLmNhbGxiYWNrIC0gQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBwYXJzZWRBcmd1bWVudHMuYXV0b1BhZ2luYXRlIC0gQXV0by1wYWdpbmF0aW9uIGVuYWJsZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBwYXJzZWRBcmd1bWVudHMubWF4QXBpQ2FsbHMgLSBNYXhpbXVtIEFQSSBjYWxscyB0byBtYWtlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwYXJzZWRBcmd1bWVudHMubWF4UmVzdWx0cyAtIE1heGltdW0gcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gb3JpZ2luYWxNZXRob2QgLSBUaGUgY2FjaGVkIG1ldGhvZCB0aGF0IGFjY2VwdHMgYSBjYWxsYmFja1xuICAgICAqICAgICBhbmQgcmV0dXJucyBgbmV4dFF1ZXJ5YCB0byByZWNlaXZlIG1vcmUgcmVzdWx0cy5cbiAgICAgKi9cbiAgICBydW5fKHBhcnNlZEFyZ3VtZW50cywgb3JpZ2luYWxNZXRob2QpIHtcbiAgICAgICAgY29uc3QgcXVlcnkgPSBwYXJzZWRBcmd1bWVudHMucXVlcnk7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gcGFyc2VkQXJndW1lbnRzLmNhbGxiYWNrO1xuICAgICAgICBpZiAoIXBhcnNlZEFyZ3VtZW50cy5hdXRvUGFnaW5hdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE1ldGhvZChxdWVyeSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgbGV0IG90aGVyQXJncyA9IFtdO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gcGFnaW5hdG9yLnJ1bkFzU3RyZWFtXyhwYXJzZWRBcmd1bWVudHMsIG9yaWdpbmFsTWV0aG9kKTtcbiAgICAgICAgICAgIHN0cmVhbVxuICAgICAgICAgICAgICAgIC5vbignZXJyb3InLCByZWplY3QpXG4gICAgICAgICAgICAgICAgLm9uKCdkYXRhJywgKGRhdGEpID0+IHJlc3VsdHMucHVzaChkYXRhKSlcbiAgICAgICAgICAgICAgICAub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBvdGhlckFyZ3MgPSBzdHJlYW0uX290aGVyQXJncyB8fCBbXTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHJlc3VsdHMgPT4gW3Jlc3VsdHMsIHF1ZXJ5LCAuLi5vdGhlckFyZ3NdKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9taXNlLnRoZW4ocmVzdWx0cyA9PiBjYWxsYmFjayhudWxsLCByZXN1bHRzLCBxdWVyeSwgLi4ub3RoZXJBcmdzKSwgKGVycikgPT4gY2FsbGJhY2soZXJyKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHNpbXBseSBjYWxscyB0aGUgbmV4dFF1ZXJ5IHJlY3Vyc2l2ZWx5LCBlbWl0dGluZyByZXN1bHRzIHRvIGFcbiAgICAgKiBzdHJlYW0uIFRoZSBzdHJlYW0gZW5kcyB3aGVuIGBuZXh0UXVlcnlgIGlzIG51bGwuXG4gICAgICpcbiAgICAgKiBgbWF4UmVzdWx0c2Agd2lsbCBhY3QgYXMgYSBjYXAgZm9yIGhvdyBtYW55IHJlc3VsdHMgYXJlIGZldGNoZWQgYW5kIGVtaXR0ZWRcbiAgICAgKiB0byB0aGUgc3RyZWFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fHN0cmluZz19IHBhcnNlZEFyZ3VtZW50cy5xdWVyeSAtIFF1ZXJ5IG9iamVjdC4gVGhpcyBpcyBtb3N0XG4gICAgICogICAgIGNvbW1vbmx5IGFuIG9iamVjdCwgYnV0IHRvIG1ha2UgdGhlIEFQSSBtb3JlIHNpbXBsZSwgaXQgY2FuIGFsc28gYmUgYVxuICAgICAqICAgICBzdHJpbmcgaW4gc29tZSBwbGFjZXMuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbj19IHBhcnNlZEFyZ3VtZW50cy5jYWxsYmFjayAtIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyc2VkQXJndW1lbnRzLmF1dG9QYWdpbmF0ZSAtIEF1dG8tcGFnaW5hdGlvbiBlbmFibGVkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyc2VkQXJndW1lbnRzLm1heEFwaUNhbGxzIC0gTWF4aW11bSBBUEkgY2FsbHMgdG8gbWFrZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFyc2VkQXJndW1lbnRzLm1heFJlc3VsdHMgLSBNYXhpbXVtIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9yaWdpbmFsTWV0aG9kIC0gVGhlIGNhY2hlZCBtZXRob2QgdGhhdCBhY2NlcHRzIGEgY2FsbGJhY2tcbiAgICAgKiAgICAgYW5kIHJldHVybnMgYG5leHRRdWVyeWAgdG8gcmVjZWl2ZSBtb3JlIHJlc3VsdHMuXG4gICAgICogQHJldHVybiB7c3RyZWFtfSAtIFJlYWRhYmxlIG9iamVjdCBzdHJlYW0uXG4gICAgICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICBydW5Bc1N0cmVhbV8ocGFyc2VkQXJndW1lbnRzLCBvcmlnaW5hbE1ldGhvZCkge1xuICAgICAgICByZXR1cm4gbmV3IHJlc291cmNlX3N0cmVhbV8xLlJlc291cmNlU3RyZWFtKHBhcnNlZEFyZ3VtZW50cywgb3JpZ2luYWxNZXRob2QpO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFnaW5hdG9yID0gUGFnaW5hdG9yO1xuY29uc3QgcGFnaW5hdG9yID0gbmV3IFBhZ2luYXRvcigpO1xuZXhwb3J0cy5wYWdpbmF0b3IgPSBwYWdpbmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google-cloud/paginator/build/src/resource-stream.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResourceStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nclass ResourceStream extends stream_1.Transform {\n    constructor(args, requestFn) {\n        const options = Object.assign({ objectMode: true }, args.streamOptions);\n        super(options);\n        this._ended = false;\n        this._maxApiCalls = args.maxApiCalls === -1 ? Infinity : args.maxApiCalls;\n        this._nextQuery = args.query;\n        this._reading = false;\n        this._requestFn = requestFn;\n        this._requestsMade = 0;\n        this._resultsToSend = args.maxResults === -1 ? Infinity : args.maxResults;\n        this._otherArgs = [];\n    }\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    end(...args) {\n        this._ended = true;\n        return super.end(...args);\n    }\n    _read() {\n        if (this._reading) {\n            return;\n        }\n        this._reading = true;\n        // Wrap in a try/catch to catch input linting errors, e.g.\n        // an invalid BigQuery query. These errors are thrown in an\n        // async fashion, which makes them un-catchable by the user.\n        try {\n            this._requestFn(this._nextQuery, (err, results, nextQuery, ...otherArgs) => {\n                if (err) {\n                    this.destroy(err);\n                    return;\n                }\n                this._otherArgs = otherArgs;\n                this._nextQuery = nextQuery;\n                if (this._resultsToSend !== Infinity) {\n                    results = results.splice(0, this._resultsToSend);\n                    this._resultsToSend -= results.length;\n                }\n                let more = true;\n                for (const result of results) {\n                    if (this._ended) {\n                        break;\n                    }\n                    more = this.push(result);\n                }\n                const isFinished = !this._nextQuery || this._resultsToSend < 1;\n                const madeMaxCalls = ++this._requestsMade >= this._maxApiCalls;\n                if (isFinished || madeMaxCalls) {\n                    this.end();\n                }\n                if (more && !this._ended) {\n                    setImmediate(() => this._read());\n                }\n                this._reading = false;\n            });\n        }\n        catch (e) {\n            this.destroy(e);\n        }\n    }\n}\nexports.ResourceStream = ResourceStream;\n//# sourceMappingURL=resource-stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wYWdpbmF0b3IvYnVpbGQvc3JjL3Jlc291cmNlLXN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakM7QUFDQTtBQUNBLHdDQUF3QyxrQkFBa0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wYWdpbmF0b3IvYnVpbGQvc3JjL3Jlc291cmNlLXN0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlc291cmNlU3RyZWFtID0gdm9pZCAwO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY2xhc3MgUmVzb3VyY2VTdHJlYW0gZXh0ZW5kcyBzdHJlYW1fMS5UcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MsIHJlcXVlc3RGbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IG9iamVjdE1vZGU6IHRydWUgfSwgYXJncy5zdHJlYW1PcHRpb25zKTtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2VuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX21heEFwaUNhbGxzID0gYXJncy5tYXhBcGlDYWxscyA9PT0gLTEgPyBJbmZpbml0eSA6IGFyZ3MubWF4QXBpQ2FsbHM7XG4gICAgICAgIHRoaXMuX25leHRRdWVyeSA9IGFyZ3MucXVlcnk7XG4gICAgICAgIHRoaXMuX3JlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdEZuID0gcmVxdWVzdEZuO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0c01hZGUgPSAwO1xuICAgICAgICB0aGlzLl9yZXN1bHRzVG9TZW5kID0gYXJncy5tYXhSZXN1bHRzID09PSAtMSA/IEluZmluaXR5IDogYXJncy5tYXhSZXN1bHRzO1xuICAgICAgICB0aGlzLl9vdGhlckFyZ3MgPSBbXTtcbiAgICB9XG4gICAgLyogZXNsaW50LWRpc2FibGUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICBlbmQoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lbmRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBzdXBlci5lbmQoLi4uYXJncyk7XG4gICAgfVxuICAgIF9yZWFkKCkge1xuICAgICAgICBpZiAodGhpcy5fcmVhZGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlYWRpbmcgPSB0cnVlO1xuICAgICAgICAvLyBXcmFwIGluIGEgdHJ5L2NhdGNoIHRvIGNhdGNoIGlucHV0IGxpbnRpbmcgZXJyb3JzLCBlLmcuXG4gICAgICAgIC8vIGFuIGludmFsaWQgQmlnUXVlcnkgcXVlcnkuIFRoZXNlIGVycm9ycyBhcmUgdGhyb3duIGluIGFuXG4gICAgICAgIC8vIGFzeW5jIGZhc2hpb24sIHdoaWNoIG1ha2VzIHRoZW0gdW4tY2F0Y2hhYmxlIGJ5IHRoZSB1c2VyLlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdEZuKHRoaXMuX25leHRRdWVyeSwgKGVyciwgcmVzdWx0cywgbmV4dFF1ZXJ5LCAuLi5vdGhlckFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveShlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX290aGVyQXJncyA9IG90aGVyQXJncztcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0UXVlcnkgPSBuZXh0UXVlcnk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc3VsdHNUb1NlbmQgIT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNwbGljZSgwLCB0aGlzLl9yZXN1bHRzVG9TZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzdWx0c1RvU2VuZCAtPSByZXN1bHRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IG1vcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtb3JlID0gdGhpcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGlzRmluaXNoZWQgPSAhdGhpcy5fbmV4dFF1ZXJ5IHx8IHRoaXMuX3Jlc3VsdHNUb1NlbmQgPCAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hZGVNYXhDYWxscyA9ICsrdGhpcy5fcmVxdWVzdHNNYWRlID49IHRoaXMuX21heEFwaUNhbGxzO1xuICAgICAgICAgICAgICAgIGlmIChpc0ZpbmlzaGVkIHx8IG1hZGVNYXhDYWxscykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobW9yZSAmJiAhdGhpcy5fZW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHRoaXMuX3JlYWQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJlc291cmNlU3RyZWFtID0gUmVzb3VyY2VTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZS1zdHJlYW0uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/projectify/build/src/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MissingProjectIdError = exports.replaceProjectIdToken = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Populate the `{{projectId}}` placeholder.\n *\n * @throws {Error} If a projectId is required, but one is not provided.\n *\n * @param {*} - Any input value that may contain a placeholder. Arrays and objects will be looped.\n * @param {string} projectId - A projectId. If not provided\n * @return {*} - The original argument with all placeholders populated.\n */\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nfunction replaceProjectIdToken(value, projectId) {\n    if (Array.isArray(value)) {\n        value = value.map(v => replaceProjectIdToken(v, projectId));\n    }\n    if (value !== null &&\n        typeof value === 'object' &&\n        !(value instanceof Buffer) &&\n        !(value instanceof stream_1.Stream) &&\n        typeof value.hasOwnProperty === 'function') {\n        for (const opt in value) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (value.hasOwnProperty(opt)) {\n                value[opt] = replaceProjectIdToken(value[opt], projectId);\n            }\n        }\n    }\n    if (typeof value === 'string' &&\n        value.indexOf('{{projectId}}') > -1) {\n        if (!projectId || projectId === '{{projectId}}') {\n            throw new MissingProjectIdError();\n        }\n        value = value.replace(/{{projectId}}/g, projectId);\n    }\n    return value;\n}\nexports.replaceProjectIdToken = replaceProjectIdToken;\n/**\n * Custom error type for missing project ID errors.\n */\nclass MissingProjectIdError extends Error {\n    constructor() {\n        super(...arguments);\n        this.message = `Sorry, we cannot connect to Cloud Services without a project\n    ID. You may specify one with an environment variable named\n    \"GOOGLE_CLOUD_PROJECT\".`.replace(/ +/g, ' ');\n    }\n}\nexports.MissingProjectIdError = MissingProjectIdError;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wcm9qZWN0aWZ5L2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyw2QkFBNkI7QUFDN0QsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixXQUFXO0FBQzlCO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxRQUFRO0FBQ25CLFlBQVksR0FBRztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFdBQVc7QUFDcEMsMkNBQTJDLFdBQVc7QUFDdEQ7QUFDQTtBQUNBLGlDQUFpQyxXQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3Byb2plY3RpZnkvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NaXNzaW5nUHJvamVjdElkRXJyb3IgPSBleHBvcnRzLnJlcGxhY2VQcm9qZWN0SWRUb2tlbiA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbi8vIENvcHlyaWdodCAyMDE0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgYHt7cHJvamVjdElkfX1gIHBsYWNlaG9sZGVyLlxuICpcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBhIHByb2plY3RJZCBpcyByZXF1aXJlZCwgYnV0IG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIHsqfSAtIEFueSBpbnB1dCB2YWx1ZSB0aGF0IG1heSBjb250YWluIGEgcGxhY2Vob2xkZXIuIEFycmF5cyBhbmQgb2JqZWN0cyB3aWxsIGJlIGxvb3BlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9qZWN0SWQgLSBBIHByb2plY3RJZC4gSWYgbm90IHByb3ZpZGVkXG4gKiBAcmV0dXJuIHsqfSAtIFRoZSBvcmlnaW5hbCBhcmd1bWVudCB3aXRoIGFsbCBwbGFjZWhvbGRlcnMgcG9wdWxhdGVkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHJlcGxhY2VQcm9qZWN0SWRUb2tlbih2YWx1ZSwgcHJvamVjdElkKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUubWFwKHYgPT4gcmVwbGFjZVByb2plY3RJZFRva2VuKHYsIHByb2plY3RJZCkpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgQnVmZmVyKSAmJlxuICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2Ygc3RyZWFtXzEuU3RyZWFtKSAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUuaGFzT3duUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZm9yIChjb25zdCBvcHQgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVbb3B0XSA9IHJlcGxhY2VQcm9qZWN0SWRUb2tlbih2YWx1ZVtvcHRdLCBwcm9qZWN0SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIHZhbHVlLmluZGV4T2YoJ3t7cHJvamVjdElkfX0nKSA+IC0xKSB7XG4gICAgICAgIGlmICghcHJvamVjdElkIHx8IHByb2plY3RJZCA9PT0gJ3t7cHJvamVjdElkfX0nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ1Byb2plY3RJZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC97e3Byb2plY3RJZH19L2csIHByb2plY3RJZCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydHMucmVwbGFjZVByb2plY3RJZFRva2VuID0gcmVwbGFjZVByb2plY3RJZFRva2VuO1xuLyoqXG4gKiBDdXN0b20gZXJyb3IgdHlwZSBmb3IgbWlzc2luZyBwcm9qZWN0IElEIGVycm9ycy5cbiAqL1xuY2xhc3MgTWlzc2luZ1Byb2plY3RJZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBgU29ycnksIHdlIGNhbm5vdCBjb25uZWN0IHRvIENsb3VkIFNlcnZpY2VzIHdpdGhvdXQgYSBwcm9qZWN0XG4gICAgSUQuIFlvdSBtYXkgc3BlY2lmeSBvbmUgd2l0aCBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lZFxuICAgIFwiR09PR0xFX0NMT1VEX1BST0pFQ1RcIi5gLnJlcGxhY2UoLyArL2csICcgJyk7XG4gICAgfVxufVxuZXhwb3J0cy5NaXNzaW5nUHJvamVjdElkRXJyb3IgPSBNaXNzaW5nUHJvamVjdElkRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/promisify/build/src/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/* eslint-disable prefer-rest-params */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.callbackifyAll = exports.callbackify = exports.promisifyAll = exports.promisify = void 0;\n/**\n * Wraps a callback style function to conditionally return a promise.\n *\n * @param {function} originalMethod - The method to promisify.\n * @param {object=} options - Promise options.\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\n * @return {function} wrapped\n */\nfunction promisify(originalMethod, options) {\n    if (originalMethod.promisified_) {\n        return originalMethod;\n    }\n    options = options || {};\n    const slice = Array.prototype.slice;\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        let last;\n        for (last = arguments.length - 1; last >= 0; last--) {\n            const arg = arguments[last];\n            if (typeof arg === 'undefined') {\n                continue; // skip trailing undefined.\n            }\n            if (typeof arg !== 'function') {\n                break; // non-callback last argument found.\n            }\n            return originalMethod.apply(this, arguments);\n        }\n        // peel trailing undefined.\n        const args = slice.call(arguments, 0, last + 1);\n        // tslint:disable-next-line:variable-name\n        let PromiseCtor = Promise;\n        // Because dedupe will likely create a single install of\n        // @google-cloud/common to be shared amongst all modules, we need to\n        // localize it at the Service level.\n        if (this && this.Promise) {\n            PromiseCtor = this.Promise;\n        }\n        return new PromiseCtor((resolve, reject) => {\n            // tslint:disable-next-line:no-any\n            args.push((...args) => {\n                const callbackArgs = slice.call(args);\n                const err = callbackArgs.shift();\n                if (err) {\n                    return reject(err);\n                }\n                if (options.singular && callbackArgs.length === 1) {\n                    resolve(callbackArgs[0]);\n                }\n                else {\n                    resolve(callbackArgs);\n                }\n            });\n            originalMethod.apply(this, args);\n        });\n    };\n    wrapper.promisified_ = true;\n    return wrapper;\n}\nexports.promisify = promisify;\n/**\n * Promisifies certain Class methods. This will not promisify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\n// tslint:disable-next-line:variable-name\nfunction promisifyAll(Class, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter(methodName => {\n        // clang-format off\n        return (!exclude.includes(methodName) &&\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) // is it promisable?\n        );\n        // clang-format on\n    });\n    methods.forEach(methodName => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.promisified_) {\n            Class.prototype[methodName] = exports.promisify(originalMethod, options);\n        }\n    });\n}\nexports.promisifyAll = promisifyAll;\n/**\n * Wraps a promisy type function to conditionally call a callback function.\n *\n * @param {function} originalMethod - The method to callbackify.\n * @param {object=} options - Callback options.\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\n * @return {function} wrapped\n */\nfunction callbackify(originalMethod) {\n    if (originalMethod.callbackified_) {\n        return originalMethod;\n    }\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        if (typeof arguments[arguments.length - 1] !== 'function') {\n            return originalMethod.apply(this, arguments);\n        }\n        const cb = Array.prototype.pop.call(arguments);\n        originalMethod.apply(this, arguments).then(\n        // tslint:disable-next-line:no-any\n        (res) => {\n            res = Array.isArray(res) ? res : [res];\n            cb(null, ...res);\n        }, (err) => cb(err));\n    };\n    wrapper.callbackified_ = true;\n    return wrapper;\n}\nexports.callbackify = callbackify;\n/**\n * Callbackifies certain Class methods. This will not callbackify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\nfunction callbackifyAll(\n// tslint:disable-next-line:variable-name\nClass, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter(methodName => {\n        // clang-format off\n        return (!exclude.includes(methodName) &&\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/^_|(Stream|_)|^constructor$/.test(methodName) // is it callbackifyable?\n        );\n        // clang-format on\n    });\n    methods.forEach(methodName => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.callbackified_) {\n            Class.prototype[methodName] = exports.callbackify(originalMethod);\n        }\n    });\n}\nexports.callbackifyAll = callbackifyAll;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/acl.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/acl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Acl: () => (/* binding */ Acl),\n/* harmony export */   AclRoleAccessorMethods: () => (/* binding */ AclRoleAccessorMethods)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Attach functionality to a {@link Storage.acl} instance. This will add an\n * object for each role group (owners, readers, and writers), with each object\n * containing methods to add or delete a type of entity.\n *\n * As an example, here are a few methods that are created.\n *\n *   myBucket.acl.readers.deleteGroup('groupId', function(err) {});\n *\n *   myBucket.acl.owners.addUser('email@example.com', function(err, acl) {});\n *\n *   myBucket.acl.writers.addDomain('example.com', function(err, acl) {});\n *\n * @private\n */\nclass AclRoleAccessorMethods {\n    constructor() {\n        this.owners = {};\n        this.readers = {};\n        this.writers = {};\n        /**\n         * An object of convenience methods to add or delete owner ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.owners.addAllAuthenticatedUsers`\n         *   - `myFile.acl.owners.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.owners.addAllUsers`\n         *   - `myFile.acl.owners.deleteAllUsers`\n         *   - `myFile.acl.owners.addDomain`\n         *   - `myFile.acl.owners.deleteDomain`\n         *   - `myFile.acl.owners.addGroup`\n         *   - `myFile.acl.owners.deleteGroup`\n         *   - `myFile.acl.owners.addProject`\n         *   - `myFile.acl.owners.deleteProject`\n         *   - `myFile.acl.owners.addUser`\n         *   - `myFile.acl.owners.deleteUser`\n         *\n         * @name Acl#owners\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as an owner of a file.\n         * //-\n         * const myBucket = gcs.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         * myFile.acl.owners.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.OWNER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.owners.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.owners = {};\n        /**\n         * An object of convenience methods to add or delete reader ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.readers.addAllAuthenticatedUsers`\n         *   - `myFile.acl.readers.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.readers.addAllUsers`\n         *   - `myFile.acl.readers.deleteAllUsers`\n         *   - `myFile.acl.readers.addDomain`\n         *   - `myFile.acl.readers.deleteDomain`\n         *   - `myFile.acl.readers.addGroup`\n         *   - `myFile.acl.readers.deleteGroup`\n         *   - `myFile.acl.readers.addProject`\n         *   - `myFile.acl.readers.deleteProject`\n         *   - `myFile.acl.readers.addUser`\n         *   - `myFile.acl.readers.deleteUser`\n         *\n         * @name Acl#readers\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as a reader of a file.\n         * //-\n         * myFile.acl.readers.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.READER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.readers.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.readers = {};\n        /**\n         * An object of convenience methods to add or delete writer ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.writers.addAllAuthenticatedUsers`\n         *   - `myFile.acl.writers.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.writers.addAllUsers`\n         *   - `myFile.acl.writers.deleteAllUsers`\n         *   - `myFile.acl.writers.addDomain`\n         *   - `myFile.acl.writers.deleteDomain`\n         *   - `myFile.acl.writers.addGroup`\n         *   - `myFile.acl.writers.deleteGroup`\n         *   - `myFile.acl.writers.addProject`\n         *   - `myFile.acl.writers.deleteProject`\n         *   - `myFile.acl.writers.addUser`\n         *   - `myFile.acl.writers.deleteUser`\n         *\n         * @name Acl#writers\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as a writer of a file.\n         * //-\n         * myFile.acl.writers.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.WRITER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.writers.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.writers = {};\n        AclRoleAccessorMethods.roles.forEach(this._assignAccessMethods.bind(this));\n    }\n    _assignAccessMethods(role) {\n        const accessMethods = AclRoleAccessorMethods.accessMethods;\n        const entities = AclRoleAccessorMethods.entities;\n        const roleGroup = role.toLowerCase() + 's';\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this[roleGroup] = entities.reduce((acc, entity) => {\n            const isPrefix = entity.charAt(entity.length - 1) === '-';\n            accessMethods.forEach(accessMethod => {\n                let method = accessMethod + entity[0].toUpperCase() + entity.substring(1);\n                if (isPrefix) {\n                    method = method.replace('-', '');\n                }\n                // Wrap the parent accessor method (e.g. `add` or `delete`) to avoid the\n                // more complex API of specifying an `entity` and `role`.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                acc[method] = (entityId, options, callback) => {\n                    let apiEntity;\n                    if (typeof options === 'function') {\n                        callback = options;\n                        options = {};\n                    }\n                    if (isPrefix) {\n                        apiEntity = entity + entityId;\n                    }\n                    else {\n                        // If the entity is not a prefix, it is a special entity group\n                        // that does not require further details. The accessor methods\n                        // only accept a callback.\n                        apiEntity = entity;\n                        callback = entityId;\n                    }\n                    options = Object.assign({\n                        entity: apiEntity,\n                        role,\n                    }, options);\n                    const args = [options];\n                    if (typeof callback === 'function') {\n                        args.push(callback);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    return this[accessMethod].apply(this, args);\n                };\n            });\n            return acc;\n        }, {});\n    }\n}\nAclRoleAccessorMethods.accessMethods = ['add', 'delete'];\nAclRoleAccessorMethods.entities = [\n    // Special entity groups that do not require further specification.\n    'allAuthenticatedUsers',\n    'allUsers',\n    // Entity groups that require specification, e.g. `user-email@example.com`.\n    'domain-',\n    'group-',\n    'project-',\n    'user-',\n];\nAclRoleAccessorMethods.roles = ['OWNER', 'READER', 'WRITER'];\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against an\n * object or bucket (for example, `READ` or `WRITE`); the entity defines who the\n * permission applies to (for example, a specific user or group of users).\n *\n * Where an `entity` value is accepted, we follow the format the Cloud Storage\n * API expects.\n *\n * Refer to\n * https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\n * for the most up-to-date values.\n *\n *   - `user-userId`\n *   - `user-email`\n *   - `group-groupId`\n *   - `group-email`\n *   - `domain-domain`\n *   - `project-team-projectId`\n *   - `allUsers`\n *   - `allAuthenticatedUsers`\n *\n * Examples:\n *\n *   - The user \"liz@example.com\" would be `user-liz@example.com`.\n *   - The group \"example@googlegroups.com\" would be\n *     `group-example@googlegroups.com`.\n *   - To refer to all members of the Google Apps for Business domain\n *     \"example.com\", the entity would be `domain-example.com`.\n *\n * For more detailed information, see\n * {@link http://goo.gl/6qBBPO| About Access Control Lists}.\n *\n * @constructor Acl\n * @mixin\n * @param {object} options Configuration options.\n */\nclass Acl extends AclRoleAccessorMethods {\n    constructor(options) {\n        super();\n        this.pathPrefix = options.pathPrefix;\n        this.request_ = options.request;\n    }\n    /**\n     * @typedef {array} AddAclResponse\n     * @property {object} 0 The Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback AddAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} acl The Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Add access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert| BucketAccessControls: insert API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert| ObjectAccessControls: insert API Documentation}\n     *\n     * @param {object} options Configuration options.\n     * @param {string} options.entity Whose permissions will be added.\n     * @param {string} options.role Permissions allowed for the defined entity.\n     *     See {@link https://cloud.google.com/storage/docs/access-control Access\n     * Control}.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {AddAclCallback} [callback] Callback function.\n     * @returns {Promise<AddAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * const options = {\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.OWNER_ROLE\n     * };\n     *\n     * myBucket.acl.add(options, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * // Here is how you would grant ownership permissions to a user on a\n     * specific\n     * // revision of a file.\n     * //-\n     * myFile.acl.add({\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.OWNER_ROLE,\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.acl.add(options).then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_file_owner\n     * Example of adding an owner to a file:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_bucket_owner\n     * Example of adding an owner to a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_bucket_default_owner\n     * Example of adding a default owner to a bucket:\n     */\n    add(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '',\n            qs: query,\n            maxRetries: 0, //explicitly set this value since this is a non-idempotent function\n            json: {\n                entity: options.entity,\n                role: options.role.toUpperCase(),\n            },\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, this.makeAclObject_(resp), resp);\n        });\n    }\n    /**\n     * @typedef {array} RemoveAclResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback RemoveAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Delete access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete| BucketAccessControls: delete API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete| ObjectAccessControls: delete API Documentation}\n     *\n     * @param {object} options Configuration object.\n     * @param {string} options.entity Whose permissions will be revoked.\n     * @param {int} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {RemoveAclCallback} callback The callback function.\n     * @returns {Promise<RemoveAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * myBucket.acl.delete({\n     *   entity: 'user-useremail@example.com'\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.delete({\n     *   entity: 'user-useremail@example.com',\n     *   generation: 1\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.delete().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_bucket_owner\n     * Example of removing an owner from a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_bucket_default_owner\n     * Example of removing a default owner from a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_file_owner\n     * Example of removing an owner from a bucket:\n     */\n    delete(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'DELETE',\n            uri: '/' + encodeURIComponent(options.entity),\n            qs: query,\n        }, (err, resp) => {\n            callback(err, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetAclResponse\n     * @property {object|object[]} 0 Single or array of Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object|object[]} acl Single or array of Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get access controls on a {@link Bucket} or {@link File}. If\n     * an entity is omitted, you will receive an array of all applicable access\n     * controls.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get| BucketAccessControls: get API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get| ObjectAccessControls: get API Documentation}\n     *\n     * @param {object|function} [options] Configuration options. If you want to\n     *     receive a list of all access controls, pass the callback function as\n     * the only argument.\n     * @param {string} options.entity Whose permissions will be fetched.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetAclCallback} [callback] Callback function.\n     * @returns {Promise<GetAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * myBucket.acl.get({\n     *   entity: 'user-useremail@example.com'\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // Get all access controls.\n     * //-\n     * myBucket.acl.get(function(err, aclObjects, apiResponse) {\n     *   // aclObjects = [\n     *   //   {\n     *   //     entity: 'user-useremail@example.com',\n     *   //     role: 'owner'\n     *   //   }\n     *   // ]\n     * });\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.get({\n     *   entity: 'user-useremail@example.com',\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.acl.get().then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_file_acl\n     * Example of printing a file's ACL:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_file_acl_for_user\n     * Example of printing a file's ACL for a specific user:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_bucket_acl\n     * Example of printing a bucket's ACL:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_bucket_acl_for_user\n     * Example of printing a bucket's ACL for a specific user:\n     */\n    get(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : null;\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        let path = '';\n        const query = {};\n        if (options) {\n            path = '/' + encodeURIComponent(options.entity);\n            if (options.generation) {\n                query.generation = options.generation;\n            }\n            if (options.userProject) {\n                query.userProject = options.userProject;\n            }\n        }\n        this.request({\n            uri: path,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            let results;\n            if (resp.items) {\n                results = resp.items.map(this.makeAclObject_);\n            }\n            else {\n                results = this.makeAclObject_(resp);\n            }\n            callback(null, results, resp);\n        });\n    }\n    /**\n     * @typedef {array} UpdateAclResponse\n     * @property {object} 0 The updated Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback UpdateAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} acl The updated Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Update access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/update| BucketAccessControls: update API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/update| ObjectAccessControls: update API Documentation}\n     *\n     * @param {object} options Configuration options.\n     * @param {string} options.entity Whose permissions will be updated.\n     * @param {string} options.role Permissions allowed for the defined entity.\n     *     See {@link Storage.acl}.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {UpdateAclCallback} [callback] Callback function.\n     * @returns {Promise<UpdateAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * const options = {\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.WRITER_ROLE\n     * };\n     *\n     * myBucket.acl.update(options, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.update({\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.WRITER_ROLE,\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.update(options).then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    update(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'PUT',\n            uri: '/' + encodeURIComponent(options.entity),\n            qs: query,\n            json: {\n                role: options.role.toUpperCase(),\n            },\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, this.makeAclObject_(resp), resp);\n        });\n    }\n    /**\n     * Transform API responses to a consistent object format.\n     *\n     * @private\n     */\n    makeAclObject_(accessControlObject) {\n        const obj = {\n            entity: accessControlObject.entity,\n            role: accessControlObject.role,\n        };\n        if (accessControlObject.projectTeam) {\n            obj.projectTeam = accessControlObject.projectTeam;\n        }\n        return obj;\n    }\n    /**\n     * Patch requests up to the bucket's request object.\n     *\n     * @private\n     *\n     * @param {string} method Action.\n     * @param {string} path Request path.\n     * @param {*} query Request query object.\n     * @param {*} body Request body contents.\n     * @param {function} callback Callback function.\n     */\n    request(reqOpts, callback) {\n        reqOpts.uri = this.pathPrefix + reqOpts.uri;\n        this.request_(reqOpts, callback);\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__.promisifyAll)(Acl, {\n    exclude: ['request'],\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvYWNsLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEO0FBQ3ZEO0FBQ0EsOEJBQThCLG1CQUFtQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0EsMkVBQTJFO0FBQzNFO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw2QkFBNkI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksdURBQXVEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEIsa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLGlDQUFpQyxjQUFjLElBQUksV0FBVztBQUM5RDtBQUNBLFlBQVk7QUFDWixZQUFZO0FBQ1o7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixnQkFBZ0I7QUFDaEIsZUFBZTtBQUNmLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMENBQTBDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEIsa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0Esb0NBQW9DLGNBQWMsSUFBSSxXQUFXO0FBQ2pFO0FBQ0EsWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxLQUFLO0FBQ3BCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsK0JBQStCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrQkFBK0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCLGtCQUFrQixpQkFBaUI7QUFDbkMsa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsaUJBQWlCO0FBQ2hDLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsaUNBQWlDLGNBQWMsSUFBSSxXQUFXO0FBQzlEO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixZQUFZO0FBQ1o7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBDQUEwQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwwQ0FBMEM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCLGtCQUFrQixRQUFRO0FBQzFCLGtCQUFrQixRQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQSxvQ0FBb0MsY0FBYyxJQUFJLFdBQVc7QUFDakU7QUFDQSxZQUFZO0FBQ1osWUFBWTtBQUNaO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCLGtCQUFrQjtBQUNsQyxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDBDQUEwQztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsR0FBRztBQUNsQixlQUFlLEdBQUc7QUFDbEIsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBWTtBQUNaO0FBQ0EsQ0FBQztBQUNzQyIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvYWNsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgcHJvbWlzaWZ5QWxsIH0gZnJvbSAnQGdvb2dsZS1jbG91ZC9wcm9taXNpZnknO1xuLyoqXG4gKiBBdHRhY2ggZnVuY3Rpb25hbGl0eSB0byBhIHtAbGluayBTdG9yYWdlLmFjbH0gaW5zdGFuY2UuIFRoaXMgd2lsbCBhZGQgYW5cbiAqIG9iamVjdCBmb3IgZWFjaCByb2xlIGdyb3VwIChvd25lcnMsIHJlYWRlcnMsIGFuZCB3cml0ZXJzKSwgd2l0aCBlYWNoIG9iamVjdFxuICogY29udGFpbmluZyBtZXRob2RzIHRvIGFkZCBvciBkZWxldGUgYSB0eXBlIG9mIGVudGl0eS5cbiAqXG4gKiBBcyBhbiBleGFtcGxlLCBoZXJlIGFyZSBhIGZldyBtZXRob2RzIHRoYXQgYXJlIGNyZWF0ZWQuXG4gKlxuICogICBteUJ1Y2tldC5hY2wucmVhZGVycy5kZWxldGVHcm91cCgnZ3JvdXBJZCcsIGZ1bmN0aW9uKGVycikge30pO1xuICpcbiAqICAgbXlCdWNrZXQuYWNsLm93bmVycy5hZGRVc2VyKCdlbWFpbEBleGFtcGxlLmNvbScsIGZ1bmN0aW9uKGVyciwgYWNsKSB7fSk7XG4gKlxuICogICBteUJ1Y2tldC5hY2wud3JpdGVycy5hZGREb21haW4oJ2V4YW1wbGUuY29tJywgZnVuY3Rpb24oZXJyLCBhY2wpIHt9KTtcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBBY2xSb2xlQWNjZXNzb3JNZXRob2RzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5vd25lcnMgPSB7fTtcbiAgICAgICAgdGhpcy5yZWFkZXJzID0ge307XG4gICAgICAgIHRoaXMud3JpdGVycyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gb2JqZWN0IG9mIGNvbnZlbmllbmNlIG1ldGhvZHMgdG8gYWRkIG9yIGRlbGV0ZSBvd25lciBBQ0wgcGVybWlzc2lvbnNcbiAgICAgICAgICogZm9yIGEgZ2l2ZW4gZW50aXR5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgc3VwcG9ydGVkIG1ldGhvZHMgaW5jbHVkZTpcbiAgICAgICAgICpcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLm93bmVycy5hZGRBbGxBdXRoZW50aWNhdGVkVXNlcnNgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5vd25lcnMuZGVsZXRlQWxsQXV0aGVudGljYXRlZFVzZXJzYFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wub3duZXJzLmFkZEFsbFVzZXJzYFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wub3duZXJzLmRlbGV0ZUFsbFVzZXJzYFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wub3duZXJzLmFkZERvbWFpbmBcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLm93bmVycy5kZWxldGVEb21haW5gXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5vd25lcnMuYWRkR3JvdXBgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5vd25lcnMuZGVsZXRlR3JvdXBgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5vd25lcnMuYWRkUHJvamVjdGBcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLm93bmVycy5kZWxldGVQcm9qZWN0YFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wub3duZXJzLmFkZFVzZXJgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5vd25lcnMuZGVsZXRlVXNlcmBcbiAgICAgICAgICpcbiAgICAgICAgICogQG5hbWUgQWNsI293bmVyc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpKCk7XG4gICAgICAgICAqIGNvbnN0IG15QnVja2V0ID0gc3RvcmFnZS5idWNrZXQoJ215LWJ1Y2tldCcpO1xuICAgICAgICAgKiBjb25zdCBteUZpbGUgPSBteUJ1Y2tldC5maWxlKCdteS1maWxlJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vLVxuICAgICAgICAgKiAvLyBBZGQgYSB1c2VyIGFzIGFuIG93bmVyIG9mIGEgZmlsZS5cbiAgICAgICAgICogLy8tXG4gICAgICAgICAqIGNvbnN0IG15QnVja2V0ID0gZ2NzLmJ1Y2tldCgnbXktYnVja2V0Jyk7XG4gICAgICAgICAqIGNvbnN0IG15RmlsZSA9IG15QnVja2V0LmZpbGUoJ215LWZpbGUnKTtcbiAgICAgICAgICogbXlGaWxlLmFjbC5vd25lcnMuYWRkVXNlcignZW1haWxAZXhhbXBsZS5jb20nLCBmdW5jdGlvbihlcnIsIGFjbE9iamVjdClcbiAgICAgICAgICoge30pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLy1cbiAgICAgICAgICogLy8gRm9yIHJlZmVyZW5jZSwgdGhlIGFib3ZlIGNvbW1hbmQgaXMgdGhlIHNhbWUgYXMgcnVubmluZyB0aGUgZm9sbG93aW5nLlxuICAgICAgICAgKiAvLy1cbiAgICAgICAgICogbXlGaWxlLmFjbC5hZGQoe1xuICAgICAgICAgKiAgIGVudGl0eTogJ3VzZXItZW1haWxAZXhhbXBsZS5jb20nLFxuICAgICAgICAgKiAgIHJvbGU6IGdjcy5hY2wuT1dORVJfUk9MRVxuICAgICAgICAgKiB9LCBmdW5jdGlvbihlcnIsIGFjbE9iamVjdCkge30pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLy1cbiAgICAgICAgICogLy8gSWYgdGhlIGNhbGxiYWNrIGlzIG9taXR0ZWQsIHdlJ2xsIHJldHVybiBhIFByb21pc2UuXG4gICAgICAgICAqIC8vLVxuICAgICAgICAgKiBteUZpbGUuYWNsLm93bmVycy5hZGRVc2VyKCdlbWFpbEBleGFtcGxlLmNvbScpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgKiAgIGNvbnN0IGFjbE9iamVjdCA9IGRhdGFbMF07XG4gICAgICAgICAqICAgY29uc3QgYXBpUmVzcG9uc2UgPSBkYXRhWzFdO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm93bmVycyA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gb2JqZWN0IG9mIGNvbnZlbmllbmNlIG1ldGhvZHMgdG8gYWRkIG9yIGRlbGV0ZSByZWFkZXIgQUNMIHBlcm1pc3Npb25zXG4gICAgICAgICAqIGZvciBhIGdpdmVuIGVudGl0eS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIHN1cHBvcnRlZCBtZXRob2RzIGluY2x1ZGU6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5yZWFkZXJzLmFkZEFsbEF1dGhlbnRpY2F0ZWRVc2Vyc2BcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLnJlYWRlcnMuZGVsZXRlQWxsQXV0aGVudGljYXRlZFVzZXJzYFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wucmVhZGVycy5hZGRBbGxVc2Vyc2BcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLnJlYWRlcnMuZGVsZXRlQWxsVXNlcnNgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5yZWFkZXJzLmFkZERvbWFpbmBcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLnJlYWRlcnMuZGVsZXRlRG9tYWluYFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wucmVhZGVycy5hZGRHcm91cGBcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLnJlYWRlcnMuZGVsZXRlR3JvdXBgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5yZWFkZXJzLmFkZFByb2plY3RgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5yZWFkZXJzLmRlbGV0ZVByb2plY3RgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5yZWFkZXJzLmFkZFVzZXJgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC5yZWFkZXJzLmRlbGV0ZVVzZXJgXG4gICAgICAgICAqXG4gICAgICAgICAqIEBuYW1lIEFjbCNyZWFkZXJzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBjb25zdCBzdG9yYWdlID0gcmVxdWlyZSgnQGdvb2dsZS1jbG91ZC9zdG9yYWdlJykoKTtcbiAgICAgICAgICogY29uc3QgbXlCdWNrZXQgPSBzdG9yYWdlLmJ1Y2tldCgnbXktYnVja2V0Jyk7XG4gICAgICAgICAqIGNvbnN0IG15RmlsZSA9IG15QnVja2V0LmZpbGUoJ215LWZpbGUnKTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8tXG4gICAgICAgICAqIC8vIEFkZCBhIHVzZXIgYXMgYSByZWFkZXIgb2YgYSBmaWxlLlxuICAgICAgICAgKiAvLy1cbiAgICAgICAgICogbXlGaWxlLmFjbC5yZWFkZXJzLmFkZFVzZXIoJ2VtYWlsQGV4YW1wbGUuY29tJywgZnVuY3Rpb24oZXJyLCBhY2xPYmplY3QpXG4gICAgICAgICAqIHt9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogLy8tXG4gICAgICAgICAqIC8vIEZvciByZWZlcmVuY2UsIHRoZSBhYm92ZSBjb21tYW5kIGlzIHRoZSBzYW1lIGFzIHJ1bm5pbmcgdGhlIGZvbGxvd2luZy5cbiAgICAgICAgICogLy8tXG4gICAgICAgICAqIG15RmlsZS5hY2wuYWRkKHtcbiAgICAgICAgICogICBlbnRpdHk6ICd1c2VyLWVtYWlsQGV4YW1wbGUuY29tJyxcbiAgICAgICAgICogICByb2xlOiBnY3MuYWNsLlJFQURFUl9ST0xFXG4gICAgICAgICAqIH0sIGZ1bmN0aW9uKGVyciwgYWNsT2JqZWN0KSB7fSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vLVxuICAgICAgICAgKiAvLyBJZiB0aGUgY2FsbGJhY2sgaXMgb21pdHRlZCwgd2UnbGwgcmV0dXJuIGEgUHJvbWlzZS5cbiAgICAgICAgICogLy8tXG4gICAgICAgICAqIG15RmlsZS5hY2wucmVhZGVycy5hZGRVc2VyKCdlbWFpbEBleGFtcGxlLmNvbScpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgKiAgIGNvbnN0IGFjbE9iamVjdCA9IGRhdGFbMF07XG4gICAgICAgICAqICAgY29uc3QgYXBpUmVzcG9uc2UgPSBkYXRhWzFdO1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlYWRlcnMgPSB7fTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9iamVjdCBvZiBjb252ZW5pZW5jZSBtZXRob2RzIHRvIGFkZCBvciBkZWxldGUgd3JpdGVyIEFDTCBwZXJtaXNzaW9uc1xuICAgICAgICAgKiBmb3IgYSBnaXZlbiBlbnRpdHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBzdXBwb3J0ZWQgbWV0aG9kcyBpbmNsdWRlOlxuICAgICAgICAgKlxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wud3JpdGVycy5hZGRBbGxBdXRoZW50aWNhdGVkVXNlcnNgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC53cml0ZXJzLmRlbGV0ZUFsbEF1dGhlbnRpY2F0ZWRVc2Vyc2BcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLndyaXRlcnMuYWRkQWxsVXNlcnNgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC53cml0ZXJzLmRlbGV0ZUFsbFVzZXJzYFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wud3JpdGVycy5hZGREb21haW5gXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC53cml0ZXJzLmRlbGV0ZURvbWFpbmBcbiAgICAgICAgICogICAtIGBteUZpbGUuYWNsLndyaXRlcnMuYWRkR3JvdXBgXG4gICAgICAgICAqICAgLSBgbXlGaWxlLmFjbC53cml0ZXJzLmRlbGV0ZUdyb3VwYFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wud3JpdGVycy5hZGRQcm9qZWN0YFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wud3JpdGVycy5kZWxldGVQcm9qZWN0YFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wud3JpdGVycy5hZGRVc2VyYFxuICAgICAgICAgKiAgIC0gYG15RmlsZS5hY2wud3JpdGVycy5kZWxldGVVc2VyYFxuICAgICAgICAgKlxuICAgICAgICAgKiBAbmFtZSBBY2wjd3JpdGVyc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpKCk7XG4gICAgICAgICAqIGNvbnN0IG15QnVja2V0ID0gc3RvcmFnZS5idWNrZXQoJ215LWJ1Y2tldCcpO1xuICAgICAgICAgKiBjb25zdCBteUZpbGUgPSBteUJ1Y2tldC5maWxlKCdteS1maWxlJyk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vLVxuICAgICAgICAgKiAvLyBBZGQgYSB1c2VyIGFzIGEgd3JpdGVyIG9mIGEgZmlsZS5cbiAgICAgICAgICogLy8tXG4gICAgICAgICAqIG15RmlsZS5hY2wud3JpdGVycy5hZGRVc2VyKCdlbWFpbEBleGFtcGxlLmNvbScsIGZ1bmN0aW9uKGVyciwgYWNsT2JqZWN0KVxuICAgICAgICAgKiB7fSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIC8vLVxuICAgICAgICAgKiAvLyBGb3IgcmVmZXJlbmNlLCB0aGUgYWJvdmUgY29tbWFuZCBpcyB0aGUgc2FtZSBhcyBydW5uaW5nIHRoZSBmb2xsb3dpbmcuXG4gICAgICAgICAqIC8vLVxuICAgICAgICAgKiBteUZpbGUuYWNsLmFkZCh7XG4gICAgICAgICAqICAgZW50aXR5OiAndXNlci1lbWFpbEBleGFtcGxlLmNvbScsXG4gICAgICAgICAqICAgcm9sZTogZ2NzLmFjbC5XUklURVJfUk9MRVxuICAgICAgICAgKiB9LCBmdW5jdGlvbihlcnIsIGFjbE9iamVjdCkge30pO1xuICAgICAgICAgKlxuICAgICAgICAgKiAvLy1cbiAgICAgICAgICogLy8gSWYgdGhlIGNhbGxiYWNrIGlzIG9taXR0ZWQsIHdlJ2xsIHJldHVybiBhIFByb21pc2UuXG4gICAgICAgICAqIC8vLVxuICAgICAgICAgKiBteUZpbGUuYWNsLndyaXRlcnMuYWRkVXNlcignZW1haWxAZXhhbXBsZS5jb20nKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICogICBjb25zdCBhY2xPYmplY3QgPSBkYXRhWzBdO1xuICAgICAgICAgKiAgIGNvbnN0IGFwaVJlc3BvbnNlID0gZGF0YVsxXTtcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53cml0ZXJzID0ge307XG4gICAgICAgIEFjbFJvbGVBY2Nlc3Nvck1ldGhvZHMucm9sZXMuZm9yRWFjaCh0aGlzLl9hc3NpZ25BY2Nlc3NNZXRob2RzLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBfYXNzaWduQWNjZXNzTWV0aG9kcyhyb2xlKSB7XG4gICAgICAgIGNvbnN0IGFjY2Vzc01ldGhvZHMgPSBBY2xSb2xlQWNjZXNzb3JNZXRob2RzLmFjY2Vzc01ldGhvZHM7XG4gICAgICAgIGNvbnN0IGVudGl0aWVzID0gQWNsUm9sZUFjY2Vzc29yTWV0aG9kcy5lbnRpdGllcztcbiAgICAgICAgY29uc3Qgcm9sZUdyb3VwID0gcm9sZS50b0xvd2VyQ2FzZSgpICsgJ3MnO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB0aGlzW3JvbGVHcm91cF0gPSBlbnRpdGllcy5yZWR1Y2UoKGFjYywgZW50aXR5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1ByZWZpeCA9IGVudGl0eS5jaGFyQXQoZW50aXR5Lmxlbmd0aCAtIDEpID09PSAnLSc7XG4gICAgICAgICAgICBhY2Nlc3NNZXRob2RzLmZvckVhY2goYWNjZXNzTWV0aG9kID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbWV0aG9kID0gYWNjZXNzTWV0aG9kICsgZW50aXR5WzBdLnRvVXBwZXJDYXNlKCkgKyBlbnRpdHkuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgICAgIGlmIChpc1ByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBtZXRob2QucmVwbGFjZSgnLScsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV3JhcCB0aGUgcGFyZW50IGFjY2Vzc29yIG1ldGhvZCAoZS5nLiBgYWRkYCBvciBgZGVsZXRlYCkgdG8gYXZvaWQgdGhlXG4gICAgICAgICAgICAgICAgLy8gbW9yZSBjb21wbGV4IEFQSSBvZiBzcGVjaWZ5aW5nIGFuIGBlbnRpdHlgIGFuZCBgcm9sZWAuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICBhY2NbbWV0aG9kXSA9IChlbnRpdHlJZCwgb3B0aW9ucywgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFwaUVudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUHJlZml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGlFbnRpdHkgPSBlbnRpdHkgKyBlbnRpdHlJZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBlbnRpdHkgaXMgbm90IGEgcHJlZml4LCBpdCBpcyBhIHNwZWNpYWwgZW50aXR5IGdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IGRvZXMgbm90IHJlcXVpcmUgZnVydGhlciBkZXRhaWxzLiBUaGUgYWNjZXNzb3IgbWV0aG9kc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBhY2NlcHQgYSBjYWxsYmFjay5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaUVudGl0eSA9IGVudGl0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZW50aXR5SWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBhcGlFbnRpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlLFxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IFtvcHRpb25zXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1thY2Nlc3NNZXRob2RdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG59XG5BY2xSb2xlQWNjZXNzb3JNZXRob2RzLmFjY2Vzc01ldGhvZHMgPSBbJ2FkZCcsICdkZWxldGUnXTtcbkFjbFJvbGVBY2Nlc3Nvck1ldGhvZHMuZW50aXRpZXMgPSBbXG4gICAgLy8gU3BlY2lhbCBlbnRpdHkgZ3JvdXBzIHRoYXQgZG8gbm90IHJlcXVpcmUgZnVydGhlciBzcGVjaWZpY2F0aW9uLlxuICAgICdhbGxBdXRoZW50aWNhdGVkVXNlcnMnLFxuICAgICdhbGxVc2VycycsXG4gICAgLy8gRW50aXR5IGdyb3VwcyB0aGF0IHJlcXVpcmUgc3BlY2lmaWNhdGlvbiwgZS5nLiBgdXNlci1lbWFpbEBleGFtcGxlLmNvbWAuXG4gICAgJ2RvbWFpbi0nLFxuICAgICdncm91cC0nLFxuICAgICdwcm9qZWN0LScsXG4gICAgJ3VzZXItJyxcbl07XG5BY2xSb2xlQWNjZXNzb3JNZXRob2RzLnJvbGVzID0gWydPV05FUicsICdSRUFERVInLCAnV1JJVEVSJ107XG4vKipcbiAqIENsb3VkIFN0b3JhZ2UgdXNlcyBhY2Nlc3MgY29udHJvbCBsaXN0cyAoQUNMcykgdG8gbWFuYWdlIG9iamVjdCBhbmRcbiAqIGJ1Y2tldCBhY2Nlc3MuIEFDTHMgYXJlIHRoZSBtZWNoYW5pc20geW91IHVzZSB0byBzaGFyZSBvYmplY3RzIHdpdGggb3RoZXJcbiAqIHVzZXJzIGFuZCBhbGxvdyBvdGhlciB1c2VycyB0byBhY2Nlc3MgeW91ciBidWNrZXRzIGFuZCBvYmplY3RzLlxuICpcbiAqIEFuIEFDTCBjb25zaXN0cyBvZiBvbmUgb3IgbW9yZSBlbnRyaWVzLCB3aGVyZSBlYWNoIGVudHJ5IGdyYW50cyBwZXJtaXNzaW9uc1xuICogdG8gYW4gZW50aXR5LiBQZXJtaXNzaW9ucyBkZWZpbmUgdGhlIGFjdGlvbnMgdGhhdCBjYW4gYmUgcGVyZm9ybWVkIGFnYWluc3QgYW5cbiAqIG9iamVjdCBvciBidWNrZXQgKGZvciBleGFtcGxlLCBgUkVBRGAgb3IgYFdSSVRFYCk7IHRoZSBlbnRpdHkgZGVmaW5lcyB3aG8gdGhlXG4gKiBwZXJtaXNzaW9uIGFwcGxpZXMgdG8gKGZvciBleGFtcGxlLCBhIHNwZWNpZmljIHVzZXIgb3IgZ3JvdXAgb2YgdXNlcnMpLlxuICpcbiAqIFdoZXJlIGFuIGBlbnRpdHlgIHZhbHVlIGlzIGFjY2VwdGVkLCB3ZSBmb2xsb3cgdGhlIGZvcm1hdCB0aGUgQ2xvdWQgU3RvcmFnZVxuICogQVBJIGV4cGVjdHMuXG4gKlxuICogUmVmZXIgdG9cbiAqIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvanNvbl9hcGkvdjEvZGVmYXVsdE9iamVjdEFjY2Vzc0NvbnRyb2xzXG4gKiBmb3IgdGhlIG1vc3QgdXAtdG8tZGF0ZSB2YWx1ZXMuXG4gKlxuICogICAtIGB1c2VyLXVzZXJJZGBcbiAqICAgLSBgdXNlci1lbWFpbGBcbiAqICAgLSBgZ3JvdXAtZ3JvdXBJZGBcbiAqICAgLSBgZ3JvdXAtZW1haWxgXG4gKiAgIC0gYGRvbWFpbi1kb21haW5gXG4gKiAgIC0gYHByb2plY3QtdGVhbS1wcm9qZWN0SWRgXG4gKiAgIC0gYGFsbFVzZXJzYFxuICogICAtIGBhbGxBdXRoZW50aWNhdGVkVXNlcnNgXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAtIFRoZSB1c2VyIFwibGl6QGV4YW1wbGUuY29tXCIgd291bGQgYmUgYHVzZXItbGl6QGV4YW1wbGUuY29tYC5cbiAqICAgLSBUaGUgZ3JvdXAgXCJleGFtcGxlQGdvb2dsZWdyb3Vwcy5jb21cIiB3b3VsZCBiZVxuICogICAgIGBncm91cC1leGFtcGxlQGdvb2dsZWdyb3Vwcy5jb21gLlxuICogICAtIFRvIHJlZmVyIHRvIGFsbCBtZW1iZXJzIG9mIHRoZSBHb29nbGUgQXBwcyBmb3IgQnVzaW5lc3MgZG9tYWluXG4gKiAgICAgXCJleGFtcGxlLmNvbVwiLCB0aGUgZW50aXR5IHdvdWxkIGJlIGBkb21haW4tZXhhbXBsZS5jb21gLlxuICpcbiAqIEZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uLCBzZWVcbiAqIHtAbGluayBodHRwOi8vZ29vLmdsLzZxQkJQT3wgQWJvdXQgQWNjZXNzIENvbnRyb2wgTGlzdHN9LlxuICpcbiAqIEBjb25zdHJ1Y3RvciBBY2xcbiAqIEBtaXhpblxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuICovXG5jbGFzcyBBY2wgZXh0ZW5kcyBBY2xSb2xlQWNjZXNzb3JNZXRob2RzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucGF0aFByZWZpeCA9IG9wdGlvbnMucGF0aFByZWZpeDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0XyA9IG9wdGlvbnMucmVxdWVzdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge2FycmF5fSBBZGRBY2xSZXNwb25zZVxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSAwIFRoZSBBY2wgT2JqZWN0cy5cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gMSBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQGNhbGxiYWNrIEFkZEFjbENhbGxiYWNrXG4gICAgICogQHBhcmFtIHs/RXJyb3J9IGVyciBSZXF1ZXN0IGVycm9yLCBpZiBhbnkuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGFjbCBUaGUgQWNsIE9iamVjdHMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGFwaVJlc3BvbnNlIFRoZSBmdWxsIEFQSSByZXNwb25zZS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBZGQgYWNjZXNzIGNvbnRyb2xzIG9uIGEge0BsaW5rIEJ1Y2tldH0gb3Ige0BsaW5rIEZpbGV9LlxuICAgICAqXG4gICAgICogU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vc3RvcmFnZS9kb2NzL2pzb25fYXBpL3YxL2J1Y2tldEFjY2Vzc0NvbnRyb2xzL2luc2VydHwgQnVja2V0QWNjZXNzQ29udHJvbHM6IGluc2VydCBBUEkgRG9jdW1lbnRhdGlvbn1cbiAgICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvanNvbl9hcGkvdjEvb2JqZWN0QWNjZXNzQ29udHJvbHMvaW5zZXJ0fCBPYmplY3RBY2Nlc3NDb250cm9sczogaW5zZXJ0IEFQSSBEb2N1bWVudGF0aW9ufVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmVudGl0eSBXaG9zZSBwZXJtaXNzaW9ucyB3aWxsIGJlIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnJvbGUgUGVybWlzc2lvbnMgYWxsb3dlZCBmb3IgdGhlIGRlZmluZWQgZW50aXR5LlxuICAgICAqICAgICBTZWUge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvYWNjZXNzLWNvbnRyb2wgQWNjZXNzXG4gICAgICogQ29udHJvbH0uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmdlbmVyYXRpb25dICoqRmlsZSBPYmplY3RzIE9ubHkqKiBTZWxlY3QgYSBzcGVjaWZpY1xuICAgICAqICAgICByZXZpc2lvbiBvZiB0aGlzIGZpbGUgKGFzIG9wcG9zZWQgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uLCB0aGUgZGVmYXVsdCkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnVzZXJQcm9qZWN0XSBUaGUgSUQgb2YgdGhlIHByb2plY3Qgd2hpY2ggd2lsbCBiZVxuICAgICAqICAgICBiaWxsZWQgZm9yIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7QWRkQWNsQ2FsbGJhY2t9IFtjYWxsYmFja10gQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge1Byb21pc2U8QWRkQWNsUmVzcG9uc2U+fVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBzdG9yYWdlID0gcmVxdWlyZSgnQGdvb2dsZS1jbG91ZC9zdG9yYWdlJykoKTtcbiAgICAgKiBjb25zdCBteUJ1Y2tldCA9IHN0b3JhZ2UuYnVja2V0KCdteS1idWNrZXQnKTtcbiAgICAgKiBjb25zdCBteUZpbGUgPSBteUJ1Y2tldC5maWxlKCdteS1maWxlJyk7XG4gICAgICpcbiAgICAgKiBjb25zdCBvcHRpb25zID0ge1xuICAgICAqICAgZW50aXR5OiAndXNlci11c2VyZW1haWxAZXhhbXBsZS5jb20nLFxuICAgICAqICAgcm9sZTogZ2NzLmFjbC5PV05FUl9ST0xFXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIG15QnVja2V0LmFjbC5hZGQob3B0aW9ucywgZnVuY3Rpb24oZXJyLCBhY2xPYmplY3QsIGFwaVJlc3BvbnNlKSB7fSk7XG4gICAgICpcbiAgICAgKiAvLy1cbiAgICAgKiAvLyBGb3IgZmlsZSBBQ0wgb3BlcmF0aW9ucywgeW91IGNhbiBhbHNvIHNwZWNpZnkgYSBgZ2VuZXJhdGlvbmAgcHJvcGVydHkuXG4gICAgICogLy8gSGVyZSBpcyBob3cgeW91IHdvdWxkIGdyYW50IG93bmVyc2hpcCBwZXJtaXNzaW9ucyB0byBhIHVzZXIgb24gYVxuICAgICAqIHNwZWNpZmljXG4gICAgICogLy8gcmV2aXNpb24gb2YgYSBmaWxlLlxuICAgICAqIC8vLVxuICAgICAqIG15RmlsZS5hY2wuYWRkKHtcbiAgICAgKiAgIGVudGl0eTogJ3VzZXItdXNlcmVtYWlsQGV4YW1wbGUuY29tJyxcbiAgICAgKiAgIHJvbGU6IGdjcy5hY2wuT1dORVJfUk9MRSxcbiAgICAgKiAgIGdlbmVyYXRpb246IDFcbiAgICAgKiB9LCBmdW5jdGlvbihlcnIsIGFjbE9iamVjdCwgYXBpUmVzcG9uc2UpIHt9KTtcbiAgICAgKlxuICAgICAqIC8vLVxuICAgICAqIC8vIElmIHRoZSBjYWxsYmFjayBpcyBvbWl0dGVkLCB3ZSdsbCByZXR1cm4gYSBQcm9taXNlLlxuICAgICAqIC8vLVxuICAgICAqIG15QnVja2V0LmFjbC5hZGQob3B0aW9ucykudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICogICBjb25zdCBhY2xPYmplY3QgPSBkYXRhWzBdO1xuICAgICAqICAgY29uc3QgYXBpUmVzcG9uc2UgPSBkYXRhWzFdO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogYGBgXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+aW5jbHVkZTpzYW1wbGVzL2FjbC5qczwvY2FwdGlvbj5cbiAgICAgKiByZWdpb25fdGFnOnN0b3JhZ2VfYWRkX2ZpbGVfb3duZXJcbiAgICAgKiBFeGFtcGxlIG9mIGFkZGluZyBhbiBvd25lciB0byBhIGZpbGU6XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5pbmNsdWRlOnNhbXBsZXMvYWNsLmpzPC9jYXB0aW9uPlxuICAgICAqIHJlZ2lvbl90YWc6c3RvcmFnZV9hZGRfYnVja2V0X293bmVyXG4gICAgICogRXhhbXBsZSBvZiBhZGRpbmcgYW4gb3duZXIgdG8gYSBidWNrZXQ6XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5pbmNsdWRlOnNhbXBsZXMvYWNsLmpzPC9jYXB0aW9uPlxuICAgICAqIHJlZ2lvbl90YWc6c3RvcmFnZV9hZGRfYnVja2V0X2RlZmF1bHRfb3duZXJcbiAgICAgKiBFeGFtcGxlIG9mIGFkZGluZyBhIGRlZmF1bHQgb3duZXIgdG8gYSBidWNrZXQ6XG4gICAgICovXG4gICAgYWRkKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0ge307XG4gICAgICAgIGlmIChvcHRpb25zLmdlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIHF1ZXJ5LmdlbmVyYXRpb24gPSBvcHRpb25zLmdlbmVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudXNlclByb2plY3QpIHtcbiAgICAgICAgICAgIHF1ZXJ5LnVzZXJQcm9qZWN0ID0gb3B0aW9ucy51c2VyUHJvamVjdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmk6ICcnLFxuICAgICAgICAgICAgcXM6IHF1ZXJ5LFxuICAgICAgICAgICAgbWF4UmV0cmllczogMCwgLy9leHBsaWNpdGx5IHNldCB0aGlzIHZhbHVlIHNpbmNlIHRoaXMgaXMgYSBub24taWRlbXBvdGVudCBmdW5jdGlvblxuICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgIGVudGl0eTogb3B0aW9ucy5lbnRpdHksXG4gICAgICAgICAgICAgICAgcm9sZTogb3B0aW9ucy5yb2xlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsLCByZXNwKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCB0aGlzLm1ha2VBY2xPYmplY3RfKHJlc3ApLCByZXNwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHthcnJheX0gUmVtb3ZlQWNsUmVzcG9uc2VcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gMCBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQGNhbGxiYWNrIFJlbW92ZUFjbENhbGxiYWNrXG4gICAgICogQHBhcmFtIHs/RXJyb3J9IGVyciBSZXF1ZXN0IGVycm9yLCBpZiBhbnkuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGFwaVJlc3BvbnNlIFRoZSBmdWxsIEFQSSByZXNwb25zZS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYWNjZXNzIGNvbnRyb2xzIG9uIGEge0BsaW5rIEJ1Y2tldH0gb3Ige0BsaW5rIEZpbGV9LlxuICAgICAqXG4gICAgICogU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vc3RvcmFnZS9kb2NzL2pzb25fYXBpL3YxL2J1Y2tldEFjY2Vzc0NvbnRyb2xzL2RlbGV0ZXwgQnVja2V0QWNjZXNzQ29udHJvbHM6IGRlbGV0ZSBBUEkgRG9jdW1lbnRhdGlvbn1cbiAgICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvanNvbl9hcGkvdjEvb2JqZWN0QWNjZXNzQ29udHJvbHMvZGVsZXRlfCBPYmplY3RBY2Nlc3NDb250cm9sczogZGVsZXRlIEFQSSBEb2N1bWVudGF0aW9ufVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZW50aXR5IFdob3NlIHBlcm1pc3Npb25zIHdpbGwgYmUgcmV2b2tlZC5cbiAgICAgKiBAcGFyYW0ge2ludH0gW29wdGlvbnMuZ2VuZXJhdGlvbl0gKipGaWxlIE9iamVjdHMgT25seSoqIFNlbGVjdCBhIHNwZWNpZmljXG4gICAgICogICAgIHJldmlzaW9uIG9mIHRoaXMgZmlsZSAoYXMgb3Bwb3NlZCB0byB0aGUgbGF0ZXN0IHZlcnNpb24sIHRoZSBkZWZhdWx0KS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudXNlclByb2plY3RdIFRoZSBJRCBvZiB0aGUgcHJvamVjdCB3aGljaCB3aWxsIGJlXG4gICAgICogICAgIGJpbGxlZCBmb3IgdGhlIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHtSZW1vdmVBY2xDYWxsYmFja30gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFJlbW92ZUFjbFJlc3BvbnNlPn1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpKCk7XG4gICAgICogY29uc3QgbXlCdWNrZXQgPSBzdG9yYWdlLmJ1Y2tldCgnbXktYnVja2V0Jyk7XG4gICAgICogY29uc3QgbXlGaWxlID0gbXlCdWNrZXQuZmlsZSgnbXktZmlsZScpO1xuICAgICAqXG4gICAgICogbXlCdWNrZXQuYWNsLmRlbGV0ZSh7XG4gICAgICogICBlbnRpdHk6ICd1c2VyLXVzZXJlbWFpbEBleGFtcGxlLmNvbSdcbiAgICAgKiB9LCBmdW5jdGlvbihlcnIsIGFwaVJlc3BvbnNlKSB7fSk7XG4gICAgICpcbiAgICAgKiAvLy1cbiAgICAgKiAvLyBGb3IgZmlsZSBBQ0wgb3BlcmF0aW9ucywgeW91IGNhbiBhbHNvIHNwZWNpZnkgYSBgZ2VuZXJhdGlvbmAgcHJvcGVydHkuXG4gICAgICogLy8tXG4gICAgICogbXlGaWxlLmFjbC5kZWxldGUoe1xuICAgICAqICAgZW50aXR5OiAndXNlci11c2VyZW1haWxAZXhhbXBsZS5jb20nLFxuICAgICAqICAgZ2VuZXJhdGlvbjogMVxuICAgICAqIH0sIGZ1bmN0aW9uKGVyciwgYXBpUmVzcG9uc2UpIHt9KTtcbiAgICAgKlxuICAgICAqIC8vLVxuICAgICAqIC8vIElmIHRoZSBjYWxsYmFjayBpcyBvbWl0dGVkLCB3ZSdsbCByZXR1cm4gYSBQcm9taXNlLlxuICAgICAqIC8vLVxuICAgICAqIG15RmlsZS5hY2wuZGVsZXRlKCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICogICBjb25zdCBhcGlSZXNwb25zZSA9IGRhdGFbMF07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5pbmNsdWRlOnNhbXBsZXMvYWNsLmpzPC9jYXB0aW9uPlxuICAgICAqIHJlZ2lvbl90YWc6c3RvcmFnZV9yZW1vdmVfYnVja2V0X293bmVyXG4gICAgICogRXhhbXBsZSBvZiByZW1vdmluZyBhbiBvd25lciBmcm9tIGEgYnVja2V0OlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+aW5jbHVkZTpzYW1wbGVzL2FjbC5qczwvY2FwdGlvbj5cbiAgICAgKiByZWdpb25fdGFnOnN0b3JhZ2VfcmVtb3ZlX2J1Y2tldF9kZWZhdWx0X293bmVyXG4gICAgICogRXhhbXBsZSBvZiByZW1vdmluZyBhIGRlZmF1bHQgb3duZXIgZnJvbSBhIGJ1Y2tldDpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmluY2x1ZGU6c2FtcGxlcy9hY2wuanM8L2NhcHRpb24+XG4gICAgICogcmVnaW9uX3RhZzpzdG9yYWdlX3JlbW92ZV9maWxlX293bmVyXG4gICAgICogRXhhbXBsZSBvZiByZW1vdmluZyBhbiBvd25lciBmcm9tIGEgYnVja2V0OlxuICAgICAqL1xuICAgIGRlbGV0ZShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBxdWVyeSA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5nZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICBxdWVyeS5nZW5lcmF0aW9uID0gb3B0aW9ucy5nZW5lcmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnVzZXJQcm9qZWN0KSB7XG4gICAgICAgICAgICBxdWVyeS51c2VyUHJvamVjdCA9IG9wdGlvbnMudXNlclByb2plY3Q7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICB1cmk6ICcvJyArIGVuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLmVudGl0eSksXG4gICAgICAgICAgICBxczogcXVlcnksXG4gICAgICAgIH0sIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7YXJyYXl9IEdldEFjbFJlc3BvbnNlXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R8b2JqZWN0W119IDAgU2luZ2xlIG9yIGFycmF5IG9mIEFjbCBPYmplY3RzLlxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSAxIFRoZSBmdWxsIEFQSSByZXNwb25zZS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAY2FsbGJhY2sgR2V0QWNsQ2FsbGJhY2tcbiAgICAgKiBAcGFyYW0gez9FcnJvcn0gZXJyIFJlcXVlc3QgZXJyb3IsIGlmIGFueS5cbiAgICAgKiBAcGFyYW0ge29iamVjdHxvYmplY3RbXX0gYWNsIFNpbmdsZSBvciBhcnJheSBvZiBBY2wgT2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gYXBpUmVzcG9uc2UgVGhlIGZ1bGwgQVBJIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEdldCBhY2Nlc3MgY29udHJvbHMgb24gYSB7QGxpbmsgQnVja2V0fSBvciB7QGxpbmsgRmlsZX0uIElmXG4gICAgICogYW4gZW50aXR5IGlzIG9taXR0ZWQsIHlvdSB3aWxsIHJlY2VpdmUgYW4gYXJyYXkgb2YgYWxsIGFwcGxpY2FibGUgYWNjZXNzXG4gICAgICogY29udHJvbHMuXG4gICAgICpcbiAgICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvanNvbl9hcGkvdjEvYnVja2V0QWNjZXNzQ29udHJvbHMvZ2V0fCBCdWNrZXRBY2Nlc3NDb250cm9sczogZ2V0IEFQSSBEb2N1bWVudGF0aW9ufVxuICAgICAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy9qc29uX2FwaS92MS9vYmplY3RBY2Nlc3NDb250cm9scy9nZXR8IE9iamVjdEFjY2Vzc0NvbnRyb2xzOiBnZXQgQVBJIERvY3VtZW50YXRpb259XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gW29wdGlvbnNdIENvbmZpZ3VyYXRpb24gb3B0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICAgKiAgICAgcmVjZWl2ZSBhIGxpc3Qgb2YgYWxsIGFjY2VzcyBjb250cm9scywgcGFzcyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gYXNcbiAgICAgKiB0aGUgb25seSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5lbnRpdHkgV2hvc2UgcGVybWlzc2lvbnMgd2lsbCBiZSBmZXRjaGVkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5nZW5lcmF0aW9uXSAqKkZpbGUgT2JqZWN0cyBPbmx5KiogU2VsZWN0IGEgc3BlY2lmaWNcbiAgICAgKiAgICAgcmV2aXNpb24gb2YgdGhpcyBmaWxlIChhcyBvcHBvc2VkIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiwgdGhlIGRlZmF1bHQpLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy51c2VyUHJvamVjdF0gVGhlIElEIG9mIHRoZSBwcm9qZWN0IHdoaWNoIHdpbGwgYmVcbiAgICAgKiAgICAgYmlsbGVkIGZvciB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0ge0dldEFjbENhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEdldEFjbFJlc3BvbnNlPn1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpKCk7XG4gICAgICogY29uc3QgbXlCdWNrZXQgPSBzdG9yYWdlLmJ1Y2tldCgnbXktYnVja2V0Jyk7XG4gICAgICogY29uc3QgbXlGaWxlID0gbXlCdWNrZXQuZmlsZSgnbXktZmlsZScpO1xuICAgICAqXG4gICAgICogbXlCdWNrZXQuYWNsLmdldCh7XG4gICAgICogICBlbnRpdHk6ICd1c2VyLXVzZXJlbWFpbEBleGFtcGxlLmNvbSdcbiAgICAgKiB9LCBmdW5jdGlvbihlcnIsIGFjbE9iamVjdCwgYXBpUmVzcG9uc2UpIHt9KTtcbiAgICAgKlxuICAgICAqIC8vLVxuICAgICAqIC8vIEdldCBhbGwgYWNjZXNzIGNvbnRyb2xzLlxuICAgICAqIC8vLVxuICAgICAqIG15QnVja2V0LmFjbC5nZXQoZnVuY3Rpb24oZXJyLCBhY2xPYmplY3RzLCBhcGlSZXNwb25zZSkge1xuICAgICAqICAgLy8gYWNsT2JqZWN0cyA9IFtcbiAgICAgKiAgIC8vICAge1xuICAgICAqICAgLy8gICAgIGVudGl0eTogJ3VzZXItdXNlcmVtYWlsQGV4YW1wbGUuY29tJyxcbiAgICAgKiAgIC8vICAgICByb2xlOiAnb3duZXInXG4gICAgICogICAvLyAgIH1cbiAgICAgKiAgIC8vIF1cbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vLVxuICAgICAqIC8vIEZvciBmaWxlIEFDTCBvcGVyYXRpb25zLCB5b3UgY2FuIGFsc28gc3BlY2lmeSBhIGBnZW5lcmF0aW9uYCBwcm9wZXJ0eS5cbiAgICAgKiAvLy1cbiAgICAgKiBteUZpbGUuYWNsLmdldCh7XG4gICAgICogICBlbnRpdHk6ICd1c2VyLXVzZXJlbWFpbEBleGFtcGxlLmNvbScsXG4gICAgICogICBnZW5lcmF0aW9uOiAxXG4gICAgICogfSwgZnVuY3Rpb24oZXJyLCBhY2xPYmplY3QsIGFwaVJlc3BvbnNlKSB7fSk7XG4gICAgICpcbiAgICAgKiAvLy1cbiAgICAgKiAvLyBJZiB0aGUgY2FsbGJhY2sgaXMgb21pdHRlZCwgd2UnbGwgcmV0dXJuIGEgUHJvbWlzZS5cbiAgICAgKiAvLy1cbiAgICAgKiBteUJ1Y2tldC5hY2wuZ2V0KCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICogICBjb25zdCBhY2xPYmplY3QgPSBkYXRhWzBdO1xuICAgICAqICAgY29uc3QgYXBpUmVzcG9uc2UgPSBkYXRhWzFdO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogYGBgXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+aW5jbHVkZTpzYW1wbGVzL2FjbC5qczwvY2FwdGlvbj5cbiAgICAgKiByZWdpb25fdGFnOnN0b3JhZ2VfcHJpbnRfZmlsZV9hY2xcbiAgICAgKiBFeGFtcGxlIG9mIHByaW50aW5nIGEgZmlsZSdzIEFDTDpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmluY2x1ZGU6c2FtcGxlcy9hY2wuanM8L2NhcHRpb24+XG4gICAgICogcmVnaW9uX3RhZzpzdG9yYWdlX3ByaW50X2ZpbGVfYWNsX2Zvcl91c2VyXG4gICAgICogRXhhbXBsZSBvZiBwcmludGluZyBhIGZpbGUncyBBQ0wgZm9yIGEgc3BlY2lmaWMgdXNlcjpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmluY2x1ZGU6c2FtcGxlcy9hY2wuanM8L2NhcHRpb24+XG4gICAgICogcmVnaW9uX3RhZzpzdG9yYWdlX3ByaW50X2J1Y2tldF9hY2xcbiAgICAgKiBFeGFtcGxlIG9mIHByaW50aW5nIGEgYnVja2V0J3MgQUNMOlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+aW5jbHVkZTpzYW1wbGVzL2FjbC5qczwvY2FwdGlvbj5cbiAgICAgKiByZWdpb25fdGFnOnN0b3JhZ2VfcHJpbnRfYnVja2V0X2FjbF9mb3JfdXNlclxuICAgICAqIEV4YW1wbGUgb2YgcHJpbnRpbmcgYSBidWNrZXQncyBBQ0wgZm9yIGEgc3BlY2lmaWMgdXNlcjpcbiAgICAgKi9cbiAgICBnZXQob3B0aW9uc09yQ2FsbGJhY2ssIGNiKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uc09yQ2FsbGJhY2sgPT09ICdvYmplY3QnID8gb3B0aW9uc09yQ2FsbGJhY2sgOiBudWxsO1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IHR5cGVvZiBvcHRpb25zT3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnNPckNhbGxiYWNrIDogY2I7XG4gICAgICAgIGxldCBwYXRoID0gJyc7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0ge307XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBwYXRoID0gJy8nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMuZW50aXR5KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmdlbmVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBxdWVyeS5nZW5lcmF0aW9uID0gb3B0aW9ucy5nZW5lcmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudXNlclByb2plY3QpIHtcbiAgICAgICAgICAgICAgICBxdWVyeS51c2VyUHJvamVjdCA9IG9wdGlvbnMudXNlclByb2plY3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIHVyaTogcGF0aCxcbiAgICAgICAgICAgIHFzOiBxdWVyeSxcbiAgICAgICAgfSwgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCwgcmVzcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHJlc3VsdHM7XG4gICAgICAgICAgICBpZiAocmVzcC5pdGVtcykge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSByZXNwLml0ZW1zLm1hcCh0aGlzLm1ha2VBY2xPYmplY3RfKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSB0aGlzLm1ha2VBY2xPYmplY3RfKHJlc3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cywgcmVzcCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7YXJyYXl9IFVwZGF0ZUFjbFJlc3BvbnNlXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IDAgVGhlIHVwZGF0ZWQgQWNsIE9iamVjdHMuXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IDEgVGhlIGZ1bGwgQVBJIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBjYWxsYmFjayBVcGRhdGVBY2xDYWxsYmFja1xuICAgICAqIEBwYXJhbSB7P0Vycm9yfSBlcnIgUmVxdWVzdCBlcnJvciwgaWYgYW55LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBhY2wgVGhlIHVwZGF0ZWQgQWNsIE9iamVjdHMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGFwaVJlc3BvbnNlIFRoZSBmdWxsIEFQSSByZXNwb25zZS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYWNjZXNzIGNvbnRyb2xzIG9uIGEge0BsaW5rIEJ1Y2tldH0gb3Ige0BsaW5rIEZpbGV9LlxuICAgICAqXG4gICAgICogU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vc3RvcmFnZS9kb2NzL2pzb25fYXBpL3YxL2J1Y2tldEFjY2Vzc0NvbnRyb2xzL3VwZGF0ZXwgQnVja2V0QWNjZXNzQ29udHJvbHM6IHVwZGF0ZSBBUEkgRG9jdW1lbnRhdGlvbn1cbiAgICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvanNvbl9hcGkvdjEvb2JqZWN0QWNjZXNzQ29udHJvbHMvdXBkYXRlfCBPYmplY3RBY2Nlc3NDb250cm9sczogdXBkYXRlIEFQSSBEb2N1bWVudGF0aW9ufVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmVudGl0eSBXaG9zZSBwZXJtaXNzaW9ucyB3aWxsIGJlIHVwZGF0ZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMucm9sZSBQZXJtaXNzaW9ucyBhbGxvd2VkIGZvciB0aGUgZGVmaW5lZCBlbnRpdHkuXG4gICAgICogICAgIFNlZSB7QGxpbmsgU3RvcmFnZS5hY2x9LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5nZW5lcmF0aW9uXSAqKkZpbGUgT2JqZWN0cyBPbmx5KiogU2VsZWN0IGEgc3BlY2lmaWNcbiAgICAgKiAgICAgcmV2aXNpb24gb2YgdGhpcyBmaWxlIChhcyBvcHBvc2VkIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiwgdGhlIGRlZmF1bHQpLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy51c2VyUHJvamVjdF0gVGhlIElEIG9mIHRoZSBwcm9qZWN0IHdoaWNoIHdpbGwgYmVcbiAgICAgKiAgICAgYmlsbGVkIGZvciB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0ge1VwZGF0ZUFjbENhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFVwZGF0ZUFjbFJlc3BvbnNlPn1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpKCk7XG4gICAgICogY29uc3QgbXlCdWNrZXQgPSBzdG9yYWdlLmJ1Y2tldCgnbXktYnVja2V0Jyk7XG4gICAgICogY29uc3QgbXlGaWxlID0gbXlCdWNrZXQuZmlsZSgnbXktZmlsZScpO1xuICAgICAqXG4gICAgICogY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgKiAgIGVudGl0eTogJ3VzZXItdXNlcmVtYWlsQGV4YW1wbGUuY29tJyxcbiAgICAgKiAgIHJvbGU6IGdjcy5hY2wuV1JJVEVSX1JPTEVcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogbXlCdWNrZXQuYWNsLnVwZGF0ZShvcHRpb25zLCBmdW5jdGlvbihlcnIsIGFjbE9iamVjdCwgYXBpUmVzcG9uc2UpIHt9KTtcbiAgICAgKlxuICAgICAqIC8vLVxuICAgICAqIC8vIEZvciBmaWxlIEFDTCBvcGVyYXRpb25zLCB5b3UgY2FuIGFsc28gc3BlY2lmeSBhIGBnZW5lcmF0aW9uYCBwcm9wZXJ0eS5cbiAgICAgKiAvLy1cbiAgICAgKiBteUZpbGUuYWNsLnVwZGF0ZSh7XG4gICAgICogICBlbnRpdHk6ICd1c2VyLXVzZXJlbWFpbEBleGFtcGxlLmNvbScsXG4gICAgICogICByb2xlOiBnY3MuYWNsLldSSVRFUl9ST0xFLFxuICAgICAqICAgZ2VuZXJhdGlvbjogMVxuICAgICAqIH0sIGZ1bmN0aW9uKGVyciwgYWNsT2JqZWN0LCBhcGlSZXNwb25zZSkge30pO1xuICAgICAqXG4gICAgICogLy8tXG4gICAgICogLy8gSWYgdGhlIGNhbGxiYWNrIGlzIG9taXR0ZWQsIHdlJ2xsIHJldHVybiBhIFByb21pc2UuXG4gICAgICogLy8tXG4gICAgICogbXlGaWxlLmFjbC51cGRhdGUob3B0aW9ucykudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICogICBjb25zdCBhY2xPYmplY3QgPSBkYXRhWzBdO1xuICAgICAqICAgY29uc3QgYXBpUmVzcG9uc2UgPSBkYXRhWzFdO1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHVwZGF0ZShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBxdWVyeSA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5nZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICBxdWVyeS5nZW5lcmF0aW9uID0gb3B0aW9ucy5nZW5lcmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnVzZXJQcm9qZWN0KSB7XG4gICAgICAgICAgICBxdWVyeS51c2VyUHJvamVjdCA9IG9wdGlvbnMudXNlclByb2plY3Q7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICB1cmk6ICcvJyArIGVuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLmVudGl0eSksXG4gICAgICAgICAgICBxczogcXVlcnksXG4gICAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICAgICAgcm9sZTogb3B0aW9ucy5yb2xlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsLCByZXNwKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCB0aGlzLm1ha2VBY2xPYmplY3RfKHJlc3ApLCByZXNwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBBUEkgcmVzcG9uc2VzIHRvIGEgY29uc2lzdGVudCBvYmplY3QgZm9ybWF0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBtYWtlQWNsT2JqZWN0XyhhY2Nlc3NDb250cm9sT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgIGVudGl0eTogYWNjZXNzQ29udHJvbE9iamVjdC5lbnRpdHksXG4gICAgICAgICAgICByb2xlOiBhY2Nlc3NDb250cm9sT2JqZWN0LnJvbGUsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChhY2Nlc3NDb250cm9sT2JqZWN0LnByb2plY3RUZWFtKSB7XG4gICAgICAgICAgICBvYmoucHJvamVjdFRlYW0gPSBhY2Nlc3NDb250cm9sT2JqZWN0LnByb2plY3RUZWFtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhdGNoIHJlcXVlc3RzIHVwIHRvIHRoZSBidWNrZXQncyByZXF1ZXN0IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIEFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBSZXF1ZXN0IHBhdGguXG4gICAgICogQHBhcmFtIHsqfSBxdWVyeSBSZXF1ZXN0IHF1ZXJ5IG9iamVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGJvZHkgUmVxdWVzdCBib2R5IGNvbnRlbnRzLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHJlcXVlc3QocmVxT3B0cywgY2FsbGJhY2spIHtcbiAgICAgICAgcmVxT3B0cy51cmkgPSB0aGlzLnBhdGhQcmVmaXggKyByZXFPcHRzLnVyaTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0XyhyZXFPcHRzLCBjYWxsYmFjayk7XG4gICAgfVxufVxuLyohIERldmVsb3BlciBEb2N1bWVudGF0aW9uXG4gKlxuICogQWxsIGFzeW5jIG1ldGhvZHMgKGV4Y2VwdCBmb3Igc3RyZWFtcykgd2lsbCByZXR1cm4gYSBQcm9taXNlIGluIHRoZSBldmVudFxuICogdGhhdCBhIGNhbGxiYWNrIGlzIG9taXR0ZWQuXG4gKi9cbnByb21pc2lmeUFsbChBY2wsIHtcbiAgICBleGNsdWRlOiBbJ3JlcXVlc3QnXSxcbn0pO1xuZXhwb3J0IHsgQWNsLCBBY2xSb2xlQWNjZXNzb3JNZXRob2RzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/acl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/bucket.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvailableServiceObjectMethods: () => (/* binding */ AvailableServiceObjectMethods),\n/* harmony export */   Bucket: () => (/* binding */ Bucket),\n/* harmony export */   BucketActionToHTTPMethod: () => (/* binding */ BucketActionToHTTPMethod),\n/* harmony export */   BucketExceptionMessages: () => (/* binding */ BucketExceptionMessages)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/paginator */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var mime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mime */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! p-limit */ \"(rsc)/./node_modules/p-limit/index.js\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _acl_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./acl.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/acl.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n/* harmony import */ var _iam_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./iam.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/iam.js\");\n/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./notification.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/notification.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _signer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./signer.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/signer.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! url */ \"url\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar BucketActionToHTTPMethod;\n(function (BucketActionToHTTPMethod) {\n    BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod || (BucketActionToHTTPMethod = {}));\nvar AvailableServiceObjectMethods;\n(function (AvailableServiceObjectMethods) {\n    AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"setMetadata\"] = 0] = \"setMetadata\";\n    AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"delete\"] = 1] = \"delete\";\n})(AvailableServiceObjectMethods || (AvailableServiceObjectMethods = {}));\nvar BucketExceptionMessages;\n(function (BucketExceptionMessages) {\n    BucketExceptionMessages[\"PROVIDE_SOURCE_FILE\"] = \"You must provide at least one source file.\";\n    BucketExceptionMessages[\"DESTINATION_FILE_NOT_SPECIFIED\"] = \"A destination file must be specified.\";\n    BucketExceptionMessages[\"CHANNEL_ID_REQUIRED\"] = \"An ID is required to create a channel.\";\n    BucketExceptionMessages[\"TOPIC_NAME_REQUIRED\"] = \"A valid topic name is required.\";\n    BucketExceptionMessages[\"CONFIGURATION_OBJECT_PREFIX_REQUIRED\"] = \"A configuration object with a prefix is required.\";\n    BucketExceptionMessages[\"SPECIFY_FILE_NAME\"] = \"A file name must be specified.\";\n    BucketExceptionMessages[\"METAGENERATION_NOT_PROVIDED\"] = \"A metageneration must be provided.\";\n    BucketExceptionMessages[\"SUPPLY_NOTIFICATION_ID\"] = \"You must supply a notification ID.\";\n})(BucketExceptionMessages || (BucketExceptionMessages = {}));\n/**\n * @callback Crc32cGeneratorToStringCallback\n * A method returning the CRC32C as a base64-encoded string.\n *\n * @returns {string}\n *\n * @example\n * Hashing the string 'data' should return 'rth90Q=='\n *\n * ```js\n * const buffer = Buffer.from('data');\n * crc32c.update(buffer);\n * crc32c.toString(); // 'rth90Q=='\n * ```\n **/\n/**\n * @callback Crc32cGeneratorValidateCallback\n * A method validating a base64-encoded CRC32C string.\n *\n * @param {string} [value] base64-encoded CRC32C string to validate\n * @returns {boolean}\n *\n * @example\n * Should return `true` if the value matches, `false` otherwise\n *\n * ```js\n * const buffer = Buffer.from('data');\n * crc32c.update(buffer);\n * crc32c.validate('DkjKuA=='); // false\n * crc32c.validate('rth90Q=='); // true\n * ```\n **/\n/**\n * @callback Crc32cGeneratorUpdateCallback\n * A method for passing `Buffer`s for CRC32C generation.\n *\n * @param {Buffer} [data] data to update CRC32C value with\n * @returns {undefined}\n *\n * @example\n * Hashing buffers from 'some ' and 'text\\n'\n *\n * ```js\n * const buffer1 = Buffer.from('some ');\n * crc32c.update(buffer1);\n *\n * const buffer2 = Buffer.from('text\\n');\n * crc32c.update(buffer2);\n *\n * crc32c.toString(); // 'DkjKuA=='\n * ```\n **/\n/**\n * @typedef {object} CRC32CValidator\n * @property {Crc32cGeneratorToStringCallback}\n * @property {Crc32cGeneratorValidateCallback}\n * @property {Crc32cGeneratorUpdateCallback}\n */\n/**\n * A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\n *\n * @name Bucket#crc32cGenerator\n * @type {CRC32CValidator}\n */\n/**\n * Get and set IAM policies for your bucket.\n *\n * @name Bucket#iam\n * @mixes Iam\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * //-\n * // Get the IAM policy for your bucket.\n * //-\n * bucket.iam.getPolicy(function(err, policy) {\n *   console.log(policy);\n * });\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.getPolicy().then(function(data) {\n *   const policy = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_view_bucket_iam_members\n * Example of retrieving a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_add_bucket_iam_member\n * Example of adding to a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_remove_bucket_iam_member\n * Example of removing from a bucket's IAM policy:\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against\n * an object or bucket (for example, `READ` or `WRITE`); the entity defines\n * who the permission applies to (for example, a specific user or group of\n * users).\n *\n * The `acl` object on a Bucket instance provides methods to get you a list of\n * the ACLs defined on your bucket, as well as set, update, and delete them.\n *\n * Buckets also have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. Default ACLs specify permissions that all new\n * objects added to the bucket will inherit by default. You can add, delete,\n * get, and update entities and permissions for these as well with\n * {@link Bucket#acl.default}.\n *\n * See {@link http://goo.gl/6qBBPO| About Access Control Lists}\n * See {@link https://cloud.google.com/storage/docs/access-control/lists#default| Default ACLs}\n *\n * @name Bucket#acl\n * @mixes Acl\n * @property {Acl} default Cloud Storage Buckets have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. You can add, delete, get, and update entities and\n * permissions for these as well. The method signatures and examples are all\n * the same, after only prefixing the method call with `default`.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n *\n * //-\n * // Make a bucket's contents publicly readable.\n * //-\n * const myBucket = storage.bucket('my-bucket');\n *\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * myBucket.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myBucket.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl\n * Example of printing a bucket's ACL:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl_for_user\n * Example of printing a bucket's ACL for a specific user:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_owner\n * Example of adding an owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_owner\n * Example of removing an owner from a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_default_owner\n * Example of adding a default owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_default_owner\n * Example of removing a default owner from a bucket:\n */\n/**\n * The API-formatted resource description of the bucket.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Bucket#metadata\n * @type {object}\n */\n/**\n * The bucket's name.\n * @name Bucket#name\n * @type {string}\n */\n/**\n * Get {@link File} objects for the files currently in the bucket as a\n * readable object stream.\n *\n * @method Bucket#getFilesStream\n * @param {GetFilesOptions} [query] Query object for listing files.\n * @returns {ReadableStream} A readable stream that emits {@link File} instances.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * bucket.getFilesStream()\n *   .on('error', console.error)\n *   .on('data', function(file) {\n *     // file is a File object.\n *   })\n *   .on('end', function() {\n *     // All files retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * bucket.getFilesStream()\n *   .on('data', function(file) {\n *     this.end();\n *   });\n *\n * //-\n * // If you're filtering files with a delimiter, you should use\n * // {@link Bucket#getFiles} and set `autoPaginate: false` in order to\n * // preserve the `apiResponse` argument.\n * //-\n * const prefixes = [];\n *\n * function callback(err, files, nextQuery, apiResponse) {\n *   prefixes = prefixes.concat(apiResponse.prefixes);\n *\n *   if (nextQuery) {\n *     bucket.getFiles(nextQuery, callback);\n *   } else {\n *     // prefixes = The finished array of prefixes.\n *   }\n * }\n *\n * bucket.getFiles({\n *   autoPaginate: false,\n *   delimiter: '/'\n * }, callback);\n * ```\n */\n/**\n * Create a Bucket object to interact with a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Storage} storage A {@link Storage} instance.\n * @param {string} name The name of the bucket.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] User project.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n * ```\n */\nclass Bucket extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getFilesStream(query) {\n        // placeholder body, overwritten in constructor\n        return new stream__WEBPACK_IMPORTED_MODULE_16__.Readable();\n    }\n    constructor(storage, name, options) {\n        var _a, _b, _c, _d;\n        options = options || {};\n        // Allow for \"gs://\"-style input, and strip any trailing slashes.\n        name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n        const requestQueryObject = {};\n        if ((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n            requestQueryObject.ifGenerationMatch =\n                options.preconditionOpts.ifGenerationMatch;\n        }\n        if ((_b = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n            requestQueryObject.ifGenerationNotMatch =\n                options.preconditionOpts.ifGenerationNotMatch;\n        }\n        if ((_c = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n            requestQueryObject.ifMetagenerationMatch =\n                options.preconditionOpts.ifMetagenerationMatch;\n        }\n        if ((_d = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n            requestQueryObject.ifMetagenerationNotMatch =\n                options.preconditionOpts.ifMetagenerationNotMatch;\n        }\n        const userProject = options.userProject;\n        if (typeof userProject === 'string') {\n            requestQueryObject.userProject = userProject;\n        }\n        const methods = {\n            /**\n             * Create a bucket.\n             *\n             * @method Bucket#create\n             * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n             * @param {CreateBucketCallback} [callback] Callback function.\n             * @returns {Promise<CreateBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.create(function(err, bucket, apiResponse) {\n             *   if (!err) {\n             *     // The bucket was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.create().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * IamDeleteBucketOptions Configuration options.\n             * @property {boolean} [ignoreNotFound = false] Ignore an error if\n             *     the bucket does not exist.\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} DeleteBucketResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Delete the bucket.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete| Buckets: delete API Documentation}\n             *\n             * @method Bucket#delete\n             * @param {DeleteBucketOptions} [options] Configuration options.\n             * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\n             *     the bucket does not exist.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteBucketCallback} [callback] Callback function.\n             * @returns {Promise<DeleteBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/buckets.js</caption>\n             * region_tag:storage_delete_bucket\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} BucketExistsResponse\n             * @property {boolean} 0 Whether the {@link Bucket} exists.\n             */\n            /**\n             * @callback BucketExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the {@link Bucket} exists.\n             */\n            /**\n             * Check if the bucket exists.\n             *\n             * @method Bucket#exists\n             * @param {BucketExistsOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {BucketExistsCallback} [callback] Callback function.\n             * @returns {Promise<BucketExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\n             * @property {boolean} [autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} GetBucketResponse\n             * @property {Bucket} 0 The {@link Bucket}.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Bucket} bucket The {@link Bucket}.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get a bucket if it exists.\n             *\n             * You may optionally use this to \"get or create\" an object by providing\n             * an object with `autoCreate` set to `true`. Any extra configuration that\n             * is normally required for the `create` method must be contained within\n             * this object as well.\n             *\n             * @method Bucket#get\n             * @param {GetBucketOptions} [options] Configuration options.\n             * @param {boolean} [options.autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetBucketCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.get(function(err, bucket, apiResponse) {\n             *   // `bucket.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.get().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetBucketMetadataResponse\n             * @property {object} 0 The bucket metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * Get the bucket's metadata.\n             *\n             * To set metadata, see {@link Bucket#setMetadata}.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get| Buckets: get API Documentation}\n             *\n             * @method Bucket#getMetadata\n             * @param {GetBucketMetadataOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/requesterPays.js</caption>\n             * region_tag:storage_get_requester_pays_status\n             * Example of retrieving the requester pays status of a bucket:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} SetBucketMetadataResponse\n             * @property {object} apiResponse The full API response.\n             */\n            /**\n             * @callback SetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             */\n            /**\n             * Set the bucket's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n             *\n             * @method Bucket#setMetadata\n             * @param {object<string, *>} metadata The metadata you wish to set.\n             * @param {SetBucketMetadataOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {SetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<SetBucketMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * //-\n             * // Set website metadata field on the bucket.\n             * //-\n             * const metadata = {\n             *   website: {\n             *     mainPageSuffix: 'http://example.com',\n             *     notFoundPage: 'http://example.com/404.html'\n             *   }\n             * };\n             *\n             * bucket.setMetadata(metadata, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable versioning for your bucket.\n             * //-\n             * bucket.setMetadata({\n             *   versioning: {\n             *     enabled: true\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable KMS encryption for objects within this bucket.\n             * //-\n             * bucket.setMetadata({\n             *   encryption: {\n             *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Set the default event-based hold value for new objects in this\n             * // bucket.\n             * //-\n             * bucket.setMetadata({\n             *   defaultEventBasedHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Remove object lifecycle rules.\n             * //-\n             * bucket.setMetadata({\n             *   lifecycle: null\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.setMetadata(metadata).then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n        };\n        super({\n            parent: storage,\n            baseUrl: '/b',\n            id: name,\n            createMethod: storage.createBucket.bind(storage),\n            methods,\n        });\n        this.name = name;\n        this.storage = storage;\n        this.userProject = options.userProject;\n        this.acl = new _acl_js__WEBPACK_IMPORTED_MODULE_10__.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/acl',\n        });\n        this.acl.default = new _acl_js__WEBPACK_IMPORTED_MODULE_10__.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/defaultObjectAcl',\n        });\n        this.crc32cGenerator =\n            options.crc32cGenerator || this.storage.crc32cGenerator;\n        this.iam = new _iam_js__WEBPACK_IMPORTED_MODULE_12__.Iam(this);\n        this.getFilesStream = _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.streamify('getFiles');\n        this.instanceRetryValue = storage.retryOptions.autoRetry;\n        this.instancePreconditionOpts = options === null || options === void 0 ? void 0 : options.preconditionOpts;\n    }\n    /**\n     * The bucket's Cloud Storage URI (`gs://`)\n     *\n     * @example\n     * ```ts\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * // `gs://my-bucket`\n     * const href = bucket.cloudStorageURI.href;\n     * ```\n     */\n    get cloudStorageURI() {\n        const uri = new url__WEBPACK_IMPORTED_MODULE_17__.URL('gs://');\n        uri.host = this.name;\n        return uri;\n    }\n    /**\n     * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\n     * @property {boolean} [append=true] The new rules will be appended to any\n     *     pre-existing rules.\n     */\n    /**\n     *\n     * @typedef {object} LifecycleRule The new lifecycle rule to be added to objects\n     *     in this bucket.\n     * @property {string|object} action The action to be taken upon matching of\n     *     all the conditions 'delete', 'setStorageClass', or 'AbortIncompleteMultipartUpload'.\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n     * @property {object} condition Condition a bucket must meet before the\n     *     action occurs on the bucket. Refer to following supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n     * @property {string} [storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to. Please see\n     *     [SetStorageClass option documentation]{@link https://cloud.google.com/storage/docs/lifecycle#setstorageclass} for supported transitions.\n     */\n    /**\n     * Add an object lifecycle management rule to the bucket.\n     *\n     * By default, an Object Lifecycle Management rule provided to this method\n     * will be included to the existing policy. To replace all existing rules,\n     * supply the `options` argument, setting `append` to `false`.\n     *\n     * To add multiple rules, pass a list to the `rule` parameter. Calling this\n     * function multiple times asynchronously does not guarantee that all rules\n     * are added correctly.\n     *\n     * See {@link https://cloud.google.com/storage/docs/lifecycle| Object Lifecycle Management}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {LifecycleRule|LifecycleRule[]} rule The new lifecycle rule or rules to be added to objects\n     *     in this bucket.\n     * @param {string|object} rule.action The action to be taken upon matching of\n     *     all the conditions 'delete', 'setStorageClass', or 'AbortIncompleteMultipartUpload'.\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n     * @param {object} rule.condition Condition a bucket must meet before the\n     *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n     * @param {string} [rule.storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to.\n     * @param {AddLifecycleRuleOptions} [options] Configuration object.\n     * @param {boolean} [options.append=true] Append the new rule to the existing\n     *     policy.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Automatically have an object deleted from this bucket once it is 3 years\n     * // of age.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   const lifecycleRules = bucket.metadata.lifecycle.rule;\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // By default, the rule you provide will be added to the existing policy.\n     * // Optionally, you can disable this behavior to replace all of the\n     * // pre-existing rules.\n     * //-\n     * const options = {\n     *   append: false\n     * };\n     *\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, options, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // All rules have been replaced with the new \"delete\" rule.\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // For objects created before 2018, \"downgrade\" the storage class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'setStorageClass',\n     *   storageClass: 'COLDLINE',\n     *   condition: {\n     *     createdBefore: new Date('2018')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete objects created before 2016 which have the Coldline storage\n     * // class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     matchesStorageClass: [\n     *       'COLDLINE'\n     *     ],\n     *     createdBefore: new Date('2016')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a noncurrent timestamp that is at least 100 days.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     daysSinceNoncurrentTime: 100\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a noncurrent timestamp before 2020-01-01.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     noncurrentTimeBefore: new Date('2020-01-01')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a customTime that is at least 100 days.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     daysSinceCustomTime: 100\n     *   }\n     * }, function(err, apiResponse) ());\n     *\n     * //-\n     * // Delete object that has a customTime before 2020-01-01.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     customTimeBefore: new Date('2020-01-01')\n     *   }\n     * }, function(err, apiResponse) {});\n     * ```\n     */\n    addLifecycleRule(rule, optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        const rules = Array.isArray(rule) ? rule : [rule];\n        for (const curRule of rules) {\n            if (curRule.condition.createdBefore instanceof Date) {\n                curRule.condition.createdBefore = curRule.condition.createdBefore\n                    .toISOString()\n                    .replace(/T.+$/, '');\n            }\n            if (curRule.condition.customTimeBefore instanceof Date) {\n                curRule.condition.customTimeBefore = curRule.condition.customTimeBefore\n                    .toISOString()\n                    .replace(/T.+$/, '');\n            }\n            if (curRule.condition.noncurrentTimeBefore instanceof Date) {\n                curRule.condition.noncurrentTimeBefore =\n                    curRule.condition.noncurrentTimeBefore\n                        .toISOString()\n                        .replace(/T.+$/, '');\n            }\n        }\n        if (options.append === false) {\n            this.setMetadata({ lifecycle: { rule: rules } }, options, callback);\n            return;\n        }\n        // The default behavior appends the previously-defined lifecycle rules with\n        // the new ones just passed in by the user.\n        this.getMetadata((err, metadata) => {\n            var _a, _b;\n            if (err) {\n                callback(err);\n                return;\n            }\n            const currentLifecycleRules = Array.isArray((_a = metadata.lifecycle) === null || _a === void 0 ? void 0 : _a.rule)\n                ? (_b = metadata.lifecycle) === null || _b === void 0 ? void 0 : _b.rule\n                : [];\n            this.setMetadata({\n                lifecycle: { rule: currentLifecycleRules.concat(rules) },\n            }, options, callback);\n        });\n    }\n    /**\n     * @typedef {object} CombineOptions\n     * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CombineCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} newFile The new {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CombineResponse\n     * @property {File} 0 The new {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Combine multiple files into one new file.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose| Objects: compose API Documentation}\n     *\n     * @throws {Error} if a non-array is provided as sources argument.\n     * @throws {Error} if no sources are provided.\n     * @throws {Error} if no destination is provided.\n     *\n     * @param {string[]|File[]} sources The source files that will be\n     *     combined.\n     * @param {string|File} destination The file you would like the\n     *     source files combined into.\n     * @param {CombineOptions} [options] Configuration options.\n     * @param {string} [options.kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n  \n     * @param {CombineCallback} [callback] Callback function.\n     * @returns {Promise<CombineResponse>}\n     *\n     * @example\n     * ```\n     * const logBucket = storage.bucket('log-bucket');\n     *\n     * const sources = [\n     *   logBucket.file('2013-logs.txt'),\n     *   logBucket.file('2014-logs.txt')\n     * ];\n     *\n     * const allLogs = logBucket.file('all-logs.txt');\n     *\n     * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\n     *   // newFile === allLogs\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * logBucket.combine(sources, allLogs).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    combine(sources, destination, optionsOrCallback, callback) {\n        var _a;\n        if (!Array.isArray(sources) || sources.length === 0) {\n            throw new Error(BucketExceptionMessages.PROVIDE_SOURCE_FILE);\n        }\n        if (!destination) {\n            throw new Error(BucketExceptionMessages.DESTINATION_FILE_NOT_SPECIFIED);\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, // Not relevant but param is required\n        AvailableServiceObjectMethods.setMetadata, // Same as above\n        options);\n        const convertToFile = (file) => {\n            if (file instanceof _file_js__WEBPACK_IMPORTED_MODULE_11__.File) {\n                return file;\n            }\n            return this.file(file);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        sources = sources.map(convertToFile);\n        const destinationFile = convertToFile(destination);\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        if (!destinationFile.metadata.contentType) {\n            const destinationContentType = mime__WEBPACK_IMPORTED_MODULE_4__.getType(destinationFile.name) || undefined;\n            if (destinationContentType) {\n                destinationFile.metadata.contentType = destinationContentType;\n            }\n        }\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if ((((_a = destinationFile === null || destinationFile === void 0 ? void 0 : destinationFile.instancePreconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) ===\n            undefined &&\n            options.ifGenerationMatch === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryNever) {\n            maxRetries = 0;\n        }\n        if (options.ifGenerationMatch === undefined) {\n            Object.assign(options, destinationFile.instancePreconditionOpts, options);\n        }\n        // Make the request from the destination File object.\n        destinationFile.request({\n            method: 'POST',\n            uri: '/compose',\n            maxRetries,\n            json: {\n                destination: {\n                    contentType: destinationFile.metadata.contentType,\n                    contentEncoding: destinationFile.metadata.contentEncoding,\n                },\n                sourceObjects: sources.map(source => {\n                    const sourceObject = {\n                        name: source.name,\n                    };\n                    if (source.metadata && source.metadata.generation) {\n                        sourceObject.generation = parseInt(source.metadata.generation.toString());\n                    }\n                    return sourceObject;\n                }),\n            },\n            qs: options,\n        }, (err, resp) => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, destinationFile, resp);\n        });\n    }\n    /**\n     * See a {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll request body}.\n     *\n     * @typedef {object} CreateChannelConfig\n     * @property {string} address The address where notifications are\n     *     delivered for this channel.\n     * @property {string} [delimiter] Returns results in a directory-like mode.\n     * @property {number} [maxResults] Maximum number of `items` plus `prefixes`\n     *     to return in a single page of responses.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {string} [projection=noAcl] Set of properties to return.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions=false] If `true`, lists all versions of an object\n     *     as distinct results.\n     */\n    /**\n     * @typedef {object} CreateChannelOptions\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} CreateChannelResponse\n     * @property {Channel} 0 The new {@link Channel}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateChannelCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Channel} channel The new {@link Channel}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Create a channel that will be notified when objects in this bucket changes.\n     *\n     * @throws {Error} If an ID is not provided.\n     * @throws {Error} If an address is not provided.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll API Documentation}\n     *\n     * @param {string} id The ID of the channel to create.\n     * @param {CreateChannelConfig} config Configuration for creating channel.\n     * @param {string} config.address The address where notifications are\n     *     delivered for this channel.\n     * @param {string} [config.delimiter] Returns results in a directory-like mode.\n     * @param {number} [config.maxResults] Maximum number of `items` plus `prefixes`\n     *     to return in a single page of responses.\n     * @param {string} [config.pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @param {string} [config.prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @param {string} [config.projection=noAcl] Set of properties to return.\n     * @param {string} [config.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {boolean} [config.versions=false] If `true`, lists all versions of an object\n     *     as distinct results.\n     * @param {CreateChannelOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {CreateChannelCallback} [callback] Callback function.\n     * @returns {Promise<CreateChannelResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const id = 'new-channel-id';\n     *\n     * const config = {\n     *   address: 'https://...'\n     * };\n     *\n     * bucket.createChannel(id, config, function(err, channel, apiResponse) {\n     *   if (!err) {\n     *     // Channel created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.createChannel(id, config).then(function(data) {\n     *   const channel = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    createChannel(id, config, optionsOrCallback, callback) {\n        if (typeof id !== 'string') {\n            throw new Error(BucketExceptionMessages.CHANNEL_ID_REQUIRED);\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/o/watch',\n            json: Object.assign({\n                id,\n                type: 'web_hook',\n            }, config),\n            qs: options,\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const resourceId = apiResponse.resourceId;\n            const channel = this.storage.channel(id, resourceId);\n            channel.metadata = apiResponse;\n            callback(null, channel, apiResponse);\n        });\n    }\n    /**\n     * Metadata to set for the Notification.\n     *\n     * @typedef {object} CreateNotificationOptions\n     * @property {object} [customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @property {string[]} [eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @property {string} [objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @property {string} [payloadFormat] The desired content of the Payload.\n     * Defaults to `JSON_API_V1`.\n     *\n     * Acceptable values are:\n     * - `JSON_API_V1`\n     *\n     * - `NONE`\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CreateNotificationCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification} notification The new {@link Notification}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CreateNotificationResponse\n     * @property {Notification} 0 The new {@link Notification}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Creates a notification subscription for the bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n     *\n     * @param {Topic|string} topic The Cloud PubSub topic to which this\n     * subscription publishes. If the project ID is omitted, the current\n     * project ID will be used.\n     *\n     * Acceptable formats are:\n     * - `projects/grape-spaceship-123/topics/my-topic`\n     *\n     * - `my-topic`\n     * @param {CreateNotificationOptions} [options] Metadata to set for the\n     *     notification.\n     * @param {object} [options.customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @param {string[]} [options.eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @param {string} [options.objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @param {string} [options.payloadFormat] The desired content of the Payload.\n     * Defaults to `JSON_API_V1`.\n     *\n     * Acceptable values are:\n     * - `JSON_API_V1`\n     *\n     * - `NONE`\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {CreateNotificationCallback} [callback] Callback function.\n     * @returns {Promise<CreateNotificationResponse>}\n     * @throws {Error} If a valid topic is not provided.\n     * @see Notification#create\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const callback = function(err, notification, apiResponse) {\n     *   if (!err) {\n     *     // The notification was created successfully.\n     *   }\n     * };\n     *\n     * myBucket.createNotification('my-topic', callback);\n     *\n     * //-\n     * // Configure the nofiication by providing Notification metadata.\n     * //-\n     * const metadata = {\n     *   objectNamePrefix: 'prefix-'\n     * };\n     *\n     * myBucket.createNotification('my-topic', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.createNotification('my-topic').then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/createNotification.js</caption>\n     * region_tag:storage_create_bucket_notifications\n     * Another example:\n     */\n    createNotification(topic, optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const topicIsObject = topic !== null && typeof topic === 'object';\n        if (topicIsObject && _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.isCustomType(topic, 'pubsub/topic')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            topic = topic.name;\n        }\n        if (typeof topic !== 'string') {\n            throw new Error(BucketExceptionMessages.TOPIC_NAME_REQUIRED);\n        }\n        const body = Object.assign({ topic }, options);\n        if (body.topic.indexOf('projects') !== 0) {\n            body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n        }\n        body.topic = `//pubsub.${this.storage.universeDomain}/` + body.topic;\n        if (!body.payloadFormat) {\n            body.payloadFormat = 'JSON_API_V1';\n        }\n        const query = {};\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/notificationConfigs',\n            json: (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.convertObjKeysToSnakeCase)(body),\n            qs: query,\n            maxRetries: 0, //explicitly set this value since this is a non-idempotent function\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const notification = this.notification(apiResponse.id);\n            notification.metadata = apiResponse;\n            callback(null, notification, apiResponse);\n        });\n    }\n    /**\n     * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\n     *     for all of the supported properties.\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     */\n    /**\n     * @callback DeleteFilesCallback\n     * @param {?Error|?Error[]} err Request error, if any, or array of errors from\n     *     files that were not able to be deleted.\n     * @param {object} [apiResponse] The full API response.\n     */\n    /**\n     * Iterate over the bucket's files, calling `file.delete()` on each.\n     *\n     * <strong>This is not an atomic request.</strong> A delete attempt will be\n     * made for each file individually. Any one can fail, in which case only a\n     * portion of the files you intended to be deleted would have.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors until all files have had a chance\n     * to be processed.\n     *\n     * File preconditions cannot be passed to this function. It will not retry unless\n     * the idempotency strategy is set to retry always.\n     *\n     * The `query` object passed as the first argument will also be passed to\n     * {@link Bucket#getFiles}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete| Objects: delete API Documentation}\n     *\n     * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\n     * @param {boolean} [query.force] Suppress errors until all files have been\n     *     processed.\n     * @param {DeleteFilesCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the files in the bucket.\n     * //-\n     * bucket.deleteFiles(function(err) {});\n     *\n     * //-\n     * // By default, if a file cannot be deleted, this method will stop deleting\n     * // files from your bucket. You can override this setting with `force:\n     * // true`.\n     * //-\n     * bucket.deleteFiles({\n     *   force: true\n     * }, function(errors) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     * });\n     *\n     * //-\n     * // The first argument to this method acts as a query to\n     * // {@link Bucket#getFiles}. As an example, you can delete files\n     * // which match a prefix.\n     * //-\n     * bucket.deleteFiles({\n     *   prefix: 'images/'\n     * }, function(err) {\n     *   if (!err) {\n     *     // All files in the `images` directory have been deleted.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteFiles().then(function() {});\n     * ```\n     */\n    deleteFiles(queryOrCallback, callback) {\n        let query = {};\n        if (typeof queryOrCallback === 'function') {\n            callback = queryOrCallback;\n        }\n        else if (queryOrCallback) {\n            query = queryOrCallback;\n        }\n        const MAX_PARALLEL_LIMIT = 10;\n        const MAX_QUEUE_SIZE = 1000;\n        const errors = [];\n        const deleteFile = (file) => {\n            return file.delete(query).catch(err => {\n                if (!query.force) {\n                    throw err;\n                }\n                errors.push(err);\n            });\n        };\n        (async () => {\n            try {\n                let promises = [];\n                const limit = p_limit__WEBPACK_IMPORTED_MODULE_6__(MAX_PARALLEL_LIMIT);\n                const filesStream = this.getFilesStream(query);\n                for await (const curFile of filesStream) {\n                    if (promises.length >= MAX_QUEUE_SIZE) {\n                        await Promise.all(promises);\n                        promises = [];\n                    }\n                    promises.push(limit(() => deleteFile(curFile)).catch(e => {\n                        filesStream.destroy();\n                        throw e;\n                    }));\n                }\n                await Promise.all(promises);\n                callback(errors.length > 0 ? errors : null);\n            }\n            catch (e) {\n                callback(e);\n                return;\n            }\n        })();\n    }\n    /**\n     * @deprecated\n     * @typedef {array} DeleteLabelsResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @deprecated\n     * @callback DeleteLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata Bucket's metadata.\n     */\n    /**\n     * @deprecated Use setMetadata directly\n     * Delete one or more labels from this bucket.\n     *\n     * @param {string|string[]} [labels] The labels to delete. If no labels are\n     *     provided, all of the labels are removed.\n     * @param {DeleteLabelsCallback} [callback] Callback function.\n     * @param {DeleteLabelsOptions} [options] Options, including precondition options\n     * @returns {Promise<DeleteLabelsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the labels from this bucket.\n     * //-\n     * bucket.deleteLabels(function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a single label.\n     * //-\n     * bucket.deleteLabels('labelone', function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a specific set of labels.\n     * //-\n     * bucket.deleteLabels([\n     *   'labelone',\n     *   'labeltwo'\n     * ], function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteLabels().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    deleteLabels(labelsOrCallbackOrOptions, optionsOrCallback, callback) {\n        let labels = new Array();\n        let options = {};\n        if (typeof labelsOrCallbackOrOptions === 'function') {\n            callback = labelsOrCallbackOrOptions;\n        }\n        else if (typeof labelsOrCallbackOrOptions === 'string') {\n            labels = [labelsOrCallbackOrOptions];\n        }\n        else if (Array.isArray(labelsOrCallbackOrOptions)) {\n            labels = labelsOrCallbackOrOptions;\n        }\n        else if (labelsOrCallbackOrOptions) {\n            options = labelsOrCallbackOrOptions;\n        }\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const deleteLabels = (labels) => {\n            const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\n                nullLabelMap[labelKey] = null;\n                return nullLabelMap;\n            }, {});\n            if ((options === null || options === void 0 ? void 0 : options.ifMetagenerationMatch) !== undefined) {\n                this.setLabels(nullLabelMap, options, callback);\n            }\n            else {\n                this.setLabels(nullLabelMap, callback);\n            }\n        };\n        if (labels.length === 0) {\n            this.getLabels((err, labels) => {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                deleteLabels(Object.keys(labels));\n            });\n        }\n        else {\n            deleteLabels(labels);\n        }\n    }\n    /**\n     * @typedef {array} DisableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback DisableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Disable `requesterPays` functionality from this bucket.\n     *\n     * @param {DisableRequesterPaysCallback} [callback] Callback function.\n     * @param {DisableRequesterPaysOptions} [options] Options, including precondition options\n     * @returns {Promise<DisableRequesterPaysCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.disableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality disabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.disableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_disable_requester_pays\n     * Example of disabling requester pays:\n     */\n    disableRequesterPays(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.setMetadata({\n            billing: {\n                requesterPays: false,\n            },\n        }, options, callback);\n    }\n    /**\n     * Configuration object for enabling logging.\n     *\n     * @typedef {object} EnableLoggingOptions\n     * @property {string|Bucket} [bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @property {string} prefix A unique prefix for log object names.\n     */\n    /**\n     * Enable logging functionality for this bucket. This will make two API\n     * requests, first to grant Cloud Storage WRITE permission to the bucket, then\n     * to set the appropriate configuration on the Bucket's metadata.\n     *\n     * @param {EnableLoggingOptions} config Configuration options.\n     * @param {string|Bucket} [config.bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @param {string} config.prefix A unique prefix for log object names.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const config = {\n     *   prefix: 'log'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {\n     *   if (!err) {\n     *     // Logging functionality enabled successfully.\n     *   }\n     * });\n     *\n     * ```\n     * @example\n     * Optionally, provide a destination bucket.\n     * ```\n     * const config = {\n     *   prefix: 'log',\n     *   bucket: 'destination-bucket'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {});\n     * ```\n     *\n     * @example\n     * If the callback is omitted, we'll return a Promise.\n     * ```\n     * bucket.enableLogging(config).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    enableLogging(config, callback) {\n        if (!config ||\n            typeof config === 'function' ||\n            typeof config.prefix === 'undefined') {\n            throw new Error(BucketExceptionMessages.CONFIGURATION_OBJECT_PREFIX_REQUIRED);\n        }\n        let logBucket = this.id;\n        if (config.bucket && config.bucket instanceof Bucket) {\n            logBucket = config.bucket.id;\n        }\n        else if (config.bucket && typeof config.bucket === 'string') {\n            logBucket = config.bucket;\n        }\n        const options = {};\n        if (config === null || config === void 0 ? void 0 : config.ifMetagenerationMatch) {\n            options.ifMetagenerationMatch = config.ifMetagenerationMatch;\n        }\n        if (config === null || config === void 0 ? void 0 : config.ifMetagenerationNotMatch) {\n            options.ifMetagenerationNotMatch = config.ifMetagenerationNotMatch;\n        }\n        (async () => {\n            try {\n                const [policy] = await this.iam.getPolicy();\n                policy.bindings.push({\n                    members: ['group:cloud-storage-analytics@google.com'],\n                    role: 'roles/storage.objectCreator',\n                });\n                await this.iam.setPolicy(policy);\n                this.setMetadata({\n                    logging: {\n                        logBucket,\n                        logObjectPrefix: config.prefix,\n                    },\n                }, options, callback);\n            }\n            catch (e) {\n                callback(e);\n                return;\n            }\n        })();\n    }\n    /**\n     * @typedef {array} EnableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback EnableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Enable `requesterPays` functionality for this bucket. This enables you, the\n     * bucket owner, to have the requesting user assume the charges for the access\n     * to your bucket and its contents.\n     *\n     * @param {EnableRequesterPaysCallback | EnableRequesterPaysOptions} [optionsOrCallback]\n     * Callback function or precondition options.\n     * @returns {Promise<EnableRequesterPaysResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.enableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality enabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.enableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_enable_requester_pays\n     * Example of enabling requester pays:\n     */\n    enableRequesterPays(optionsOrCallback, cb) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            cb = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.setMetadata({\n            billing: {\n                requesterPays: true,\n            },\n        }, options, cb);\n    }\n    /**\n     * Create a {@link File} object. See {@link File} to see how to handle\n     * the different use cases you may have.\n     *\n     * @param {string} name The name of the file in this bucket.\n     * @param {FileOptions} [options] Configuration options.\n     * @param {string|number} [options.generation] Only use a specific revision of\n     *     this file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     *     KMS key ring must use the same location as the bucket.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for all requests made from File object.\n     * @returns {File}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-existing-file.png');\n     * ```\n     */\n    file(name, options) {\n        if (!name) {\n            throw Error(BucketExceptionMessages.SPECIFY_FILE_NAME);\n        }\n        return new _file_js__WEBPACK_IMPORTED_MODULE_11__.File(this, name, options);\n    }\n    /**\n     * @typedef {array} GetFilesResponse\n     * @property {File[]} 0 Array of {@link File} instances.\n     * @param {object} nextQuery 1 A query object to receive more results.\n     * @param {object} apiResponse 2 The full API response.\n     */\n    /**\n     * @callback GetFilesCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Array of {@link File} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Query object for listing files.\n     *\n     * @typedef {object} GetFilesOptions\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {string} [delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @property {string} [endOffset] Filter results to objects whose names are\n     * lexicographically before endOffset. If startOffset is also set, the objects\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @property {boolean} [includeFoldersAsPrefixes] If true, includes folders and\n     * managed folders in the set of prefixes returned by the query. Only applicable if\n     * delimiter is set to / and autoPaginate is set to false.\n     * See: https://cloud.google.com/storage/docs/managed-folders\n     * @property {boolean} [includeTrailingDelimiter] If true, objects that end in\n     * exactly one instance of delimiter have their metadata included in items[]\n     * in addition to the relevant part of the object name appearing in prefixes[].\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {string} [matchGlob] A glob pattern used to filter results,\n     *     for example foo*bar\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {boolean} [softDeleted] If true, only soft-deleted object versions will be\n     *     listed as distinct results in order of generation number. Note `soft_deleted` and\n     *     `versions` cannot be set to true simultaneously.\n     * @property {string} [startOffset] Filter results to objects whose names are\n     * lexicographically equal to or after startOffset. If endOffset is also set,\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions] If true, returns File objects scoped to\n     *     their versions.\n     */\n    /**\n     * Get {@link File} objects for the files currently in the bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/list| Objects: list API Documentation}\n     *\n     * @param {GetFilesOptions} [query] Query object for listing files.\n     * @param {boolean} [query.autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @param {string} [query.delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @param {string} [query.endOffset] Filter results to objects whose names are\n     * lexicographically before endOffset. If startOffset is also set, the objects\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @param {boolean} [query.includeFoldersAsPrefixes] If true, includes folders and\n     * managed folders in the set of prefixes returned by the query. Only applicable if\n     * delimiter is set to / and autoPaginate is set to false.\n     * See: https://cloud.google.com/storage/docs/managed-folders\n     * @param {boolean} [query.includeTrailingDelimiter] If true, objects that end in\n     * exactly one instance of delimiter have their metadata included in items[]\n     * in addition to the relevant part of the object name appearing in prefixes[].\n     * @param {string} [query.prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @param {number} [query.maxApiCalls] Maximum number of API calls to make.\n     * @param {number} [query.maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @param {string} [query.pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @param {boolean} [query.softDeleted] If true, only soft-deleted object versions will be\n     *     listed as distinct results in order of generation number. Note `soft_deleted` and\n     *     `versions` cannot be set to true simultaneously.\n     * @param {string} [query.startOffset] Filter results to objects whose names are\n     * lexicographically equal to or after startOffset. If endOffset is also set,\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @param {string} [query.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {boolean} [query.versions] If true, returns File objects scoped to\n     *     their versions.\n     * @param {GetFilesCallback} [callback] Callback function.\n     * @returns {Promise<GetFilesResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getFiles(function(err, files) {\n     *   if (!err) {\n     *     // files is an array of File objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If your bucket has versioning enabled, you can get all of your files\n     * // scoped to their generation.\n     * //-\n     * bucket.getFiles({\n     *   versions: true\n     * }, function(err, files) {\n     *   // Each file is scoped to its generation.\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, files, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     bucket.getFiles(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   files[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   files[0].getMetadata(function(err, metadata) {});\n     * };\n     *\n     * bucket.getFiles({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getFiles().then(function(data) {\n     *   const files = data[0];\n     * });\n     *\n     * ```\n     * @example\n     * <h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol>\n     * ```\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // files = [\n     *   //   {File} // File object for file \"a\"\n     *   // ]\n     *\n     *   // apiResponse.prefixes = [\n     *   //   'a/',\n     *   //   'b/'\n     *   // ]\n     * });\n     * ```\n     *\n     * @example\n     * Using prefixes, it's now possible to simulate a file system with follow-up requests.\n     * ```\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/',\n     *   prefix: 'a/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // No files found within \"directory\" a.\n     *   // files = []\n     *\n     *   // However, a \"sub-directory\" was found.\n     *   // This prefix can be used to continue traversing the \"file system\".\n     *   // apiResponse.prefixes = [\n     *   //   'a/b/'\n     *   // ]\n     * });\n     * ```\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files\n     * Another example:\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files_with_prefix\n     * Example of listing files, filtered by a prefix:\n     */\n    getFiles(queryOrCallback, callback) {\n        let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n        if (!callback) {\n            callback = queryOrCallback;\n        }\n        query = Object.assign({}, query);\n        if (query.fields &&\n            query.autoPaginate &&\n            !query.fields.includes('nextPageToken')) {\n            query.fields = `${query.fields},nextPageToken`;\n        }\n        this.request({\n            uri: '/o',\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                callback(err, null, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const files = itemsArray.map((file) => {\n                const options = {};\n                if (query.fields) {\n                    const fileInstance = file;\n                    return fileInstance;\n                }\n                if (query.versions) {\n                    options.generation = file.generation;\n                }\n                if (file.kmsKeyName) {\n                    options.kmsKeyName = file.kmsKeyName;\n                }\n                const fileInstance = this.file(file.name, options);\n                fileInstance.metadata = file;\n                return fileInstance;\n            });\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, query, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            callback(null, files, nextQuery, resp);\n        });\n    }\n    /**\n     * @deprecated\n     * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @deprecated\n     * @typedef {array} GetLabelsResponse\n     * @property {object} 0 Object of labels currently set on this bucket.\n     */\n    /**\n     * @deprecated\n     * @callback GetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} labels Object of labels currently set on this bucket.\n     */\n    /**\n     * @deprecated Use getMetadata directly.\n     * Get the labels currently set on this bucket.\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<GetLabelsCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getLabels(function(err, labels) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // labels = {\n     *   //   label: 'labelValue',\n     *   //   ...\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getLabels().then(function(data) {\n     *   const labels = data[0];\n     * });\n     * ```\n     */\n    getLabels(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, (metadata === null || metadata === void 0 ? void 0 : metadata.labels) || {});\n        });\n    }\n    /**\n     * @typedef {object} GetNotificationsOptions Configuration options for Bucket#getNotification().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback GetNotificationsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification[]} notifications Array of {@link Notification}\n     *     instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} GetNotificationsResponse\n     * @property {Notification[]} 0 Array of {@link Notification} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Retrieves a list of notification subscriptions for a given bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list| Notifications: list}\n     *\n     * @param {GetNotificationsOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationsCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.getNotifications(function(err, notifications, apiResponse) {\n     *   if (!err) {\n     *     // notifications is an array of Notification objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getNotifications().then(function(data) {\n     *   const notifications = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/listNotifications.js</caption>\n     * region_tag:storage_list_bucket_notifications\n     * Another example:\n     */\n    getNotifications(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            uri: '/notificationConfigs',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const notifications = itemsArray.map((notification) => {\n                const notificationInstance = this.notification(notification.id);\n                notificationInstance.metadata = notification;\n                return notificationInstance;\n            });\n            callback(null, notifications, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetSignedUrlResponse\n     * @property {object} 0 The signed URL.\n     */\n    /**\n     * @callback GetSignedUrlCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} url The signed URL.\n     */\n    /**\n     * @typedef {object} GetBucketSignedUrlConfig\n     * @property {string} action Only listing objects within a bucket (HTTP: GET) is supported for bucket-level signed URLs.\n     * @property {*} expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @property {string} [version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @property {boolean} [virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @property {string} [cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @property {object} [extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @property {object} [queryParams] Additional query parameters to include\n     *     in the signed URL.\n     */\n    /**\n     * Get a signed URL to allow limited time access to a bucket.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed URL. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/access-control/signed-urls| Signed URLs Reference}\n     *\n     * @throws {Error} if an expiration timestamp from the past is given.\n     *\n     * @param {GetBucketSignedUrlConfig} config Configuration object.\n     * @param {string} config.action Currently only supports \"list\" (HTTP: GET).\n     * @param {*} config.expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @param {string} [config.version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @param {string} [config.cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @param {object} [config.extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @property {object} [config.queryParams] Additional query parameters to include\n     *     in the signed URL.\n     * @param {GetSignedUrlCallback} [callback] Callback function.\n     * @returns {Promise<GetSignedUrlResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Generate a URL that allows temporary access to list files in a bucket.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'list',\n     *   expires: '03-17-2025'\n     * };\n     *\n     * bucket.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The bucket is now available to be listed from this URL.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getSignedUrl(config).then(function(data) {\n     *   const url = data[0];\n     * });\n     * ```\n     */\n    getSignedUrl(cfg, callback) {\n        const method = BucketActionToHTTPMethod[cfg.action];\n        const signConfig = {\n            method,\n            expires: cfg.expires,\n            version: cfg.version,\n            cname: cfg.cname,\n            extensionHeaders: cfg.extensionHeaders || {},\n            queryParams: cfg.queryParams || {},\n            host: cfg.host,\n            signingEndpoint: cfg.signingEndpoint,\n        };\n        if (!this.signer) {\n            this.signer = new _signer_js__WEBPACK_IMPORTED_MODULE_15__.URLSigner(this.storage.authClient, this, undefined, this.storage);\n        }\n        this.signer\n            .getSignedUrl(signConfig)\n            .then(signedUrl => callback(null, signedUrl), callback);\n    }\n    /**\n     * @callback BucketLockCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Lock a previously-defined retention policy. This will prevent changes to\n     * the policy.\n     *\n     * @throws {Error} if a metageneration is not provided.\n     *\n     * @param {number|string} metageneration The bucket's metageneration. This is\n     *     accesssible from calling {@link File#getMetadata}.\n     * @param {BucketLockCallback} [callback] Callback function.\n     * @returns {Promise<BucketLockResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const metageneration = 2;\n     *\n     * bucket.lock(metageneration, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.lock(metageneration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    lock(metageneration, callback) {\n        const metatype = typeof metageneration;\n        if (metatype !== 'number' && metatype !== 'string') {\n            throw new Error(BucketExceptionMessages.METAGENERATION_NOT_PROVIDED);\n        }\n        this.request({\n            method: 'POST',\n            uri: '/lockRetentionPolicy',\n            qs: {\n                ifMetagenerationMatch: metageneration,\n            },\n        }, callback);\n    }\n    /**\n     * @typedef {object} RestoreOptions Options for Bucket#restore(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/restore#resource| Object resource}.\n     * @param {number} [generation] If present, selects a specific revision of this object.\n     * @param {string} [projection] Specifies the set of properties to return. If used, must be 'full' or 'noAcl'.\n     */\n    /**\n     * Restores a soft-deleted bucket\n     * @param {RestoreOptions} options Restore options.\n     * @returns {Promise<Bucket>}\n     */\n    async restore(options) {\n        const [bucket] = await this.request({\n            method: 'POST',\n            uri: '/restore',\n            qs: options,\n        });\n        return bucket;\n    }\n    /**\n     * @typedef {array} MakeBucketPrivateResponse\n     * @property {File[]} 0 List of files made private.\n     */\n    /**\n     * @callback MakeBucketPrivateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made private.\n     */\n    /**\n     * @typedef {object} MakeBucketPrivateOptions\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @property {Metadata} [metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @property {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Make the bucket listing private.\n     *\n     * You may also choose to make the contents of the bucket private by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePrivate} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {MakeBucketPrivateOptions} [options] Configuration options.\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {Metadata} [options.metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @param {boolean} [options.force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {MakeBucketPrivateCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPrivateResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket private.\n     * //-\n     * bucket.makePrivate(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents private.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents private, using force to suppress errors\n     * // until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePrivate(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     * ```\n     */\n    makePrivate(optionsOrCallback, callback) {\n        var _a, _b, _c, _d;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options.private = true;\n        const query = {\n            predefinedAcl: 'projectPrivate',\n        };\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        if ((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n            query.ifGenerationMatch = options.preconditionOpts.ifGenerationMatch;\n        }\n        if ((_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n            query.ifGenerationNotMatch =\n                options.preconditionOpts.ifGenerationNotMatch;\n        }\n        if ((_c = options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n            query.ifMetagenerationMatch =\n                options.preconditionOpts.ifMetagenerationMatch;\n        }\n        if ((_d = options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n            query.ifMetagenerationNotMatch =\n                options.preconditionOpts.ifMetagenerationNotMatch;\n        }\n        // You aren't allowed to set both predefinedAcl & acl properties on a bucket\n        // so acl must explicitly be nullified.\n        const metadata = { ...options.metadata, acl: null };\n        this.setMetadata(metadata, query, (err) => {\n            if (err) {\n                callback(err);\n            }\n            const internalCall = () => {\n                if (options.includeFiles) {\n                    return (0,util__WEBPACK_IMPORTED_MODULE_7__.promisify)(this.makeAllFilesPublicPrivate_).call(this, options);\n                }\n                return Promise.resolve([]);\n            };\n            internalCall()\n                .then(files => callback(null, files))\n                .catch(callback);\n        });\n    }\n    /**\n     * @typedef {object} MakeBucketPublicOptions\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @property {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     */\n    /**\n     * @callback MakeBucketPublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made public.\n     */\n    /**\n     * @typedef {array} MakeBucketPublicResponse\n     * @property {File[]} 0 List of files made public.\n     */\n    /**\n     * Make the bucket publicly readable.\n     *\n     * You may also choose to make the contents of the bucket publicly readable by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePublic} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {MakeBucketPublicOptions} [options] Configuration options.\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {boolean} [options.force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {MakeBucketPublicCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPublicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket publicly readable.\n     * //-\n     * bucket.makePublic(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePublic(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable, using force to\n     * // suppress errors until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePublic(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePublic(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     * ```\n     */\n    makePublic(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const req = { public: true, ...options };\n        this.acl\n            .add({\n            entity: 'allUsers',\n            role: 'READER',\n        })\n            .then(() => {\n            return this.acl.default.add({\n                entity: 'allUsers',\n                role: 'READER',\n            });\n        })\n            .then(() => {\n            if (req.includeFiles) {\n                return (0,util__WEBPACK_IMPORTED_MODULE_7__.promisify)(this.makeAllFilesPublicPrivate_).call(this, req);\n            }\n            return [];\n        })\n            .then(files => callback(null, files), callback);\n    }\n    /**\n     * Get a reference to a Cloud Pub/Sub Notification.\n     *\n     * @param {string} id ID of notification.\n     * @returns {Notification}\n     * @see Notification\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const notification = bucket.notification('1');\n     * ```\n     */\n    notification(id) {\n        if (!id) {\n            throw new Error(BucketExceptionMessages.SUPPLY_NOTIFICATION_ID);\n        }\n        return new _notification_js__WEBPACK_IMPORTED_MODULE_13__.Notification(this, id);\n    }\n    /**\n     * Remove an already-existing retention policy from this bucket, if it is not\n     * locked.\n     *\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataOptions} [options] Options, including precondition options\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.removeRetentionPeriod(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.removeRetentionPeriod().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    removeRetentionPeriod(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            retentionPolicy: null,\n        }, options, callback);\n    }\n    /**\n     * Makes request and applies userProject query parameter if necessary.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - The request options.\n     * @param {function} callback - The callback function.\n     */\n    request(reqOpts, callback) {\n        if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n            reqOpts.qs = { ...reqOpts.qs, userProject: this.userProject };\n        }\n        return super.request(reqOpts, callback);\n    }\n    /**\n     * @deprecated\n     * @typedef {array} SetLabelsResponse\n     * @property {object} 0 The bucket metadata.\n     */\n    /**\n     * @deprecated\n     * @callback SetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata The bucket metadata.\n     */\n    /**\n     * @deprecated\n     * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @deprecated Use setMetadata directly.\n     * Set labels on the bucket.\n     *\n     * This makes an underlying call to {@link Bucket#setMetadata}, which\n     * is a PATCH request. This means an individual label can be overwritten, but\n     * unmentioned labels will not be touched.\n     *\n     * @param {object<string, string>} labels Labels to set on the bucket.\n     * @param {SetLabelsOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {SetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<SetLabelsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const labels = {\n     *   labelone: 'labelonevalue',\n     *   labeltwo: 'labeltwovalue'\n     * };\n     *\n     * bucket.setLabels(labels, function(err, metadata) {\n     *   if (!err) {\n     *     // Labels set successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setLabels(labels).then(function(data) {\n     *   const metadata = data[0];\n     * });\n     * ```\n     */\n    setLabels(labels, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.setMetadata({ labels }, options, callback);\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata, options);\n        super\n            .setMetadata(metadata, options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n    /**\n     * Lock all objects contained in the bucket, based on their creation time. Any\n     * attempt to overwrite or delete objects younger than the retention period\n     * will result in a `PERMISSION_DENIED` error.\n     *\n     * An unlocked retention policy can be modified or removed from the bucket via\n     * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\n     * locked retention policy cannot be removed or shortened in duration for the\n     * lifetime of the bucket. Attempting to remove or decrease period of a locked\n     * retention policy will result in a `PERMISSION_DENIED` error. You can still\n     * increase the policy.\n     *\n     * @param {*} duration In seconds, the minimum retention time for all objects\n     *     contained in this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataCallback} [options] Options, including precondition options.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const DURATION_SECONDS = 15780000; // 6 months.\n     *\n     * //-\n     * // Lock the objects in this bucket for 6 months.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    setRetentionPeriod(duration, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            retentionPolicy: {\n                retentionPeriod: duration.toString(),\n            },\n        }, options, callback);\n    }\n    /**\n     *\n     * @typedef {object} Cors\n     * @property {number} [maxAgeSeconds] The number of seconds the browser is\n     *     allowed to make requests before it must repeat the preflight request.\n     * @property {string[]} [method] HTTP method allowed for cross origin resource\n     *     sharing with this bucket.\n     * @property {string[]} [origin] an origin allowed for cross origin resource\n     *     sharing with this bucket.\n     * @property {string[]} [responseHeader] A header allowed for cross origin\n     *     resource sharing with this bucket.\n     */\n    /**\n     * This can be used to set the CORS configuration on the bucket.\n     *\n     * The configuration will be overwritten with the value passed into this.\n     *\n     * @param {Cors[]} corsConfiguration The new CORS configuration to set\n     * @param {number} [corsConfiguration.maxAgeSeconds] The number of seconds the browser is\n     *     allowed to make requests before it must repeat the preflight request.\n     * @param {string[]} [corsConfiguration.method] HTTP method allowed for cross origin resource\n     *     sharing with this bucket.\n     * @param {string[]} [corsConfiguration.origin] an origin allowed for cross origin resource\n     *     sharing with this bucket.\n     * @param {string[]} [corsConfiguration.responseHeader] A header allowed for cross origin\n     *     resource sharing with this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataOptions} [options] Options, including precondition options.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\n     * bucket.setCorsConfiguration(corsConfiguration);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    setCorsConfiguration(corsConfiguration, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            cors: corsConfiguration,\n        }, options, callback);\n    }\n    /**\n     * @typedef {object} SetBucketStorageClassOptions\n     * @property {string} [userProject] - The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback SetBucketStorageClassCallback\n     * @param {?Error} err Request error, if any.\n     */\n    /**\n     * Set the default storage class for new files in this bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n     *\n     * @param {string} storageClass The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] - The ID of the project which will be\n     *     billed for the request.\n     * @param {SetStorageClassCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setStorageClass('nearline', function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // The storage class was updated successfully.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setStorageClass('nearline').then(function() {});\n     * ```\n     */\n    setStorageClass(storageClass, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        // In case we get input like `storageClass`, convert to `storage_class`.\n        storageClass = storageClass\n            .replace(/-/g, '_')\n            .replace(/([a-z])([A-Z])/g, (_, low, up) => {\n            return low + '_' + up;\n        })\n            .toUpperCase();\n        this.setMetadata({ storageClass }, options, callback);\n    }\n    /**\n     * Set a user project to be billed for all requests made from this Bucket\n     * object and any files referenced from this Bucket object.\n     *\n     * @param {string} userProject The user project.\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setUserProject('grape-spaceship-123');\n     * ```\n     */\n    setUserProject(userProject) {\n        this.userProject = userProject;\n        const methods = [\n            'create',\n            'delete',\n            'exists',\n            'get',\n            'getMetadata',\n            'setMetadata',\n        ];\n        methods.forEach(method => {\n            const methodConfig = this.methods[method];\n            if (typeof methodConfig === 'object') {\n                if (typeof methodConfig.reqOpts === 'object') {\n                    Object.assign(methodConfig.reqOpts.qs, { userProject });\n                }\n                else {\n                    methodConfig.reqOpts = {\n                        qs: { userProject },\n                    };\n                }\n            }\n        });\n    }\n    /**\n     * @typedef {object} UploadOptions Configuration options for Bucket#upload().\n     * @property {string|File} [destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @property {string} [encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @property {boolean} [gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @property {string} [kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @property {object} [metadata] See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n     * @property {string} [offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @property {string} [predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     *\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *       `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *       project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *       team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *       team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *       get `READER` access.\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @property {boolean} [resumable=true] Resumable uploads are automatically\n     *     enabled and must be shut off explicitly by setting to false.\n     * @property {number} [timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @property {string} [uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     */\n    /**\n     * @typedef {array} UploadResponse\n     * @property {object} 0 The uploaded {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback UploadCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} file The uploaded {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Upload a file to the bucket. This is a convenience method that wraps\n     * {@link File#createWriteStream}.\n     *\n     * Resumable uploads are enabled by default\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads| Upload Options (Simple or Resumable)}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert| Objects: insert API Documentation}\n     *\n     * @param {string} pathString The fully qualified path to the file you\n     *     wish to upload to your bucket.\n     * @param {UploadOptions} [options] Configuration options.\n     * @param {string|File} [options.destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @param {boolean} [options.gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @param {object} [options.metadata] See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n     * @param {string} [options.offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @param {string} [options.predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *   `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *   project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *   team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *   team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *   get `READER` access.\n     * @param {boolean} [options.private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @param {boolean} [options.public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @param {boolean} [options.resumable=true] Resumable uploads are automatically\n     *     enabled and must be shut off explicitly by setting to false.\n     * @param {number} [options.timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @param {string} [options.uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     * @param {UploadCallback} [callback] Callback function.\n     * @returns {Promise<UploadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Upload a file from a local path.\n     * //-\n     * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n     *   // Your bucket now contains:\n     *   // - \"image.png\" (with the contents of `/local/path/image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     *\n     * //-\n     * // It's not always that easy. You will likely want to specify the filename\n     * // used when your new file lands in your bucket.\n     * //\n     * // You may also want to set metadata or customize other options.\n     * //-\n     * const options = {\n     *   destination: 'new-image.png',\n     *   validation: 'crc32c',\n     *   metadata: {\n     *     metadata: {\n     *       event: 'Fall trip to the zoo'\n     *     }\n     *   }\n     * };\n     *\n     * bucket.upload('local-image.png', options, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"new-image.png\" (with the contents of `local-image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     * //-\n     * // You can also have a file gzip'd on the fly.\n     * //-\n     * bucket.upload('index.html', { gzip: true }, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"index.html\" (automatically compressed with gzip)\n     *\n     *   // Downloading the file with `file.download` will automatically decode\n     * the\n     *   // file.\n     * });\n     *\n     * //-\n     * // You may also re-use a File object, {File}, that references\n     * // the file you wish to create or overwrite.\n     * //-\n     * const options = {\n     *   destination: bucket.file('existing-file.png'),\n     *   resumable: false\n     * };\n     *\n     * bucket.upload('local-img.png', options, function(err, newFile) {\n     *   // Your bucket now contains:\n     *   // - \"existing-file.png\" (with the contents of `local-img.png')\n     *\n     *   // Note:\n     *   // The `newFile` parameter is equal to `file`.\n     * });\n     *\n     * //-\n     * // To use\n     * // <a\n     * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\n     * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\n     * option.\n     * //-\n     * const crypto = require('crypto');\n     * const encryptionKey = crypto.randomBytes(32);\n     *\n     * bucket.upload('img.png', {\n     *   encryptionKey: encryptionKey\n     * }, function(err, newFile) {\n     *   // `img.png` was uploaded with your custom encryption key.\n     *\n     *   // `newFile` is already configured to use the encryption key when making\n     *   // operations on the remote object.\n     *\n     *   // However, to use your encryption key later, you must create a `File`\n     *   // instance with the `key` supplied:\n     *   const file = bucket.file('img.png', {\n     *     encryptionKey: encryptionKey\n     *   });\n     *\n     *   // Or with `file#setEncryptionKey`:\n     *   const file = bucket.file('img.png');\n     *   file.setEncryptionKey(encryptionKey);\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.upload('local-image.png').then(function(data) {\n     *   const file = data[0];\n     * });\n     *\n     * To upload a file from a URL, use {@link File#createWriteStream}.\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_upload_file\n     * Another example:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_upload_encrypted_file\n     * Example of uploading an encrypted file:\n     */\n    upload(pathString, optionsOrCallback, callback) {\n        var _a, _b;\n        const upload = (numberOfRetries) => {\n            const returnValue = async_retry__WEBPACK_IMPORTED_MODULE_8__(async (bail) => {\n                await new Promise((resolve, reject) => {\n                    var _a, _b;\n                    if (numberOfRetries === 0 &&\n                        ((_b = (_a = newFile === null || newFile === void 0 ? void 0 : newFile.storage) === null || _a === void 0 ? void 0 : _a.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry)) {\n                        newFile.storage.retryOptions.autoRetry = false;\n                    }\n                    const writable = newFile.createWriteStream(options);\n                    if (options.onUploadProgress) {\n                        writable.on('progress', options.onUploadProgress);\n                    }\n                    fs__WEBPACK_IMPORTED_MODULE_3__.createReadStream(pathString)\n                        .on('error', bail)\n                        .pipe(writable)\n                        .on('error', err => {\n                        if (this.storage.retryOptions.autoRetry &&\n                            this.storage.retryOptions.retryableErrorFn(err)) {\n                            return reject(err);\n                        }\n                        else {\n                            return bail(err);\n                        }\n                    })\n                        .on('finish', () => {\n                        return resolve();\n                    });\n                });\n            }, {\n                retries: numberOfRetries,\n                factor: this.storage.retryOptions.retryDelayMultiplier,\n                maxTimeout: this.storage.retryOptions.maxRetryDelay * 1000, //convert to milliseconds\n                maxRetryTime: this.storage.retryOptions.totalTimeout * 1000, //convert to milliseconds\n            });\n            if (!callback) {\n                return returnValue;\n            }\n            else {\n                return returnValue\n                    .then(() => {\n                    if (callback) {\n                        return callback(null, newFile, newFile.metadata);\n                    }\n                })\n                    .catch(callback);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (global['GCLOUD_SANDBOX_ENV']) {\n            return;\n        }\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options = Object.assign({\n            metadata: {},\n        }, options);\n        // Do not retry if precondition option ifGenerationMatch is not set\n        // because this is a file operation\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if ((((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined &&\n            ((_b = this.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch) === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryNever) {\n            maxRetries = 0;\n        }\n        let newFile;\n        if (options.destination instanceof _file_js__WEBPACK_IMPORTED_MODULE_11__.File) {\n            newFile = options.destination;\n        }\n        else if (options.destination !== null &&\n            typeof options.destination === 'string') {\n            // Use the string as the name of the file.\n            newFile = this.file(options.destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n                preconditionOpts: this.instancePreconditionOpts,\n            });\n        }\n        else {\n            // Resort to using the name of the incoming file.\n            const destination = path__WEBPACK_IMPORTED_MODULE_5__.basename(pathString);\n            newFile = this.file(destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n                preconditionOpts: this.instancePreconditionOpts,\n            });\n        }\n        upload(maxRetries);\n    }\n    /**\n     * @private\n     *\n     * @typedef {object} MakeAllFilesPublicPrivateOptions\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     * @property {boolean} [private] Make files private.\n     * @property {boolean} [public] Make files public.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @private\n     *\n     * @callback SetBucketMetadataCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Files that were updated.\n     */\n    /**\n     * @typedef {array} MakeAllFilesPublicPrivateResponse\n     * @property {File[]} 0 List of files affected.\n     */\n    /**\n     * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\n     * or `file.makePrivate()` (private) on each.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop, and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors.\n     *\n     * @private\n     *\n     * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\n     * @param {boolean} [options.force] Suppress errors until all files have been\n     *     processed.\n     * @param {boolean} [options.private] Make files private.\n     * @param {boolean} [options.public] Make files public.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n  \n     * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\n     *\n     * @return {Promise<MakeAllFilesPublicPrivateResponse>}\n     */\n    makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n        const MAX_PARALLEL_LIMIT = 10;\n        const errors = [];\n        const updatedFiles = [];\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const processFile = async (file) => {\n            try {\n                await (options.public ? file.makePublic() : file.makePrivate(options));\n                updatedFiles.push(file);\n            }\n            catch (e) {\n                if (!options.force) {\n                    throw e;\n                }\n                errors.push(e);\n            }\n        };\n        this.getFiles(options)\n            .then(([files]) => {\n            const limit = p_limit__WEBPACK_IMPORTED_MODULE_6__(MAX_PARALLEL_LIMIT);\n            const promises = files.map(file => {\n                return limit(() => processFile(file));\n            });\n            return Promise.all(promises);\n        })\n            .then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\n    }\n    getId() {\n        return this.id;\n    }\n    disableAutoRetryConditionallyIdempotent_(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    coreOpts, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodType, localPreconditionOptions) {\n        var _a, _b;\n        if (typeof coreOpts === 'object' &&\n            ((_b = (_a = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _a === void 0 ? void 0 : _a.qs) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch) === undefined &&\n            (localPreconditionOptions === null || localPreconditionOptions === void 0 ? void 0 : localPreconditionOptions.ifMetagenerationMatch) === undefined &&\n            (methodType === AvailableServiceObjectMethods.setMetadata ||\n                methodType === AvailableServiceObjectMethods.delete) &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryConditional) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        else if (this.storage.retryOptions.idempotencyStrategy ===\n            _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryNever) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n    }\n}\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n_google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__.promisifyAll)(Bucket, {\n    exclude: ['cloudStorageURI', 'request', 'file', 'notification', 'restore'],\n});\n/**\n * Reference to the {@link Bucket} class.\n * @name module:@google-cloud/storage.Bucket\n * @see Bucket\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/channel.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/channel.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Channel: () => (/* binding */ Channel)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * Create a channel object to interact with a Cloud Storage channel.\n *\n * See {@link https://cloud.google.com/storage/docs/object-change-notification| Object Change Notification}\n *\n * @class\n *\n * @param {string} id The ID of the channel.\n * @param {string} resourceId The resource ID of the channel.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const channel = storage.channel('id', 'resource-id');\n * ```\n */\nclass Channel extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    constructor(storage, id, resourceId) {\n        const config = {\n            parent: storage,\n            baseUrl: '/channels',\n            // An ID shouldn't be included in the API requests.\n            // RE:\n            // https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1145\n            id: '',\n            methods: {\n            // Only need `request`.\n            },\n        };\n        super(config);\n        this.metadata.id = id;\n        this.metadata.resourceId = resourceId;\n    }\n    /**\n     * @typedef {array} StopResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback StopCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Stop this channel.\n     *\n     * @param {StopCallback} [callback] Callback function.\n     * @returns {Promise<StopResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const channel = storage.channel('id', 'resource-id');\n     * channel.stop(function(err, apiResponse) {\n     *   if (!err) {\n     *     // Channel stopped successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * channel.stop().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    stop(callback) {\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.request({\n            method: 'POST',\n            uri: '/stop',\n            json: this.metadata,\n        }, (err, apiResponse) => {\n            callback(err, apiResponse);\n        });\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__.promisifyAll)(Channel);\n/**\n * Reference to the {@link Channel} class.\n * @name module:@google-cloud/storage.Channel\n * @see Channel\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvY2hhbm5lbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrRDtBQUNSO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QixrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IseURBQUk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBWTtBQUNaO0FBQ0EscUJBQXFCLGVBQWU7QUFDcEM7QUFDQTtBQUNBO0FBQ21CIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2UvYnVpbGQvZXNtL3NyYy9jaGFubmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgU2VydmljZU9iamVjdCwgdXRpbCB9IGZyb20gJy4vbm9kZWpzLWNvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBwcm9taXNpZnlBbGwgfSBmcm9tICdAZ29vZ2xlLWNsb3VkL3Byb21pc2lmeSc7XG4vKipcbiAqIENyZWF0ZSBhIGNoYW5uZWwgb2JqZWN0IHRvIGludGVyYWN0IHdpdGggYSBDbG91ZCBTdG9yYWdlIGNoYW5uZWwuXG4gKlxuICogU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vc3RvcmFnZS9kb2NzL29iamVjdC1jaGFuZ2Utbm90aWZpY2F0aW9ufCBPYmplY3QgQ2hhbmdlIE5vdGlmaWNhdGlvbn1cbiAqXG4gKiBAY2xhc3NcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBjaGFubmVsLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlSWQgVGhlIHJlc291cmNlIElEIG9mIHRoZSBjaGFubmVsLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGNvbnN0IHtTdG9yYWdlfSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpO1xuICogY29uc3Qgc3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XG4gKiBjb25zdCBjaGFubmVsID0gc3RvcmFnZS5jaGFubmVsKCdpZCcsICdyZXNvdXJjZS1pZCcpO1xuICogYGBgXG4gKi9cbmNsYXNzIENoYW5uZWwgZXh0ZW5kcyBTZXJ2aWNlT2JqZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlLCBpZCwgcmVzb3VyY2VJZCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBwYXJlbnQ6IHN0b3JhZ2UsXG4gICAgICAgICAgICBiYXNlVXJsOiAnL2NoYW5uZWxzJyxcbiAgICAgICAgICAgIC8vIEFuIElEIHNob3VsZG4ndCBiZSBpbmNsdWRlZCBpbiB0aGUgQVBJIHJlcXVlc3RzLlxuICAgICAgICAgICAgLy8gUkU6XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2xvdWRQbGF0Zm9ybS9nb29nbGUtY2xvdWQtbm9kZS9pc3N1ZXMvMTE0NVxuICAgICAgICAgICAgaWQ6ICcnLFxuICAgICAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgICAgLy8gT25seSBuZWVkIGByZXF1ZXN0YC5cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5yZXNvdXJjZUlkID0gcmVzb3VyY2VJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge2FycmF5fSBTdG9wUmVzcG9uc2VcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gMCBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQGNhbGxiYWNrIFN0b3BDYWxsYmFja1xuICAgICAqIEBwYXJhbSB7P0Vycm9yfSBlcnIgUmVxdWVzdCBlcnJvciwgaWYgYW55LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBhcGlSZXNwb25zZSBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogU3RvcCB0aGlzIGNoYW5uZWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0b3BDYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdG9wUmVzcG9uc2U+fVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCB7U3RvcmFnZX0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL3N0b3JhZ2UnKTtcbiAgICAgKiBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAgICAgKiBjb25zdCBjaGFubmVsID0gc3RvcmFnZS5jaGFubmVsKCdpZCcsICdyZXNvdXJjZS1pZCcpO1xuICAgICAqIGNoYW5uZWwuc3RvcChmdW5jdGlvbihlcnIsIGFwaVJlc3BvbnNlKSB7XG4gICAgICogICBpZiAoIWVycikge1xuICAgICAqICAgICAvLyBDaGFubmVsIHN0b3BwZWQgc3VjY2Vzc2Z1bGx5LlxuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8tXG4gICAgICogLy8gSWYgdGhlIGNhbGxiYWNrIGlzIG9taXR0ZWQsIHdlJ2xsIHJldHVybiBhIFByb21pc2UuXG4gICAgICogLy8tXG4gICAgICogY2hhbm5lbC5zdG9wKCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICogICBjb25zdCBhcGlSZXNwb25zZSA9IGRhdGFbMF07XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3RvcChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IHV0aWwubm9vcDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJpOiAnL3N0b3AnLFxuICAgICAgICAgICAganNvbjogdGhpcy5tZXRhZGF0YSxcbiAgICAgICAgfSwgKGVyciwgYXBpUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgYXBpUmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vKiEgRGV2ZWxvcGVyIERvY3VtZW50YXRpb25cbiAqXG4gKiBBbGwgYXN5bmMgbWV0aG9kcyAoZXhjZXB0IGZvciBzdHJlYW1zKSB3aWxsIHJldHVybiBhIFByb21pc2UgaW4gdGhlIGV2ZW50XG4gKiB0aGF0IGEgY2FsbGJhY2sgaXMgb21pdHRlZC5cbiAqL1xucHJvbWlzaWZ5QWxsKENoYW5uZWwpO1xuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHtAbGluayBDaGFubmVsfSBjbGFzcy5cbiAqIEBuYW1lIG1vZHVsZTpAZ29vZ2xlLWNsb3VkL3N0b3JhZ2UuQ2hhbm5lbFxuICogQHNlZSBDaGFubmVsXG4gKi9cbmV4cG9ydCB7IENoYW5uZWwgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/crc32c.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CRC32C: () => (/* binding */ CRC32C),\n/* harmony export */   CRC32C_DEFAULT_VALIDATOR_GENERATOR: () => (/* binding */ CRC32C_DEFAULT_VALIDATOR_GENERATOR),\n/* harmony export */   CRC32C_EXCEPTION_MESSAGES: () => (/* binding */ CRC32C_EXCEPTION_MESSAGES),\n/* harmony export */   CRC32C_EXTENSIONS: () => (/* binding */ CRC32C_EXTENSIONS),\n/* harmony export */   CRC32C_EXTENSION_TABLE: () => (/* binding */ CRC32C_EXTENSION_TABLE)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CRC32C_crc32c;\n\n/**\n * Ported from {@link https://github.com/google/crc32c/blob/21fc8ef30415a635e7351ffa0e5d5367943d4a94/src/crc32c_portable.cc#L16-L59 github.com/google/crc32c}\n */\nconst CRC32C_EXTENSIONS = [\n    0x00000000, 0xf26b8303, 0xe13b70f7, 0x1350f3f4, 0xc79a971f, 0x35f1141c,\n    0x26a1e7e8, 0xd4ca64eb, 0x8ad958cf, 0x78b2dbcc, 0x6be22838, 0x9989ab3b,\n    0x4d43cfd0, 0xbf284cd3, 0xac78bf27, 0x5e133c24, 0x105ec76f, 0xe235446c,\n    0xf165b798, 0x030e349b, 0xd7c45070, 0x25afd373, 0x36ff2087, 0xc494a384,\n    0x9a879fa0, 0x68ec1ca3, 0x7bbcef57, 0x89d76c54, 0x5d1d08bf, 0xaf768bbc,\n    0xbc267848, 0x4e4dfb4b, 0x20bd8ede, 0xd2d60ddd, 0xc186fe29, 0x33ed7d2a,\n    0xe72719c1, 0x154c9ac2, 0x061c6936, 0xf477ea35, 0xaa64d611, 0x580f5512,\n    0x4b5fa6e6, 0xb93425e5, 0x6dfe410e, 0x9f95c20d, 0x8cc531f9, 0x7eaeb2fa,\n    0x30e349b1, 0xc288cab2, 0xd1d83946, 0x23b3ba45, 0xf779deae, 0x05125dad,\n    0x1642ae59, 0xe4292d5a, 0xba3a117e, 0x4851927d, 0x5b016189, 0xa96ae28a,\n    0x7da08661, 0x8fcb0562, 0x9c9bf696, 0x6ef07595, 0x417b1dbc, 0xb3109ebf,\n    0xa0406d4b, 0x522bee48, 0x86e18aa3, 0x748a09a0, 0x67dafa54, 0x95b17957,\n    0xcba24573, 0x39c9c670, 0x2a993584, 0xd8f2b687, 0x0c38d26c, 0xfe53516f,\n    0xed03a29b, 0x1f682198, 0x5125dad3, 0xa34e59d0, 0xb01eaa24, 0x42752927,\n    0x96bf4dcc, 0x64d4cecf, 0x77843d3b, 0x85efbe38, 0xdbfc821c, 0x2997011f,\n    0x3ac7f2eb, 0xc8ac71e8, 0x1c661503, 0xee0d9600, 0xfd5d65f4, 0x0f36e6f7,\n    0x61c69362, 0x93ad1061, 0x80fde395, 0x72966096, 0xa65c047d, 0x5437877e,\n    0x4767748a, 0xb50cf789, 0xeb1fcbad, 0x197448ae, 0x0a24bb5a, 0xf84f3859,\n    0x2c855cb2, 0xdeeedfb1, 0xcdbe2c45, 0x3fd5af46, 0x7198540d, 0x83f3d70e,\n    0x90a324fa, 0x62c8a7f9, 0xb602c312, 0x44694011, 0x5739b3e5, 0xa55230e6,\n    0xfb410cc2, 0x092a8fc1, 0x1a7a7c35, 0xe811ff36, 0x3cdb9bdd, 0xceb018de,\n    0xdde0eb2a, 0x2f8b6829, 0x82f63b78, 0x709db87b, 0x63cd4b8f, 0x91a6c88c,\n    0x456cac67, 0xb7072f64, 0xa457dc90, 0x563c5f93, 0x082f63b7, 0xfa44e0b4,\n    0xe9141340, 0x1b7f9043, 0xcfb5f4a8, 0x3dde77ab, 0x2e8e845f, 0xdce5075c,\n    0x92a8fc17, 0x60c37f14, 0x73938ce0, 0x81f80fe3, 0x55326b08, 0xa759e80b,\n    0xb4091bff, 0x466298fc, 0x1871a4d8, 0xea1a27db, 0xf94ad42f, 0x0b21572c,\n    0xdfeb33c7, 0x2d80b0c4, 0x3ed04330, 0xccbbc033, 0xa24bb5a6, 0x502036a5,\n    0x4370c551, 0xb11b4652, 0x65d122b9, 0x97baa1ba, 0x84ea524e, 0x7681d14d,\n    0x2892ed69, 0xdaf96e6a, 0xc9a99d9e, 0x3bc21e9d, 0xef087a76, 0x1d63f975,\n    0x0e330a81, 0xfc588982, 0xb21572c9, 0x407ef1ca, 0x532e023e, 0xa145813d,\n    0x758fe5d6, 0x87e466d5, 0x94b49521, 0x66df1622, 0x38cc2a06, 0xcaa7a905,\n    0xd9f75af1, 0x2b9cd9f2, 0xff56bd19, 0x0d3d3e1a, 0x1e6dcdee, 0xec064eed,\n    0xc38d26c4, 0x31e6a5c7, 0x22b65633, 0xd0ddd530, 0x0417b1db, 0xf67c32d8,\n    0xe52cc12c, 0x1747422f, 0x49547e0b, 0xbb3ffd08, 0xa86f0efc, 0x5a048dff,\n    0x8ecee914, 0x7ca56a17, 0x6ff599e3, 0x9d9e1ae0, 0xd3d3e1ab, 0x21b862a8,\n    0x32e8915c, 0xc083125f, 0x144976b4, 0xe622f5b7, 0xf5720643, 0x07198540,\n    0x590ab964, 0xab613a67, 0xb831c993, 0x4a5a4a90, 0x9e902e7b, 0x6cfbad78,\n    0x7fab5e8c, 0x8dc0dd8f, 0xe330a81a, 0x115b2b19, 0x020bd8ed, 0xf0605bee,\n    0x24aa3f05, 0xd6c1bc06, 0xc5914ff2, 0x37faccf1, 0x69e9f0d5, 0x9b8273d6,\n    0x88d28022, 0x7ab90321, 0xae7367ca, 0x5c18e4c9, 0x4f48173d, 0xbd23943e,\n    0xf36e6f75, 0x0105ec76, 0x12551f82, 0xe03e9c81, 0x34f4f86a, 0xc69f7b69,\n    0xd5cf889d, 0x27a40b9e, 0x79b737ba, 0x8bdcb4b9, 0x988c474d, 0x6ae7c44e,\n    0xbe2da0a5, 0x4c4623a6, 0x5f16d052, 0xad7d5351,\n];\nconst CRC32C_EXTENSION_TABLE = new Int32Array(CRC32C_EXTENSIONS);\nconst CRC32C_DEFAULT_VALIDATOR_GENERATOR = () => new CRC32C();\nconst CRC32C_EXCEPTION_MESSAGES = {\n    INVALID_INIT_BASE64_RANGE: (l) => `base64-encoded data expected to equal 4 bytes, not ${l}`,\n    INVALID_INIT_BUFFER_LENGTH: (l) => `Buffer expected to equal 4 bytes, not ${l}`,\n    INVALID_INIT_INTEGER: (l) => `Number expected to be a safe, unsigned 32-bit integer, not ${l}`,\n};\nclass CRC32C {\n    /**\n     * Constructs a new `CRC32C` object.\n     *\n     * Reconstruction is recommended via the `CRC32C.from` static method.\n     *\n     * @param initialValue An initial CRC32C value - a signed 32-bit integer.\n     */\n    constructor(initialValue = 0) {\n        /** Current CRC32C value */\n        _CRC32C_crc32c.set(this, 0);\n        __classPrivateFieldSet(this, _CRC32C_crc32c, initialValue, \"f\");\n    }\n    /**\n     * Calculates a CRC32C from a provided buffer.\n     *\n     * Implementation inspired from:\n     * - {@link https://github.com/google/crc32c/blob/21fc8ef30415a635e7351ffa0e5d5367943d4a94/src/crc32c_portable.cc github.com/google/crc32c}\n     * - {@link https://github.com/googleapis/python-crc32c/blob/a595e758c08df445a99c3bf132ee8e80a3ec4308/src/google_crc32c/python.py github.com/googleapis/python-crc32c}\n     * - {@link https://github.com/googleapis/java-storage/pull/1376/files github.com/googleapis/java-storage}\n     *\n     * @param data The `Buffer` to generate the CRC32C from\n     */\n    update(data) {\n        let current = __classPrivateFieldGet(this, _CRC32C_crc32c, \"f\") ^ 0xffffffff;\n        for (const d of data) {\n            const tablePoly = CRC32C.CRC32C_EXTENSION_TABLE[(d ^ current) & 0xff];\n            current = tablePoly ^ (current >>> 8);\n        }\n        __classPrivateFieldSet(this, _CRC32C_crc32c, current ^ 0xffffffff, \"f\");\n    }\n    /**\n     * Validates a provided input to the current CRC32C value.\n     *\n     * @param input A Buffer, `CRC32C`-compatible object, base64-encoded data (string), or signed 32-bit integer\n     */\n    validate(input) {\n        if (typeof input === 'number') {\n            return input === __classPrivateFieldGet(this, _CRC32C_crc32c, \"f\");\n        }\n        else if (typeof input === 'string') {\n            return input === this.toString();\n        }\n        else if (Buffer.isBuffer(input)) {\n            return Buffer.compare(input, this.toBuffer()) === 0;\n        }\n        else {\n            // `CRC32C`-like object\n            return input.toString() === this.toString();\n        }\n    }\n    /**\n     * Returns a `Buffer` representation of the CRC32C value\n     */\n    toBuffer() {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(__classPrivateFieldGet(this, _CRC32C_crc32c, \"f\"));\n        return buffer;\n    }\n    /**\n     * Returns a JSON-compatible, base64-encoded representation of the CRC32C value.\n     *\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify `JSON#stringify`}\n     */\n    toJSON() {\n        return this.toString();\n    }\n    /**\n     * Returns a base64-encoded representation of the CRC32C value.\n     *\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString `Object#toString`}\n     */\n    toString() {\n        return this.toBuffer().toString('base64');\n    }\n    /**\n     * Returns the `number` representation of the CRC32C value as a signed 32-bit integer\n     *\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf `Object#valueOf`}\n     */\n    valueOf() {\n        return __classPrivateFieldGet(this, _CRC32C_crc32c, \"f\");\n    }\n    /**\n     * Generates a `CRC32C` from a compatible buffer format.\n     *\n     * @param value 4-byte `ArrayBufferView`/`Buffer`/`TypedArray`\n     */\n    static fromBuffer(value) {\n        let buffer;\n        if (Buffer.isBuffer(value)) {\n            buffer = value;\n        }\n        else if ('buffer' in value) {\n            // `ArrayBufferView`\n            buffer = Buffer.from(value.buffer);\n        }\n        else {\n            // `ArrayBuffer`\n            buffer = Buffer.from(value);\n        }\n        if (buffer.byteLength !== 4) {\n            throw new RangeError(CRC32C_EXCEPTION_MESSAGES.INVALID_INIT_BUFFER_LENGTH(buffer.byteLength));\n        }\n        return new CRC32C(buffer.readInt32BE());\n    }\n    static async fromFile(file) {\n        const crc32c = new CRC32C();\n        await new Promise((resolve, reject) => {\n            (0,fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(file)\n                .on('data', (d) => {\n                if (typeof d === 'string') {\n                    crc32c.update(Buffer.from(d));\n                }\n                else {\n                    crc32c.update(d);\n                }\n            })\n                .on('end', () => resolve())\n                .on('error', reject);\n        });\n        return crc32c;\n    }\n    /**\n     * Generates a `CRC32C` from 4-byte base64-encoded data (string).\n     *\n     * @param value 4-byte base64-encoded data (string)\n     */\n    static fromString(value) {\n        const buffer = Buffer.from(value, 'base64');\n        if (buffer.byteLength !== 4) {\n            throw new RangeError(CRC32C_EXCEPTION_MESSAGES.INVALID_INIT_BASE64_RANGE(buffer.byteLength));\n        }\n        return this.fromBuffer(buffer);\n    }\n    /**\n     * Generates a `CRC32C` from a safe, unsigned 32-bit integer.\n     *\n     * @param value an unsigned 32-bit integer\n     */\n    static fromNumber(value) {\n        if (!Number.isSafeInteger(value) || value > 2 ** 32 || value < -(2 ** 32)) {\n            throw new RangeError(CRC32C_EXCEPTION_MESSAGES.INVALID_INIT_INTEGER(value));\n        }\n        return new CRC32C(value);\n    }\n    /**\n     * Generates a `CRC32C` from a variety of compatable types.\n     * Note: strings are treated as input, not as file paths to read from.\n     *\n     * @param value A number, 4-byte `ArrayBufferView`/`Buffer`/`TypedArray`, or 4-byte base64-encoded data (string)\n     */\n    static from(value) {\n        if (typeof value === 'number') {\n            return this.fromNumber(value);\n        }\n        else if (typeof value === 'string') {\n            return this.fromString(value);\n        }\n        else if ('byteLength' in value) {\n            // `ArrayBuffer` | `Buffer` | `ArrayBufferView`\n            return this.fromBuffer(value);\n        }\n        else {\n            // `CRC32CValidator`/`CRC32C`-like\n            return this.fromString(value.toString());\n        }\n    }\n}\n_CRC32C_crc32c = new WeakMap();\nCRC32C.CRC32C_EXTENSIONS = CRC32C_EXTENSIONS;\nCRC32C.CRC32C_EXTENSION_TABLE = CRC32C_EXTENSION_TABLE;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/file.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionToHTTPMethod: () => (/* binding */ ActionToHTTPMethod),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FileExceptionMessages: () => (/* binding */ FileExceptionMessages),\n/* harmony export */   RequestError: () => (/* binding */ RequestError),\n/* harmony export */   STORAGE_POST_POLICY_BASE_URL: () => (/* binding */ STORAGE_POST_POLICY_BASE_URL)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var mime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mime */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/index.js\");\n/* harmony import */ var _resumable_upload_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resumable-upload.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/resumable-upload.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _bucket_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bucket.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js\");\n/* harmony import */ var _acl_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./acl.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/acl.js\");\n/* harmony import */ var _signer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./signer.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/signer.js\");\n/* harmony import */ var _nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./nodejs-common/util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/* harmony import */ var duplexify__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./hash-stream-validator.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _File_instances, _File_validateIntegrity;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ActionToHTTPMethod;\n(function (ActionToHTTPMethod) {\n    ActionToHTTPMethod[\"read\"] = \"GET\";\n    ActionToHTTPMethod[\"write\"] = \"PUT\";\n    ActionToHTTPMethod[\"delete\"] = \"DELETE\";\n    ActionToHTTPMethod[\"resumable\"] = \"POST\";\n})(ActionToHTTPMethod || (ActionToHTTPMethod = {}));\n/**\n * @deprecated - no longer used\n */\nconst STORAGE_POST_POLICY_BASE_URL = 'https://storage.googleapis.com';\n/**\n * @private\n */\nconst GS_URL_REGEXP = /^gs:\\/\\/([a-z0-9_.-]+)\\/(.+)$/;\n/**\n * @private\n * This regex will match compressible content types. These are primarily text/*, +json, +text, +xml content types.\n * This was based off of mime-db and may periodically need to be updated if new compressible content types become\n * standards.\n */\nconst COMPRESSIBLE_MIME_REGEX = new RegExp([\n    /^text\\/|application\\/ecmascript|application\\/javascript|application\\/json/,\n    /|application\\/postscript|application\\/rtf|application\\/toml|application\\/vnd.dart/,\n    /|application\\/vnd.ms-fontobject|application\\/wasm|application\\/x-httpd-php|application\\/x-ns-proxy-autoconfig/,\n    /|application\\/x-sh(?!ockwave-flash)|application\\/x-tar|application\\/x-virtualbox-hdd|application\\/x-virtualbox-ova|application\\/x-virtualbox-ovf/,\n    /|^application\\/x-virtualbox-vbox$|application\\/x-virtualbox-vdi|application\\/x-virtualbox-vhd|application\\/x-virtualbox-vmdk/,\n    /|application\\/xml|application\\/xml-dtd|font\\/otf|font\\/ttf|image\\/bmp|image\\/vnd.adobe.photoshop|image\\/vnd.microsoft.icon/,\n    /|image\\/vnd.ms-dds|image\\/x-icon|image\\/x-ms-bmp|message\\/rfc822|model\\/gltf-binary|\\+json|\\+text|\\+xml|\\+yaml/,\n]\n    .map(r => r.source)\n    .join(''), 'i');\nclass RequestError extends Error {\n}\nconst SEVEN_DAYS = 7 * 24 * 60 * 60;\nconst GS_UTIL_URL_REGEX = /(gs):\\/\\/([a-z0-9_.-]+)\\/(.+)/g;\nconst HTTPS_PUBLIC_URL_REGEX = /(https):\\/\\/(storage\\.googleapis\\.com)\\/([a-z0-9_.-]+)\\/(.+)/g;\nvar FileExceptionMessages;\n(function (FileExceptionMessages) {\n    FileExceptionMessages[\"EXPIRATION_TIME_NA\"] = \"An expiration time is not available.\";\n    FileExceptionMessages[\"DESTINATION_NO_NAME\"] = \"Destination file should have a name.\";\n    FileExceptionMessages[\"INVALID_VALIDATION_FILE_RANGE\"] = \"Cannot use validation with file ranges (start/end).\";\n    FileExceptionMessages[\"MD5_NOT_AVAILABLE\"] = \"MD5 verification was specified, but is not available for the requested object. MD5 is not available for composite objects.\";\n    FileExceptionMessages[\"EQUALS_CONDITION_TWO_ELEMENTS\"] = \"Equals condition must be an array of 2 elements.\";\n    FileExceptionMessages[\"STARTS_WITH_TWO_ELEMENTS\"] = \"StartsWith condition must be an array of 2 elements.\";\n    FileExceptionMessages[\"CONTENT_LENGTH_RANGE_MIN_MAX\"] = \"ContentLengthRange must have numeric min & max fields.\";\n    FileExceptionMessages[\"DOWNLOAD_MISMATCH\"] = \"The downloaded data did not match the data from the server. To be sure the content is the same, you should download the file again.\";\n    FileExceptionMessages[\"UPLOAD_MISMATCH_DELETE_FAIL\"] = \"The uploaded data did not match the data from the server.\\n    As a precaution, we attempted to delete the file, but it was not successful.\\n    To be sure the content is the same, you should try removing the file manually,\\n    then uploading the file again.\\n    \\n\\nThe delete attempt failed with this message:\\n\\n  \";\n    FileExceptionMessages[\"UPLOAD_MISMATCH\"] = \"The uploaded data did not match the data from the server.\\n    As a precaution, the file has been deleted.\\n    To be sure the content is the same, you should try uploading the file again.\";\n    FileExceptionMessages[\"MD5_RESUMED_UPLOAD\"] = \"MD5 cannot be used with a continued resumable upload as MD5 cannot be extended from an existing value\";\n    FileExceptionMessages[\"MISSING_RESUME_CRC32C_FINAL_UPLOAD\"] = \"The CRC32C is missing for the final portion of a resumed upload, which is required for validation. Please provide `resumeCRC32C` if validation is required, or disable `validation`.\";\n})(FileExceptionMessages || (FileExceptionMessages = {}));\n/**\n * A File object is created from your {@link Bucket} object using\n * {@link Bucket#file}.\n *\n * @class\n */\nclass File extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    /**\n     * Cloud Storage uses access control lists (ACLs) to manage object and\n     * bucket access. ACLs are the mechanism you use to share objects with other\n     * users and allow other users to access your buckets and objects.\n     *\n     * An ACL consists of one or more entries, where each entry grants permissions\n     * to an entity. Permissions define the actions that can be performed against\n     * an object or bucket (for example, `READ` or `WRITE`); the entity defines\n     * who the permission applies to (for example, a specific user or group of\n     * users).\n     *\n     * The `acl` object on a File instance provides methods to get you a list of\n     * the ACLs defined on your bucket, as well as set, update, and delete them.\n     *\n     * See {@link http://goo.gl/6qBBPO| About Access Control lists}\n     *\n     * @name File#acl\n     * @mixes Acl\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * //-\n     * // Make a file publicly readable.\n     * //-\n     * const options = {\n     *   entity: 'allUsers',\n     *   role: storage.acl.READER_ROLE\n     * };\n     *\n     * file.acl.add(options, function(err, aclObject) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.acl.add(options).then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    /**\n     * The API-formatted resource description of the file.\n     *\n     * Note: This is not guaranteed to be up-to-date when accessed. To get the\n     * latest record, call the `getMetadata()` method.\n     *\n     * @name File#metadata\n     * @type {object}\n     */\n    /**\n     * The file's name.\n     * @name File#name\n     * @type {string}\n     */\n    /**\n     * @callback Crc32cGeneratorToStringCallback\n     * A method returning the CRC32C as a base64-encoded string.\n     *\n     * @returns {string}\n     *\n     * @example\n     * Hashing the string 'data' should return 'rth90Q=='\n     *\n     * ```js\n     * const buffer = Buffer.from('data');\n     * crc32c.update(buffer);\n     * crc32c.toString(); // 'rth90Q=='\n     * ```\n     **/\n    /**\n     * @callback Crc32cGeneratorValidateCallback\n     * A method validating a base64-encoded CRC32C string.\n     *\n     * @param {string} [value] base64-encoded CRC32C string to validate\n     * @returns {boolean}\n     *\n     * @example\n     * Should return `true` if the value matches, `false` otherwise\n     *\n     * ```js\n     * const buffer = Buffer.from('data');\n     * crc32c.update(buffer);\n     * crc32c.validate('DkjKuA=='); // false\n     * crc32c.validate('rth90Q=='); // true\n     * ```\n     **/\n    /**\n     * @callback Crc32cGeneratorUpdateCallback\n     * A method for passing `Buffer`s for CRC32C generation.\n     *\n     * @param {Buffer} [data] data to update CRC32C value with\n     * @returns {undefined}\n     *\n     * @example\n     * Hashing buffers from 'some ' and 'text\\n'\n     *\n     * ```js\n     * const buffer1 = Buffer.from('some ');\n     * crc32c.update(buffer1);\n     *\n     * const buffer2 = Buffer.from('text\\n');\n     * crc32c.update(buffer2);\n     *\n     * crc32c.toString(); // 'DkjKuA=='\n     * ```\n     **/\n    /**\n     * @typedef {object} CRC32CValidator\n     * @property {Crc32cGeneratorToStringCallback}\n     * @property {Crc32cGeneratorValidateCallback}\n     * @property {Crc32cGeneratorUpdateCallback}\n     */\n    /**\n     * @callback Crc32cGeneratorCallback\n     * @returns {CRC32CValidator}\n     */\n    /**\n     * @typedef {object} FileOptions Options passed to the File constructor.\n     * @property {string} [encryptionKey] A custom encryption key.\n     * @property {number} [generation] Generation to scope the file to.\n     * @property {string} [kmsKeyName] Cloud KMS Key used to encrypt this\n     *     object, if the object is encrypted by such a key. Limited availability;\n     *     usable only by enabled projects.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for all requests made from File object.\n     * @property {Crc32cGeneratorCallback} [callback] A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\n     */\n    /**\n     * Constructs a file object.\n     *\n     * @param {Bucket} bucket The Bucket instance this file is\n     *     attached to.\n     * @param {string} name The name of the remote file.\n     * @param {FileOptions} [options] Configuration options.\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * ```\n     */\n    constructor(bucket, name, options = {}) {\n        var _a, _b;\n        const requestQueryObject = {};\n        let generation;\n        if (options.generation !== null) {\n            if (typeof options.generation === 'string') {\n                generation = Number(options.generation);\n            }\n            else {\n                generation = options.generation;\n            }\n            if (!isNaN(generation)) {\n                requestQueryObject.generation = generation;\n            }\n        }\n        Object.assign(requestQueryObject, options.preconditionOpts);\n        const userProject = options.userProject || bucket.userProject;\n        if (typeof userProject === 'string') {\n            requestQueryObject.userProject = userProject;\n        }\n        const methods = {\n            /**\n             * @typedef {array} DeleteFileResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteFileCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Delete the file.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete| Objects: delete API Documentation}\n             *\n             * @method File#delete\n             * @param {object} [options] Configuration options.\n             * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\n             *     the file does not exist.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteFileCallback} [callback] Callback function.\n             * @returns {Promise<DeleteFileResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             * file.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/files.js</caption>\n             * region_tag:storage_delete_file\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} FileExistsResponse\n             * @property {boolean} 0 Whether the {@link File} exists.\n             */\n            /**\n             * @callback FileExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the {@link File} exists.\n             */\n            /**\n             * Check if the file exists.\n             *\n             * @method File#exists\n             * @param {options} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {FileExistsCallback} [callback] Callback function.\n             * @returns {Promise<FileExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             *\n             * file.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetFileResponse\n             * @property {File} 0 The {@link File}.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetFileCallback\n             * @param {?Error} err Request error, if any.\n             * @param {File} file The {@link File}.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get a file object and its metadata if it exists.\n             *\n             * @method File#get\n             * @param {options} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {number} [options.generation] The generation number to get\n             * @param {string} [options.restoreToken] If this is a soft-deleted object in an HNS-enabled bucket, returns the restore token which will\n             *    be necessary to restore it if there's a name conflict with another object.\n             * @param {boolean} [options.softDeleted] If true, returns the soft-deleted object.\n                  Object `generation` is required if `softDeleted` is set to True.\n             * @param {GetFileCallback} [callback] Callback function.\n             * @returns {Promise<GetFileResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             *\n             * file.get(function(err, file, apiResponse) {\n             *   // file.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.get().then(function(data) {\n             *   const file = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetFileMetadataResponse\n             * @property {object} 0 The {@link File} metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetFileMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The {@link File} metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get the file's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/get| Objects: get API Documentation}\n             *\n             * @method File#getMetadata\n             * @param {object} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetFileMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetFileMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             *\n             * file.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/files.js</caption>\n             * region_tag:storage_get_metadata\n             * Another example:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} SetFileMetadataOptions Configuration options for File#setMetadata().\n             * @param {string} [userProject] The ID of the project which will be billed for the request.\n             */\n            /**\n             * @callback SetFileMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} SetFileMetadataResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Merge the given metadata with the current remote file's metadata. This\n             * will set metadata if it was previously unset or update previously set\n             * metadata. To unset previously set metadata, set its value to null.\n             *\n             * You can set custom key/value pairs in the metadata key of the given\n             * object, however the other properties outside of this object must adhere\n             * to the {@link https://goo.gl/BOnnCK| official API documentation}.\n             *\n             *\n             * See the examples below for more information.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/patch| Objects: patch API Documentation}\n             *\n             * @method File#setMetadata\n             * @param {object} [metadata] The metadata you wish to update.\n             * @param {SetFileMetadataOptions} [options] Configuration options.\n             * @param {SetFileMetadataCallback} [callback] Callback function.\n             * @returns {Promise<SetFileMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             *\n             * const metadata = {\n             *   contentType: 'application/x-font-ttf',\n             *   metadata: {\n             *     my: 'custom',\n             *     properties: 'go here'\n             *   }\n             * };\n             *\n             * file.setMetadata(metadata, function(err, apiResponse) {});\n             *\n             * // Assuming current metadata = { hello: 'world', unsetMe: 'will do' }\n             * file.setMetadata({\n             *   metadata: {\n             *     abc: '123', // will be set.\n             *     unsetMe: null, // will be unset (deleted).\n             *     hello: 'goodbye' // will be updated from 'world' to 'goodbye'.\n             *   }\n             * }, function(err, apiResponse) {\n             *   // metadata should now be { abc: '123', hello: 'goodbye' }\n             * });\n             *\n             * //-\n             * // Set a temporary hold on this file from its bucket's retention period\n             * // configuration.\n             * //\n             * file.setMetadata({\n             *   temporaryHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Alternatively, you may set a temporary hold. This will follow the\n             * // same behavior as an event-based hold, with the exception that the\n             * // bucket's retention policy will not renew for this file from the time\n             * // the hold is released.\n             * //-\n             * file.setMetadata({\n             *   eventBasedHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.setMetadata(metadata).then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n        };\n        super({\n            parent: bucket,\n            baseUrl: '/o',\n            id: encodeURIComponent(name),\n            methods,\n        });\n        _File_instances.add(this);\n        this.bucket = bucket;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.storage = bucket.parent;\n        // @TODO Can this duplicate code from above be avoided?\n        if (options.generation !== null) {\n            let generation;\n            if (typeof options.generation === 'string') {\n                generation = Number(options.generation);\n            }\n            else {\n                generation = options.generation;\n            }\n            if (!isNaN(generation)) {\n                this.generation = generation;\n            }\n        }\n        this.kmsKeyName = options.kmsKeyName;\n        this.userProject = userProject;\n        this.name = name;\n        if (options.encryptionKey) {\n            this.setEncryptionKey(options.encryptionKey);\n        }\n        this.acl = new _acl_js__WEBPACK_IMPORTED_MODULE_10__.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/acl',\n        });\n        this.crc32cGenerator =\n            options.crc32cGenerator || this.bucket.crc32cGenerator;\n        this.instanceRetryValue = (_b = (_a = this.storage) === null || _a === void 0 ? void 0 : _a.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry;\n        this.instancePreconditionOpts = options === null || options === void 0 ? void 0 : options.preconditionOpts;\n    }\n    /**\n     * The object's Cloud Storage URI (`gs://`)\n     *\n     * @example\n     * ```ts\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const file = bucket.file('image.png');\n     *\n     * // `gs://my-bucket/image.png`\n     * const href = file.cloudStorageURI.href;\n     * ```\n     */\n    get cloudStorageURI() {\n        const uri = this.bucket.cloudStorageURI;\n        uri.pathname = this.name;\n        return uri;\n    }\n    /**\n     * A helper method for determining if a request should be retried based on preconditions.\n     * This should only be used for methods where the idempotency is determined by\n     * `ifGenerationMatch`\n     * @private\n     *\n     * A request should not be retried under the following conditions:\n     * - if precondition option `ifGenerationMatch` is not set OR\n     * - if `idempotencyStrategy` is set to `RetryNever`\n     */\n    shouldRetryBasedOnPreconditionAndIdempotencyStrat(options) {\n        var _a;\n        return !(((options === null || options === void 0 ? void 0 : options.ifGenerationMatch) === undefined &&\n            ((_a = this.instancePreconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryNever);\n    }\n    /**\n     * @typedef {array} CopyResponse\n     * @property {File} 0 The copied {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CopyCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} copiedFile The copied {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {object} CopyOptions Configuration options for File#copy(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @property {string} [cacheControl] The cacheControl setting for the new file.\n     * @property {string} [contentEncoding] The contentEncoding setting for the new file.\n     * @property {string} [contentType] The contentType setting for the new file.\n     * @property {string} [destinationKmsKeyName] Resource name of the Cloud\n     *     KMS key, of the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @property {Metadata} [metadata] Metadata to specify on the copied file.\n     * @property {string} [predefinedAcl] Set the ACL for the new file.\n     * @property {string} [token] A previously-returned `rewriteToken` from an\n     *     unfinished rewrite request.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Copy this file to another file. By default, this will copy the file to the\n     * same bucket, but you can choose to copy it to another Bucket by providing\n     * a Bucket or File object or a URL starting with \"gs://\".\n     * The generation of the file will not be preserved.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/rewrite| Objects: rewrite API Documentation}\n     *\n     * @throws {Error} If the destination file is not provided.\n     *\n     * @param {string|Bucket|File} destination Destination file.\n     * @param {CopyOptions} [options] Configuration options. See an\n     * @param {CopyCallback} [callback] Callback function.\n     * @returns {Promise<CopyResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * //-\n     * // You can pass in a variety of types for the destination.\n     * //\n     * // For all of the below examples, assume we are working with the following\n     * // Bucket and File objects.\n     * //-\n     * const bucket = storage.bucket('my-bucket');\n     * const file = bucket.file('my-image.png');\n     *\n     * //-\n     * // If you pass in a string for the destination, the file is copied to its\n     * // current bucket, under the new name provided.\n     * //-\n     * file.copy('my-image-copy.png', function(err, copiedFile, apiResponse) {\n     *   // `my-bucket` now contains:\n     *   // - \"my-image.png\"\n     *   // - \"my-image-copy.png\"\n     *\n     *   // `copiedFile` is an instance of a File object that refers to your new\n     *   // file.\n     * });\n     *\n     * //-\n     * // If you pass in a string starting with \"gs://\" for the destination, the\n     * // file is copied to the other bucket and under the new name provided.\n     * //-\n     * const newLocation = 'gs://another-bucket/my-image-copy.png';\n     * file.copy(newLocation, function(err, copiedFile, apiResponse) {\n     *   // `my-bucket` still contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-image-copy.png\"\n     *\n     *   // `copiedFile` is an instance of a File object that refers to your new\n     *   // file.\n     * });\n     *\n     * //-\n     * // If you pass in a Bucket object, the file will be copied to that bucket\n     * // using the same name.\n     * //-\n     * const anotherBucket = storage.bucket('another-bucket');\n     * file.copy(anotherBucket, function(err, copiedFile, apiResponse) {\n     *   // `my-bucket` still contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-image.png\"\n     *\n     *   // `copiedFile` is an instance of a File object that refers to your new\n     *   // file.\n     * });\n     *\n     * //-\n     * // If you pass in a File object, you have complete control over the new\n     * // bucket and filename.\n     * //-\n     * const anotherFile = anotherBucket.file('my-awesome-image.png');\n     * file.copy(anotherFile, function(err, copiedFile, apiResponse) {\n     *   // `my-bucket` still contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-awesome-image.png\"\n     *\n     *   // Note:\n     *   // The `copiedFile` parameter is equal to `anotherFile`.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.copy(newLocation).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_copy_file\n     * Another example:\n     */\n    copy(destination, optionsOrCallback, callback) {\n        var _a, _b;\n        const noDestinationError = new Error(FileExceptionMessages.DESTINATION_NO_NAME);\n        if (!destination) {\n            throw noDestinationError;\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = { ...optionsOrCallback };\n        }\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        let destBucket;\n        let destName;\n        let newFile;\n        if (typeof destination === 'string') {\n            const parsedDestination = GS_URL_REGEXP.exec(destination);\n            if (parsedDestination !== null && parsedDestination.length === 3) {\n                destBucket = this.storage.bucket(parsedDestination[1]);\n                destName = parsedDestination[2];\n            }\n            else {\n                destBucket = this.bucket;\n                destName = destination;\n            }\n        }\n        else if (destination instanceof _bucket_js__WEBPACK_IMPORTED_MODULE_9__.Bucket) {\n            destBucket = destination;\n            destName = this.name;\n        }\n        else if (destination instanceof File) {\n            destBucket = destination.bucket;\n            destName = destination.name;\n            newFile = destination;\n        }\n        else {\n            throw noDestinationError;\n        }\n        const query = {};\n        if (this.generation !== undefined) {\n            query.sourceGeneration = this.generation;\n        }\n        if (options.token !== undefined) {\n            query.rewriteToken = options.token;\n        }\n        if (options.userProject !== undefined) {\n            query.userProject = options.userProject;\n            delete options.userProject;\n        }\n        if (options.predefinedAcl !== undefined) {\n            query.destinationPredefinedAcl = options.predefinedAcl;\n            delete options.predefinedAcl;\n        }\n        newFile = newFile || destBucket.file(destName);\n        const headers = {};\n        if (this.encryptionKey !== undefined) {\n            headers['x-goog-copy-source-encryption-algorithm'] = 'AES256';\n            headers['x-goog-copy-source-encryption-key'] = this.encryptionKeyBase64;\n            headers['x-goog-copy-source-encryption-key-sha256'] =\n                this.encryptionKeyHash;\n        }\n        if (newFile.encryptionKey !== undefined) {\n            this.setEncryptionKey(newFile.encryptionKey);\n        }\n        else if (options.destinationKmsKeyName !== undefined) {\n            query.destinationKmsKeyName = options.destinationKmsKeyName;\n            delete options.destinationKmsKeyName;\n        }\n        else if (newFile.kmsKeyName !== undefined) {\n            query.destinationKmsKeyName = newFile.kmsKeyName;\n        }\n        if (query.destinationKmsKeyName) {\n            this.kmsKeyName = query.destinationKmsKeyName;\n            const keyIndex = this.interceptors.indexOf(this.encryptionKeyInterceptor);\n            if (keyIndex > -1) {\n                this.interceptors.splice(keyIndex, 1);\n            }\n        }\n        if (!this.shouldRetryBasedOnPreconditionAndIdempotencyStrat(options === null || options === void 0 ? void 0 : options.preconditionOpts)) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        if (((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) !== undefined) {\n            query.ifGenerationMatch = (_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch;\n            delete options.preconditionOpts;\n        }\n        this.request({\n            method: 'POST',\n            uri: `/rewriteTo/b/${destBucket.name}/o/${encodeURIComponent(newFile.name)}`,\n            qs: query,\n            json: options,\n            headers,\n        }, (err, resp) => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            if (resp.rewriteToken) {\n                const options = {\n                    token: resp.rewriteToken,\n                };\n                if (query.userProject) {\n                    options.userProject = query.userProject;\n                }\n                if (query.destinationKmsKeyName) {\n                    options.destinationKmsKeyName = query.destinationKmsKeyName;\n                }\n                this.copy(newFile, options, callback);\n                return;\n            }\n            callback(null, newFile, resp);\n        });\n    }\n    /**\n     * @typedef {object} CreateReadStreamOptions Configuration options for File#createReadStream.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with a\n     *     CRC32c checksum. You may use MD5 if preferred, but that hash is not\n     *     supported for composite objects. An error will be raised if MD5 is\n     *     specified but is not available. You may also choose to skip validation\n     *     completely, however this is **not recommended**.\n     * @property {number} [start] A byte offset to begin the file's download\n     *     from. Default is 0. NOTE: Byte ranges are inclusive; that is,\n     *     `options.start = 0` and `options.end = 999` represent the first 1000\n     *     bytes in a file or object. NOTE: when specifying a byte range, data\n     *     integrity is not available.\n     * @property {number} [end] A byte offset to stop reading the file at.\n     *     NOTE: Byte ranges are inclusive; that is, `options.start = 0` and\n     *     `options.end = 999` represent the first 1000 bytes in a file or object.\n     *     NOTE: when specifying a byte range, data integrity is not available.\n     * @property {boolean} [decompress=true] Disable auto decompression of the\n     *     received data. By default this option is set to `true`.\n     *     Applicable in cases where the data was uploaded with\n     *     `gzip: true` option. See {@link File#createWriteStream}.\n     */\n    /**\n     * Create a readable stream to read the contents of the remote file. It can be\n     * piped to a writable stream or listened to for 'data' events to read a\n     * file's contents.\n     *\n     * In the unlikely event there is a mismatch between what you downloaded and\n     * the version in your Bucket, your error handler will receive an error with\n     * code \"CONTENT_DOWNLOAD_MISMATCH\". If you receive this error, the best\n     * recourse is to try downloading the file again.\n     *\n     * NOTE: Readable streams will emit the `end` event when the file is fully\n     * downloaded.\n     *\n     * @param {CreateReadStreamOptions} [options] Configuration options.\n     * @returns {ReadableStream}\n     *\n     * @example\n     * ```\n     * //-\n     * // <h4>Downloading a File</h4>\n     * //\n     * // The example below demonstrates how we can reference a remote file, then\n     * // pipe its contents to a local file. This is effectively creating a local\n     * // backup of your remote data.\n     * //-\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const fs = require('fs');\n     * const remoteFile = bucket.file('image.png');\n     * const localFilename = '/Users/stephen/Photos/image.png';\n     *\n     * remoteFile.createReadStream()\n     *   .on('error', function(err) {})\n     *   .on('response', function(response) {\n     *     // Server connected and responded with the specified status and headers.\n     *    })\n     *   .on('end', function() {\n     *     // The file is fully downloaded.\n     *   })\n     *   .pipe(fs.createWriteStream(localFilename));\n     *\n     * //-\n     * // To limit the downloaded data to only a byte range, pass an options\n     * // object.\n     * //-\n     * const logFile = myBucket.file('access_log');\n     * logFile.createReadStream({\n     *     start: 10000,\n     *     end: 20000\n     *   })\n     *   .on('error', function(err) {})\n     *   .pipe(fs.createWriteStream('/Users/stephen/logfile.txt'));\n     *\n     * //-\n     * // To read a tail byte range, specify only `options.end` as a negative\n     * // number.\n     * //-\n     * const logFile = myBucket.file('access_log');\n     * logFile.createReadStream({\n     *     end: -100\n     *   })\n     *   .on('error', function(err) {})\n     *   .pipe(fs.createWriteStream('/Users/stephen/logfile.txt'));\n     * ```\n     */\n    createReadStream(options = {}) {\n        options = Object.assign({ decompress: true }, options);\n        const rangeRequest = typeof options.start === 'number' || typeof options.end === 'number';\n        const tailRequest = options.end < 0;\n        let validateStream = undefined;\n        let request = undefined;\n        const throughStream = new _util_js__WEBPACK_IMPORTED_MODULE_14__.PassThroughShim();\n        let crc32c = true;\n        let md5 = false;\n        if (typeof options.validation === 'string') {\n            const value = options.validation.toLowerCase().trim();\n            crc32c = value === 'crc32c';\n            md5 = value === 'md5';\n        }\n        else if (options.validation === false) {\n            crc32c = false;\n        }\n        const shouldRunValidation = !rangeRequest && (crc32c || md5);\n        if (rangeRequest) {\n            if (typeof options.validation === 'string' ||\n                options.validation === true) {\n                throw new Error(FileExceptionMessages.INVALID_VALIDATION_FILE_RANGE);\n            }\n            // Range requests can't receive data integrity checks.\n            crc32c = false;\n            md5 = false;\n        }\n        const onComplete = (err) => {\n            if (err) {\n                // There is an issue with node-fetch 2.x that if the stream errors the underlying socket connection is not closed.\n                // This causes a memory leak, so cleanup the sockets manually here by destroying the agent.\n                if (request === null || request === void 0 ? void 0 : request.agent) {\n                    request.agent.destroy();\n                }\n                throughStream.destroy(err);\n            }\n        };\n        // We listen to the response event from the request stream so that we\n        // can...\n        //\n        //   1) Intercept any data from going to the user if an error occurred.\n        //   2) Calculate the hashes from the http.IncomingMessage response\n        //   stream,\n        //      which will return the bytes from the source without decompressing\n        //      gzip'd content. We then send it through decompressed, if\n        //      applicable, to the user.\n        const onResponse = (err, _body, rawResponseStream) => {\n            if (err) {\n                // Get error message from the body.\n                this.getBufferFromReadable(rawResponseStream).then(body => {\n                    err.message = body.toString('utf8');\n                    throughStream.destroy(err);\n                });\n                return;\n            }\n            request = rawResponseStream.request;\n            const headers = rawResponseStream.toJSON().headers;\n            const isCompressed = headers['content-encoding'] === 'gzip';\n            const hashes = {};\n            // The object is safe to validate if:\n            // 1. It was stored gzip and returned to us gzip OR\n            // 2. It was never stored as gzip\n            const safeToValidate = (headers['x-goog-stored-content-encoding'] === 'gzip' &&\n                isCompressed) ||\n                headers['x-goog-stored-content-encoding'] === 'identity';\n            const transformStreams = [];\n            if (shouldRunValidation) {\n                // The x-goog-hash header should be set with a crc32c and md5 hash.\n                // ex: headers['x-goog-hash'] = 'crc32c=xxxx,md5=xxxx'\n                if (typeof headers['x-goog-hash'] === 'string') {\n                    headers['x-goog-hash']\n                        .split(',')\n                        .forEach((hashKeyValPair) => {\n                        const delimiterIndex = hashKeyValPair.indexOf('=');\n                        const hashType = hashKeyValPair.substring(0, delimiterIndex);\n                        const hashValue = hashKeyValPair.substring(delimiterIndex + 1);\n                        hashes[hashType] = hashValue;\n                    });\n                }\n                validateStream = new _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_16__.HashStreamValidator({\n                    crc32c,\n                    md5,\n                    crc32cGenerator: this.crc32cGenerator,\n                    crc32cExpected: hashes.crc32c,\n                    md5Expected: hashes.md5,\n                });\n            }\n            if (md5 && !hashes.md5) {\n                const hashError = new RequestError(FileExceptionMessages.MD5_NOT_AVAILABLE);\n                hashError.code = 'MD5_NOT_AVAILABLE';\n                throughStream.destroy(hashError);\n                return;\n            }\n            if (safeToValidate && shouldRunValidation && validateStream) {\n                transformStreams.push(validateStream);\n            }\n            if (isCompressed && options.decompress) {\n                transformStreams.push(zlib__WEBPACK_IMPORTED_MODULE_7__.createGunzip());\n            }\n            (0,stream__WEBPACK_IMPORTED_MODULE_6__.pipeline)(rawResponseStream, ...transformStreams, throughStream, onComplete);\n        };\n        // Authenticate the request, then pipe the remote API request to the stream\n        // returned to the user.\n        const makeRequest = () => {\n            const query = { alt: 'media' };\n            if (this.generation) {\n                query.generation = this.generation;\n            }\n            if (options.userProject) {\n                query.userProject = options.userProject;\n            }\n            const headers = {\n                'Accept-Encoding': 'gzip',\n                'Cache-Control': 'no-store',\n            };\n            if (rangeRequest) {\n                const start = typeof options.start === 'number' ? options.start : '0';\n                const end = typeof options.end === 'number' ? options.end : '';\n                headers.Range = `bytes=${tailRequest ? end : `${start}-${end}`}`;\n            }\n            const reqOpts = {\n                uri: '',\n                headers,\n                qs: query,\n            };\n            if (options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY]) {\n                reqOpts[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY] = options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY];\n            }\n            this.requestStream(reqOpts)\n                .on('error', err => {\n                throughStream.destroy(err);\n            })\n                .on('response', res => {\n                throughStream.emit('response', res);\n                _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.handleResp(null, res, null, onResponse);\n            })\n                .resume();\n        };\n        throughStream.on('reading', makeRequest);\n        return throughStream;\n    }\n    /**\n     * @callback CreateResumableUploadCallback\n     * @param {?Error} err Request error, if any.\n     * @param {string} uri The resumable upload's unique session URI.\n     */\n    /**\n     * @typedef {array} CreateResumableUploadResponse\n     * @property {string} 0 The resumable upload's unique session URI.\n     */\n    /**\n     * @typedef {object} CreateResumableUploadOptions\n     * @property {object} [metadata] Metadata to set on the file.\n     * @property {number} [offset] The starting byte of the upload stream for resuming an interrupted upload.\n     * @property {string} [origin] Origin header to set for the upload.\n     * @property {string} [predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     *\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *   `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *   project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *   team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *   team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *   get `READER` access.\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string} [chunkSize] Create a separate request per chunk. This\n     *     value is in bytes and should be a multiple of 256 KiB (2^18).\n     *     {@link https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload| We recommend using at least 8 MiB for the chunk size.}\n     */\n    /**\n     * Create a unique resumable upload session URI. This is the first step when\n     * performing a resumable upload.\n     *\n     * See the {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload| Resumable upload guide}\n     * for more on how the entire process works.\n     *\n     * <h4>Note</h4>\n     *\n     * If you are just looking to perform a resumable upload without worrying\n     * about any of the details, see {@link File#createWriteStream}. Resumable\n     * uploads are performed by default.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload| Resumable upload guide}\n     *\n     * @param {CreateResumableUploadOptions} [options] Configuration options.\n     * @param {CreateResumableUploadCallback} [callback] Callback function.\n     * @returns {Promise<CreateResumableUploadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * file.createResumableUpload(function(err, uri) {\n     *   if (!err) {\n     *     // `uri` can be used to PUT data to.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.createResumableUpload().then(function(data) {\n     *   const uri = data[0];\n     * });\n     * ```\n     */\n    createResumableUpload(optionsOrCallback, callback) {\n        var _a, _b;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const retryOptions = this.storage.retryOptions;\n        if ((((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined &&\n            ((_b = this.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch) === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryNever) {\n            retryOptions.autoRetry = false;\n        }\n        _resumable_upload_js__WEBPACK_IMPORTED_MODULE_5__.createURI({\n            authClient: this.storage.authClient,\n            apiEndpoint: this.storage.apiEndpoint,\n            bucket: this.bucket.name,\n            customRequestOptions: this.getRequestInterceptors().reduce((reqOpts, interceptorFn) => interceptorFn(reqOpts), {}),\n            file: this.name,\n            generation: this.generation,\n            key: this.encryptionKey,\n            kmsKeyName: this.kmsKeyName,\n            metadata: options.metadata,\n            offset: options.offset,\n            origin: options.origin,\n            predefinedAcl: options.predefinedAcl,\n            private: options.private,\n            public: options.public,\n            userProject: options.userProject || this.userProject,\n            retryOptions: retryOptions,\n            params: (options === null || options === void 0 ? void 0 : options.preconditionOpts) || this.instancePreconditionOpts,\n            universeDomain: this.bucket.storage.universeDomain,\n            [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY]: options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY],\n        }, callback);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * @typedef {object} CreateWriteStreamOptions Configuration options for File#createWriteStream().\n     * @property {string} [contentType] Alias for\n     *     `options.metadata.contentType`. If set to `auto`, the file name is used\n     *     to determine the contentType.\n     * @property {string|boolean} [gzip] If true, automatically gzip the file.\n     *     If set to `auto`, the contentType is used to determine if the file\n     * should be gzipped. This will set `options.metadata.contentEncoding` to\n     * `gzip` if necessary.\n     * @property {object} [metadata] See the examples below or\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}\n     *     for more details.\n     * @property {number} [offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @property {string} [predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     *\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *   `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *   project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *   team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *   team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *   get `READER` access.\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @property {boolean} [resumable] Force a resumable upload. NOTE: When\n     *     working with streams, the file format and size is unknown until it's\n     *     completely consumed. Because of this, it's best for you to be explicit\n     *     for what makes sense given your input.\n     * @property {number} [timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @property {string} [uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with a\n     *     CRC32c checksum. You may use MD5 if preferred, but that hash is not\n     *     supported for composite objects. An error will be raised if MD5 is\n     *     specified but is not available. You may also choose to skip validation\n     *     completely, however this is **not recommended**. In addition to specifying\n     *     validation type, providing `metadata.crc32c` or `metadata.md5Hash` will\n     *     cause the server to perform validation in addition to client validation.\n     *     NOTE: Validation is automatically skipped for objects that were\n     *     uploaded using the `gzip` option and have already compressed content.\n     */\n    /**\n     * Create a writable stream to overwrite the contents of the file in your\n     * bucket.\n     *\n     * A File object can also be used to create files for the first time.\n     *\n     * Resumable uploads are automatically enabled and must be shut off explicitly\n     * by setting `options.resumable` to `false`.\n     *\n     *\n     * <p class=\"notice\">\n     *   There is some overhead when using a resumable upload that can cause\n     *   noticeable performance degradation while uploading a series of small\n     *   files. When uploading files less than 10MB, it is recommended that the\n     *   resumable feature is disabled.\n     * </p>\n     *\n     * NOTE: Writable streams will emit the `finish` event when the file is fully\n     * uploaded.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload Upload Options (Simple or Resumable)}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert Objects: insert API Documentation}\n     *\n     * @param {CreateWriteStreamOptions} [options] Configuration options.\n     * @returns {WritableStream}\n     *\n     * @example\n     * ```\n     * const fs = require('fs');\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // <h4>Uploading a File</h4>\n     * //\n     * // Now, consider a case where we want to upload a file to your bucket. You\n     * // have the option of using {@link Bucket#upload}, but that is just\n     * // a convenience method which will do the following.\n     * //-\n     * fs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n     *   .pipe(file.createWriteStream())\n     *   .on('error', function(err) {})\n     *   .on('finish', function() {\n     *     // The file upload is complete.\n     *   });\n     *\n     * //-\n     * // <h4>Uploading a File with gzip compression</h4>\n     * //-\n     * fs.createReadStream('/Users/stephen/site/index.html')\n     *   .pipe(file.createWriteStream({ gzip: true }))\n     *   .on('error', function(err) {})\n     *   .on('finish', function() {\n     *     // The file upload is complete.\n     *   });\n     *\n     * //-\n     * // Downloading the file with `createReadStream` will automatically decode\n     * // the file.\n     * //-\n     *\n     * //-\n     * // <h4>Uploading a File with Metadata</h4>\n     * //\n     * // One last case you may run into is when you want to upload a file to your\n     * // bucket and set its metadata at the same time. Like above, you can use\n     * // {@link Bucket#upload} to do this, which is just a wrapper around\n     * // the following.\n     * //-\n     * fs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n     *   .pipe(file.createWriteStream({\n     *     metadata: {\n     *       contentType: 'image/jpeg',\n     *       metadata: {\n     *         custom: 'metadata'\n     *       }\n     *     }\n     *   }))\n     *   .on('error', function(err) {})\n     *   .on('finish', function() {\n     *     // The file upload is complete.\n     *   });\n     * ```\n     *\n     * //-\n     * // <h4>Continuing a Resumable Upload</h4>\n     * //\n     * // One can capture a `uri` from a resumable upload to reuse later.\n     * // Additionally, for validation, one can also capture and pass `crc32c`.\n     * //-\n     * let uri: string | undefined = undefined;\n     * let resumeCRC32C: string | undefined = undefined;\n     *\n     * fs.createWriteStream()\n     *   .on('uri', link => {uri = link})\n     *   .on('crc32', crc32c => {resumeCRC32C = crc32c});\n     *\n     * // later...\n     * fs.createWriteStream({uri, resumeCRC32C});\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    createWriteStream(options = {}) {\n        var _a;\n        (_a = options.metadata) !== null && _a !== void 0 ? _a : (options.metadata = {});\n        if (options.contentType) {\n            options.metadata.contentType = options.contentType;\n        }\n        if (!options.metadata.contentType ||\n            options.metadata.contentType === 'auto') {\n            const detectedContentType = mime__WEBPACK_IMPORTED_MODULE_4__.getType(this.name);\n            if (detectedContentType) {\n                options.metadata.contentType = detectedContentType;\n            }\n        }\n        let gzip = options.gzip;\n        if (gzip === 'auto') {\n            gzip = COMPRESSIBLE_MIME_REGEX.test(options.metadata.contentType || '');\n        }\n        if (gzip) {\n            options.metadata.contentEncoding = 'gzip';\n        }\n        let crc32c = true;\n        let md5 = false;\n        if (typeof options.validation === 'string') {\n            options.validation = options.validation.toLowerCase();\n            crc32c = options.validation === 'crc32c';\n            md5 = options.validation === 'md5';\n        }\n        else if (options.validation === false) {\n            crc32c = false;\n            md5 = false;\n        }\n        if (options.offset) {\n            if (md5) {\n                throw new RangeError(FileExceptionMessages.MD5_RESUMED_UPLOAD);\n            }\n            if (crc32c && !options.isPartialUpload && !options.resumeCRC32C) {\n                throw new RangeError(FileExceptionMessages.MISSING_RESUME_CRC32C_FINAL_UPLOAD);\n            }\n        }\n        /**\n         * A callback for determining when the underlying pipeline is complete.\n         * It's possible the pipeline callback could error before the write stream\n         * calls `final` so by default this will destroy the write stream unless the\n         * write stream sets this callback via its `final` handler.\n         * @param error An optional error\n         */\n        let pipelineCallback = error => {\n            writeStream.destroy(error || undefined);\n        };\n        // A stream for consumer to write to\n        const writeStream = new stream__WEBPACK_IMPORTED_MODULE_6__.Writable({\n            final(cb) {\n                // Set the pipeline callback to this callback so the pipeline's results\n                // can be populated to the consumer\n                pipelineCallback = cb;\n                emitStream.end();\n            },\n            write(chunk, encoding, cb) {\n                emitStream.write(chunk, encoding, cb);\n            },\n        });\n        // If the write stream, which is returned to the caller, catches an error we need to make sure that\n        // at least one of the streams in the pipeline below gets notified so that they\n        // all get cleaned up / destroyed.\n        writeStream.once('error', e => {\n            emitStream.destroy(e);\n        });\n        // If the write stream is closed, cleanup the pipeline below by calling destroy on one of the streams.\n        writeStream.once('close', () => {\n            emitStream.destroy();\n        });\n        const transformStreams = [];\n        if (gzip) {\n            transformStreams.push(zlib__WEBPACK_IMPORTED_MODULE_7__.createGzip());\n        }\n        const emitStream = new _util_js__WEBPACK_IMPORTED_MODULE_14__.PassThroughShim();\n        let hashCalculatingStream = null;\n        if (crc32c || md5) {\n            const crc32cInstance = options.resumeCRC32C\n                ? _crc32c_js__WEBPACK_IMPORTED_MODULE_15__.CRC32C.from(options.resumeCRC32C)\n                : undefined;\n            hashCalculatingStream = new _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_16__.HashStreamValidator({\n                crc32c,\n                crc32cInstance,\n                md5,\n                crc32cGenerator: this.crc32cGenerator,\n                updateHashesOnly: true,\n            });\n            transformStreams.push(hashCalculatingStream);\n        }\n        const fileWriteStream = duplexify__WEBPACK_IMPORTED_MODULE_13__();\n        let fileWriteStreamMetadataReceived = false;\n        // Handing off emitted events to users\n        emitStream.on('reading', () => writeStream.emit('reading'));\n        emitStream.on('writing', () => writeStream.emit('writing'));\n        fileWriteStream.on('uri', evt => writeStream.emit('uri', evt));\n        fileWriteStream.on('progress', evt => writeStream.emit('progress', evt));\n        fileWriteStream.on('response', resp => writeStream.emit('response', resp));\n        fileWriteStream.once('metadata', () => {\n            fileWriteStreamMetadataReceived = true;\n        });\n        writeStream.once('writing', () => {\n            if (options.resumable === false) {\n                this.startSimpleUpload_(fileWriteStream, options);\n            }\n            else {\n                this.startResumableUpload_(fileWriteStream, options);\n            }\n            (0,stream__WEBPACK_IMPORTED_MODULE_6__.pipeline)(emitStream, ...transformStreams, fileWriteStream, async (e) => {\n                if (e) {\n                    return pipelineCallback(e);\n                }\n                // We want to make sure we've received the metadata from the server in order\n                // to properly validate the object's integrity. Depending on the type of upload,\n                // the stream could close before the response is returned.\n                if (!fileWriteStreamMetadataReceived) {\n                    try {\n                        await new Promise((resolve, reject) => {\n                            fileWriteStream.once('metadata', resolve);\n                            fileWriteStream.once('error', reject);\n                        });\n                    }\n                    catch (e) {\n                        return pipelineCallback(e);\n                    }\n                }\n                // Emit the local CRC32C value for future validation, if validation is enabled.\n                if (hashCalculatingStream === null || hashCalculatingStream === void 0 ? void 0 : hashCalculatingStream.crc32c) {\n                    writeStream.emit('crc32c', hashCalculatingStream.crc32c);\n                }\n                try {\n                    // Metadata may not be ready if the upload is a partial upload,\n                    // nothing to validate yet.\n                    const metadataNotReady = options.isPartialUpload && !this.metadata;\n                    if (hashCalculatingStream && !metadataNotReady) {\n                        await __classPrivateFieldGet(this, _File_instances, \"m\", _File_validateIntegrity).call(this, hashCalculatingStream, {\n                            crc32c,\n                            md5,\n                        });\n                    }\n                    pipelineCallback();\n                }\n                catch (e) {\n                    pipelineCallback(e);\n                }\n            });\n        });\n        return writeStream;\n    }\n    delete(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.delete, _bucket_js__WEBPACK_IMPORTED_MODULE_9__.AvailableServiceObjectMethods.delete, options);\n        super\n            .delete(options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n    /**\n     * @typedef {array} DownloadResponse\n     * @property [0] The contents of a File.\n     */\n    /**\n     * @callback DownloadCallback\n     * @param err Request error, if any.\n     * @param contents The contents of a File.\n     */\n    /**\n     * Convenience method to download a file into memory or to a local\n     * destination.\n     *\n     * @param {object} [options] Configuration options. The arguments match those\n     *     passed to {@link File#createReadStream}.\n     * @param {string} [options.destination] Local file path to write the file's\n     *     contents to.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {DownloadCallback} [callback] Callback function.\n     * @returns {Promise<DownloadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // Download a file into memory. The contents will be available as the\n     * second\n     * // argument in the demonstration below, `contents`.\n     * //-\n     * file.download(function(err, contents) {});\n     *\n     * //-\n     * // Download a file to a local destination.\n     * //-\n     * file.download({\n     *   destination: '/Users/me/Desktop/file-backup.txt'\n     * }, function(err) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.download().then(function(data) {\n     *   const contents = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_download_file\n     * Another example:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_download_encrypted_file\n     * Example of downloading an encrypted file:\n     *\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_download_file_requester_pays\n     * Example of downloading a file where the requester pays:\n     */\n    download(optionsOrCallback, cb) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            cb = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        let called = false;\n        const callback = ((...args) => {\n            if (!called)\n                cb(...args);\n            called = true;\n        });\n        const destination = options.destination;\n        delete options.destination;\n        const fileStream = this.createReadStream(options);\n        let receivedData = false;\n        if (destination) {\n            fileStream\n                .on('error', callback)\n                .once('data', data => {\n                receivedData = true;\n                // We know that the file exists the server - now we can truncate/write to a file\n                const writable = fs__WEBPACK_IMPORTED_MODULE_3__.createWriteStream(destination);\n                writable.write(data);\n                fileStream\n                    .pipe(writable)\n                    .on('error', (err) => {\n                    callback(err, Buffer.from(''));\n                })\n                    .on('finish', () => {\n                    callback(null, data);\n                });\n            })\n                .on('end', () => {\n                // In the case of an empty file no data will be received before the end event fires\n                if (!receivedData) {\n                    const data = Buffer.alloc(0);\n                    try {\n                        fs__WEBPACK_IMPORTED_MODULE_3__.writeFileSync(destination, data);\n                        callback(null, data);\n                    }\n                    catch (e) {\n                        callback(e, data);\n                    }\n                }\n            });\n        }\n        else {\n            this.getBufferFromReadable(fileStream)\n                .then(contents => callback === null || callback === void 0 ? void 0 : callback(null, contents))\n                .catch(callback);\n        }\n    }\n    /**\n     * The Storage API allows you to use a custom key for server-side encryption.\n     *\n     * See {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}\n     *\n     * @param {string|buffer} encryptionKey An AES-256 encryption key.\n     * @returns {File}\n     *\n     * @example\n     * ```\n     * const crypto = require('crypto');\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const encryptionKey = crypto.randomBytes(32);\n     *\n     * const fileWithCustomEncryption = myBucket.file('my-file');\n     * fileWithCustomEncryption.setEncryptionKey(encryptionKey);\n     *\n     * const fileWithoutCustomEncryption = myBucket.file('my-file');\n     *\n     * fileWithCustomEncryption.save('data', function(err) {\n     *   // Try to download with the File object that hasn't had\n     *   // `setEncryptionKey()` called:\n     *   fileWithoutCustomEncryption.download(function(err) {\n     *     // We will receive an error:\n     *     //   err.message === 'Bad Request'\n     *\n     *     // Try again with the File object we called `setEncryptionKey()` on:\n     *     fileWithCustomEncryption.download(function(err, contents) {\n     *       // contents.toString() === 'data'\n     *     });\n     *   });\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_upload_encrypted_file\n     * Example of uploading an encrypted file:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_download_encrypted_file\n     * Example of downloading an encrypted file:\n     */\n    setEncryptionKey(encryptionKey) {\n        this.encryptionKey = encryptionKey;\n        this.encryptionKeyBase64 = Buffer.from(encryptionKey).toString('base64');\n        this.encryptionKeyHash = crypto__WEBPACK_IMPORTED_MODULE_2__.createHash('sha256')\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .update(this.encryptionKeyBase64, 'base64')\n            .digest('base64');\n        this.encryptionKeyInterceptor = {\n            request: reqOpts => {\n                reqOpts.headers = reqOpts.headers || {};\n                reqOpts.headers['x-goog-encryption-algorithm'] = 'AES256';\n                reqOpts.headers['x-goog-encryption-key'] = this.encryptionKeyBase64;\n                reqOpts.headers['x-goog-encryption-key-sha256'] =\n                    this.encryptionKeyHash;\n                return reqOpts;\n            },\n        };\n        this.interceptors.push(this.encryptionKeyInterceptor);\n        return this;\n    }\n    /**\n     * Gets a reference to a Cloud Storage {@link File} file from the provided URL in string format.\n     * @param {string} publicUrlOrGsUrl the URL as a string. Must be of the format gs://bucket/file\n     *  or https://storage.googleapis.com/bucket/file.\n     * @param {Storage} storageInstance an instance of a Storage object.\n     * @param {FileOptions} [options] Configuration options\n     * @returns {File}\n     */\n    static from(publicUrlOrGsUrl, storageInstance, options) {\n        const gsMatches = [...publicUrlOrGsUrl.matchAll(GS_UTIL_URL_REGEX)];\n        const httpsMatches = [...publicUrlOrGsUrl.matchAll(HTTPS_PUBLIC_URL_REGEX)];\n        if (gsMatches.length > 0) {\n            const bucket = new _bucket_js__WEBPACK_IMPORTED_MODULE_9__.Bucket(storageInstance, gsMatches[0][2]);\n            return new File(bucket, gsMatches[0][3], options);\n        }\n        else if (httpsMatches.length > 0) {\n            const bucket = new _bucket_js__WEBPACK_IMPORTED_MODULE_9__.Bucket(storageInstance, httpsMatches[0][3]);\n            return new File(bucket, httpsMatches[0][4], options);\n        }\n        else {\n            throw new Error('URL string must be of format gs://bucket/file or https://storage.googleapis.com/bucket/file');\n        }\n    }\n    get(optionsOrCallback, cb) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        super\n            .get(options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb);\n    }\n    /**\n     * @typedef {array} GetExpirationDateResponse\n     * @property {date} 0 A Date object representing the earliest time this file's\n     *     retention policy will expire.\n     */\n    /**\n     * @callback GetExpirationDateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {date} expirationDate A Date object representing the earliest time\n     *     this file's retention policy will expire.\n     */\n    /**\n     * If this bucket has a retention policy defined, use this method to get a\n     * Date object representing the earliest time this file will expire.\n     *\n     * @param {GetExpirationDateCallback} [callback] Callback function.\n     * @returns {Promise<GetExpirationDateResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * file.getExpirationDate(function(err, expirationDate) {\n     *   // expirationDate is a Date object.\n     * });\n     * ```\n     */\n    getExpirationDate(callback) {\n        this.getMetadata((err, metadata, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            if (!metadata.retentionExpirationTime) {\n                const error = new Error(FileExceptionMessages.EXPIRATION_TIME_NA);\n                callback(error, null, apiResponse);\n                return;\n            }\n            callback(null, new Date(metadata.retentionExpirationTime), apiResponse);\n        });\n    }\n    /**\n     * @typedef {array} GenerateSignedPostPolicyV2Response\n     * @property {object} 0 The document policy.\n     */\n    /**\n     * @callback GenerateSignedPostPolicyV2Callback\n     * @param {?Error} err Request error, if any.\n     * @param {object} policy The document policy.\n     */\n    /**\n     * Get a signed policy document to allow a user to upload data with a POST\n     * request.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed policy. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/xml-api/post-object-v2| POST Object with the V2 signing process}\n     *\n     * @throws {Error} If an expiration timestamp from the past is given.\n     * @throws {Error} If options.equals has an array with less or more than two\n     *     members.\n     * @throws {Error} If options.startsWith has an array with less or more than two\n     *     members.\n     *\n     * @param {object} options Configuration options.\n     * @param {array|array[]} [options.equals] Array of request parameters and\n     *     their expected value (e.g. [['$<field>', '<value>']]). Values are\n     *     translated into equality constraints in the conditions field of the\n     *     policy document (e.g. ['eq', '$<field>', '<value>']). If only one\n     *     equality condition is to be specified, options.equals can be a one-\n     *     dimensional array (e.g. ['$<field>', '<value>']).\n     * @param {*} options.expires - A timestamp when this policy will expire. Any\n     *     value given is passed to `new Date()`.\n     * @param {array|array[]} [options.startsWith] Array of request parameters and\n     *     their expected prefixes (e.g. [['$<field>', '<value>']). Values are\n     *     translated into starts-with constraints in the conditions field of the\n     *     policy document (e.g. ['starts-with', '$<field>', '<value>']). If only\n     *     one prefix condition is to be specified, options.startsWith can be a\n     * one- dimensional array (e.g. ['$<field>', '<value>']).\n     * @param {string} [options.acl] ACL for the object from possibly predefined\n     *     ACLs.\n     * @param {string} [options.successRedirect] The URL to which the user client\n     *     is redirected if the upload is successful.\n     * @param {string} [options.successStatus] - The status of the Google Storage\n     *     response if the upload is successful (must be string).\n     * @param {object} [options.contentLengthRange]\n     * @param {number} [options.contentLengthRange.min] Minimum value for the\n     *     request's content length.\n     * @param {number} [options.contentLengthRange.max] Maximum value for the\n     *     request's content length.\n     * @param {GenerateSignedPostPolicyV2Callback} [callback] Callback function.\n     * @returns {Promise<GenerateSignedPostPolicyV2Response>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * const options = {\n     *   equals: ['$Content-Type', 'image/jpeg'],\n     *   expires: '10-25-2022',\n     *   contentLengthRange: {\n     *     min: 0,\n     *     max: 1024\n     *   }\n     * };\n     *\n     * file.generateSignedPostPolicyV2(options, function(err, policy) {\n     *   // policy.string: the policy document in plain text.\n     *   // policy.base64: the policy document in base64.\n     *   // policy.signature: the policy signature in base64.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.generateSignedPostPolicyV2(options).then(function(data) {\n     *   const policy = data[0];\n     * });\n     * ```\n     */\n    generateSignedPostPolicyV2(optionsOrCallback, cb) {\n        const args = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.normalize)(optionsOrCallback, cb);\n        let options = args.options;\n        const callback = args.callback;\n        const expires = new Date(options.expires);\n        if (isNaN(expires.getTime())) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_8__.ExceptionMessages.EXPIRATION_DATE_INVALID);\n        }\n        if (expires.valueOf() < Date.now()) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_8__.ExceptionMessages.EXPIRATION_DATE_PAST);\n        }\n        options = Object.assign({}, options);\n        const conditions = [\n            ['eq', '$key', this.name],\n            {\n                bucket: this.bucket.name,\n            },\n        ];\n        if (Array.isArray(options.equals)) {\n            if (!Array.isArray(options.equals[0])) {\n                options.equals = [options.equals];\n            }\n            options.equals.forEach(condition => {\n                if (!Array.isArray(condition) || condition.length !== 2) {\n                    throw new Error(FileExceptionMessages.EQUALS_CONDITION_TWO_ELEMENTS);\n                }\n                conditions.push(['eq', condition[0], condition[1]]);\n            });\n        }\n        if (Array.isArray(options.startsWith)) {\n            if (!Array.isArray(options.startsWith[0])) {\n                options.startsWith = [options.startsWith];\n            }\n            options.startsWith.forEach(condition => {\n                if (!Array.isArray(condition) || condition.length !== 2) {\n                    throw new Error(FileExceptionMessages.STARTS_WITH_TWO_ELEMENTS);\n                }\n                conditions.push(['starts-with', condition[0], condition[1]]);\n            });\n        }\n        if (options.acl) {\n            conditions.push({\n                acl: options.acl,\n            });\n        }\n        if (options.successRedirect) {\n            conditions.push({\n                success_action_redirect: options.successRedirect,\n            });\n        }\n        if (options.successStatus) {\n            conditions.push({\n                success_action_status: options.successStatus,\n            });\n        }\n        if (options.contentLengthRange) {\n            const min = options.contentLengthRange.min;\n            const max = options.contentLengthRange.max;\n            if (typeof min !== 'number' || typeof max !== 'number') {\n                throw new Error(FileExceptionMessages.CONTENT_LENGTH_RANGE_MIN_MAX);\n            }\n            conditions.push(['content-length-range', min, max]);\n        }\n        const policy = {\n            expiration: expires.toISOString(),\n            conditions,\n        };\n        const policyString = JSON.stringify(policy);\n        const policyBase64 = Buffer.from(policyString).toString('base64');\n        this.storage.authClient.sign(policyBase64, options.signingEndpoint).then(signature => {\n            callback(null, {\n                string: policyString,\n                base64: policyBase64,\n                signature,\n            });\n        }, err => {\n            callback(new _signer_js__WEBPACK_IMPORTED_MODULE_11__.SigningError(err.message));\n        });\n    }\n    /**\n     * @typedef {object} SignedPostPolicyV4Output\n     * @property {string} url The request URL.\n     * @property {object} fields The form fields to include in the POST request.\n     */\n    /**\n     * @typedef {array} GenerateSignedPostPolicyV4Response\n     * @property {SignedPostPolicyV4Output} 0 An object containing the request URL and form fields.\n     */\n    /**\n     * @callback GenerateSignedPostPolicyV4Callback\n     * @param {?Error} err Request error, if any.\n     * @param {SignedPostPolicyV4Output} output An object containing the request URL and form fields.\n     */\n    /**\n     * Get a v4 signed policy document to allow a user to upload data with a POST\n     * request.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed policy. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/xml-api/post-object#policydocument| Policy Document Reference}\n     *\n     * @param {object} options Configuration options.\n     * @param {Date|number|string} options.expires - A timestamp when this policy will expire. Any\n     *     value given is passed to `new Date()`.\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instead of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @param {string} [config.bucketBoundHostname] The bucket-bound hostname to return in\n     *     the result, e.g. \"https://cdn.example.com\".\n     * @param {object} [config.fields] [Form fields]{@link https://cloud.google.com/storage/docs/xml-api/post-object#policydocument}\n     *     to include in the signed policy. Any fields with key beginning with 'x-ignore-'\n     *     will not be included in the policy to be signed.\n     * @param {object[]} [config.conditions] [Conditions]{@link https://cloud.google.com/storage/docs/authentication/signatures#policy-document}\n     *     to include in the signed policy. All fields given in `config.fields` are\n     *     automatically included in the conditions array, adding the same entry\n     *     in both `fields` and `conditions` will result in duplicate entries.\n     *\n     * @param {GenerateSignedPostPolicyV4Callback} [callback] Callback function.\n     * @returns {Promise<GenerateSignedPostPolicyV4Response>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * const options = {\n     *   expires: '10-25-2022',\n     *   conditions: [\n     *     ['eq', '$Content-Type', 'image/jpeg'],\n     *     ['content-length-range', 0, 1024],\n     *   ],\n     *   fields: {\n     *     acl: 'public-read',\n     *     'x-goog-meta-foo': 'bar',\n     *     'x-ignore-mykey': 'data'\n     *   }\n     * };\n     *\n     * file.generateSignedPostPolicyV4(options, function(err, response) {\n     *   // response.url The request URL\n     *   // response.fields The form fields (including the signature) to include\n     *   //     to be used to upload objects by HTML forms.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.generateSignedPostPolicyV4(options).then(function(data) {\n     *   const response = data[0];\n     *   // response.url The request URL\n     *   // response.fields The form fields (including the signature) to include\n     *   //     to be used to upload objects by HTML forms.\n     * });\n     * ```\n     */\n    generateSignedPostPolicyV4(optionsOrCallback, cb) {\n        const args = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.normalize)(optionsOrCallback, cb);\n        let options = args.options;\n        const callback = args.callback;\n        const expires = new Date(options.expires);\n        if (isNaN(expires.getTime())) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_8__.ExceptionMessages.EXPIRATION_DATE_INVALID);\n        }\n        if (expires.valueOf() < Date.now()) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_8__.ExceptionMessages.EXPIRATION_DATE_PAST);\n        }\n        if (expires.valueOf() - Date.now() > SEVEN_DAYS * 1000) {\n            throw new Error(`Max allowed expiration is seven days (${SEVEN_DAYS} seconds).`);\n        }\n        options = Object.assign({}, options);\n        let fields = Object.assign({}, options.fields);\n        const now = new Date();\n        const nowISO = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.formatAsUTCISO)(now, true);\n        const todayISO = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.formatAsUTCISO)(now);\n        const sign = async () => {\n            const { client_email } = await this.storage.authClient.getCredentials();\n            const credential = `${client_email}/${todayISO}/auto/storage/goog4_request`;\n            fields = {\n                ...fields,\n                bucket: this.bucket.name,\n                key: this.name,\n                'x-goog-date': nowISO,\n                'x-goog-credential': credential,\n                'x-goog-algorithm': 'GOOG4-RSA-SHA256',\n            };\n            const conditions = options.conditions || [];\n            Object.entries(fields).forEach(([key, value]) => {\n                if (!key.startsWith('x-ignore-')) {\n                    conditions.push({ [key]: value });\n                }\n            });\n            delete fields.bucket;\n            const expiration = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.formatAsUTCISO)(expires, true, '-', ':');\n            const policy = {\n                conditions,\n                expiration,\n            };\n            const policyString = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.unicodeJSONStringify)(policy);\n            const policyBase64 = Buffer.from(policyString).toString('base64');\n            try {\n                const signature = await this.storage.authClient.sign(policyBase64, options.signingEndpoint);\n                const signatureHex = Buffer.from(signature, 'base64').toString('hex');\n                const universe = this.parent.storage.universeDomain;\n                fields['policy'] = policyBase64;\n                fields['x-goog-signature'] = signatureHex;\n                let url;\n                if (this.storage.customEndpoint) {\n                    url = this.storage.apiEndpoint;\n                }\n                else if (options.virtualHostedStyle) {\n                    url = `https://${this.bucket.name}.storage.${universe}/`;\n                }\n                else if (options.bucketBoundHostname) {\n                    url = `${options.bucketBoundHostname}/`;\n                }\n                else {\n                    url = `https://storage.${universe}/${this.bucket.name}/`;\n                }\n                return {\n                    url,\n                    fields,\n                };\n            }\n            catch (err) {\n                throw new _signer_js__WEBPACK_IMPORTED_MODULE_11__.SigningError(err.message);\n            }\n        };\n        sign().then(res => callback(null, res), callback);\n    }\n    /**\n     * @typedef {array} GetSignedUrlResponse\n     * @property {object} 0 The signed URL.\n     */\n    /**\n     * @callback GetSignedUrlCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} url The signed URL.\n     */\n    /**\n     * Get a signed URL to allow limited time access to the file.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed URL. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/access-control/signed-urls| Signed URLs Reference}\n     *\n     * @throws {Error} if an expiration timestamp from the past is given.\n     *\n     * @param {object} config Configuration object.\n     * @param {string} config.action \"read\" (HTTP: GET), \"write\" (HTTP: PUT), or\n     *     \"delete\" (HTTP: DELETE), \"resumable\" (HTTP: POST).\n     *     When using \"resumable\", the header `X-Goog-Resumable: start` has\n     *     to be sent when making a request with the signed URL.\n     * @param {*} config.expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @param {string} [config.version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs (e.g. 'https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     (e.g. 'https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @param {string} [config.cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     * @param {string} [config.contentMd5] The MD5 digest value in base64. Just like\n     *     if you provide this, the client must provide this HTTP header with this same\n     *     value in its request, so to if this parameter is not provided here,\n     *     the client must not provide any value for this HTTP header in its request.\n     * @param {string} [config.contentType] Just like if you provide this, the client\n     *     must provide this HTTP header with this same value in its request, so to if\n     *     this parameter is not provided here, the client must not provide any value\n     *     for this HTTP header in its request.\n     * @param {object} [config.extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @param {object} [config.queryParams] Additional query parameters to include\n     *     in the signed URL.\n     * @param {string} [config.promptSaveAs] The filename to prompt the user to\n     *     save the file as when the signed url is accessed. This is ignored if\n     *     `config.responseDisposition` is set.\n     * @param {string} [config.responseDisposition] The\n     *     {@link http://goo.gl/yMWxQV| response-content-disposition parameter} of the\n     *     signed url.\n     * @param {*} [config.accessibleAt=Date.now()] A timestamp when this link became usable. Any value\n     *     given is passed to `new Date()`.\n     *     Note: Use for 'v4' only.\n     * @param {string} [config.responseType] The response-content-type parameter\n     *     of the signed url.\n     * @param {GetSignedUrlCallback} [callback] Callback function.\n     * @returns {Promise<GetSignedUrlResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // Generate a URL that allows temporary access to download your file.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'read',\n     *   expires: '03-17-2025',\n     * };\n     *\n     * file.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The file is now available to read from this URL.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // Generate a URL that allows temporary access to download your file.\n     * // Access will begin at accessibleAt and end at expires.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'read',\n     *   expires: '03-17-2025',\n     *   accessibleAt: '03-13-2025'\n     * };\n     *\n     * file.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The file will be available to read from this URL from 03-13-2025 to 03-17-2025.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // Generate a URL to allow write permissions. This means anyone with this\n     * URL\n     * // can send a POST request with new data that will overwrite the file.\n     * //-\n     * file.getSignedUrl({\n     *   action: 'write',\n     *   expires: '03-17-2025'\n     * }, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The file is now available to be written to.\n     *   const writeStream = request.put(url);\n     *   writeStream.end('New data');\n     *\n     *   writeStream.on('complete', function(resp) {\n     *     // Confirm the new content was saved.\n     *     file.download(function(err, fileContents) {\n     *       console.log('Contents:', fileContents.toString());\n     *       // Contents: New data\n     *     });\n     *   });\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.getSignedUrl(config).then(function(data) {\n     *   const url = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_generate_signed_url\n     * Another example:\n     */\n    getSignedUrl(cfg, callback) {\n        const method = ActionToHTTPMethod[cfg.action];\n        const extensionHeaders = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.objectKeyToLowercase)(cfg.extensionHeaders || {});\n        if (cfg.action === 'resumable') {\n            extensionHeaders['x-goog-resumable'] = 'start';\n        }\n        const queryParams = Object.assign({}, cfg.queryParams);\n        if (typeof cfg.responseType === 'string') {\n            queryParams['response-content-type'] = cfg.responseType;\n        }\n        if (typeof cfg.promptSaveAs === 'string') {\n            queryParams['response-content-disposition'] =\n                'attachment; filename=\"' + cfg.promptSaveAs + '\"';\n        }\n        if (typeof cfg.responseDisposition === 'string') {\n            queryParams['response-content-disposition'] = cfg.responseDisposition;\n        }\n        if (this.generation) {\n            queryParams['generation'] = this.generation.toString();\n        }\n        const signConfig = {\n            method,\n            expires: cfg.expires,\n            accessibleAt: cfg.accessibleAt,\n            extensionHeaders,\n            queryParams,\n            contentMd5: cfg.contentMd5,\n            contentType: cfg.contentType,\n            host: cfg.host,\n        };\n        if (cfg.cname) {\n            signConfig.cname = cfg.cname;\n        }\n        if (cfg.version) {\n            signConfig.version = cfg.version;\n        }\n        if (cfg.virtualHostedStyle) {\n            signConfig.virtualHostedStyle = cfg.virtualHostedStyle;\n        }\n        if (!this.signer) {\n            this.signer = new _signer_js__WEBPACK_IMPORTED_MODULE_11__.URLSigner(this.storage.authClient, this.bucket, this, this.storage);\n        }\n        this.signer\n            .getSignedUrl(signConfig)\n            .then(signedUrl => callback(null, signedUrl), callback);\n    }\n    /**\n     * @callback IsPublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {boolean} resp Whether file is public or not.\n     */\n    /**\n     * @typedef {array} IsPublicResponse\n     * @property {boolean} 0 Whether file is public or not.\n     */\n    /**\n     * Check whether this file is public or not by sending\n     * a HEAD request without credentials.\n     * No errors from the server indicates that the current\n     * file is public.\n     * A 403-Forbidden error {@link https://cloud.google.com/storage/docs/json_api/v1/status-codes#403_Forbidden}\n     * indicates that file is private.\n     * Any other non 403 error is propagated to user.\n     *\n     * @param {IsPublicCallback} [callback] Callback function.\n     * @returns {Promise<IsPublicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // Check whether the file is publicly accessible.\n     * //-\n     * file.isPublic(function(err, resp) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *   console.log(`the file ${file.id} is public: ${resp}`) ;\n     * })\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.isPublic().then(function(data) {\n     *   const resp = data[0];\n     * });\n     * ```\n     */\n    isPublic(callback) {\n        var _a;\n        // Build any custom headers based on the defined interceptors on the parent\n        // storage object and this object\n        const storageInterceptors = ((_a = this.storage) === null || _a === void 0 ? void 0 : _a.interceptors) || [];\n        const fileInterceptors = this.interceptors || [];\n        const allInterceptors = storageInterceptors.concat(fileInterceptors);\n        const headers = allInterceptors.reduce((acc, curInterceptor) => {\n            const currentHeaders = curInterceptor.request({\n                uri: `${this.storage.apiEndpoint}/${this.bucket.name}/${encodeURIComponent(this.name)}`,\n            });\n            Object.assign(acc, currentHeaders.headers);\n            return acc;\n        }, {});\n        _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.makeRequest({\n            method: 'GET',\n            uri: `${this.storage.apiEndpoint}/${this.bucket.name}/${encodeURIComponent(this.name)}`,\n            headers,\n        }, {\n            retryOptions: this.storage.retryOptions,\n        }, (err) => {\n            if (err) {\n                const apiError = err;\n                if (apiError.code === 403) {\n                    callback(null, false);\n                }\n                else {\n                    callback(err);\n                }\n            }\n            else {\n                callback(null, true);\n            }\n        });\n    }\n    /**\n     * @typedef {object} MakeFilePrivateOptions Configuration options for File#makePrivate().\n     * @property {Metadata} [metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @property {boolean} [strict] If true, set the file to be private to\n     *     only the owner user. Otherwise, it will be private to the project.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback MakeFilePrivateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} MakeFilePrivateResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * Make a file private to the project and remove all other permissions.\n     * Set `options.strict` to true to make the file private to only the owner.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/patch| Objects: patch API Documentation}\n     *\n     * @param {MakeFilePrivateOptions} [options] Configuration options.\n     * @param {MakeFilePrivateCallback} [callback] Callback function.\n     * @returns {Promise<MakeFilePrivateResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // Set the file private so only project maintainers can see and modify it.\n     * //-\n     * file.makePrivate(function(err) {});\n     *\n     * //-\n     * // Set the file private so only the owner can see and modify it.\n     * //-\n     * file.makePrivate({ strict: true }, function(err) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.makePrivate().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    makePrivate(optionsOrCallback, callback) {\n        var _a, _b;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const query = {\n            predefinedAcl: options.strict ? 'private' : 'projectPrivate',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        };\n        if (((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifMetagenerationMatch) !== undefined) {\n            query.ifMetagenerationMatch =\n                (_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch;\n            delete options.preconditionOpts;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        // You aren't allowed to set both predefinedAcl & acl properties on a file,\n        // so acl must explicitly be nullified, destroying all previous acls on the\n        // file.\n        const metadata = { ...options.metadata, acl: null };\n        this.setMetadata(metadata, query, callback);\n    }\n    /**\n     * @typedef {array} MakeFilePublicResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback MakeFilePublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Set a file to be publicly readable and maintain all previous permissions.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert| ObjectAccessControls: insert API Documentation}\n     *\n     * @param {MakeFilePublicCallback} [callback] Callback function.\n     * @returns {Promise<MakeFilePublicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * file.makePublic(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.makePublic().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_make_public\n     * Another example:\n     */\n    makePublic(callback) {\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.acl.add({\n            entity: 'allUsers',\n            role: 'READER',\n        }, (err, acl, resp) => {\n            callback(err, resp);\n        });\n    }\n    /**\n     * The public URL of this File\n     * Use {@link File#makePublic} to enable anonymous access via the returned URL.\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-file');\n     *\n     * // publicUrl will be \"https://storage.googleapis.com/albums/my-file\"\n     * const publicUrl = file.publicUrl();\n     * ```\n     */\n    publicUrl() {\n        return `${this.storage.apiEndpoint}/${this.bucket.name}/${encodeURIComponent(this.name)}`;\n    }\n    /**\n     * @typedef {array} MoveFileAtomicResponse\n     * @property {File} 0 The moved {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback MoveFileAtomicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} movedFile The moved {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {object} MoveFileAtomicOptions Configuration options for File#moveFileAtomic(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {object} [preconditionOpts] Precondition options.\n     * @property {number} [preconditionOpts.ifGenerationMatch] Makes the operation conditional on whether the object's current generation matches the given value.\n     */\n    /**\n     * Move this file within the same HNS-enabled bucket.\n     * The source object must exist and be a live object.\n     * The source and destination object IDs must be different.\n     * Overwriting the destination object is allowed by default, but can be prevented\n     * using preconditions.\n     * If the destination path includes non-existent parent folders, they will be created.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/move| Objects: move API Documentation}\n     *\n     * @throws {Error} If the destination file is not provided.\n     *\n     * @param {string|File} destination Destination file name or File object within the same bucket..\n     * @param {MoveFileAtomicOptions} [options] Configuration options. See an\n     * @param {MoveFileAtomicCallback} [callback] Callback function.\n     * @returns {Promise<MoveFileAtomicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * //-\n     * // Assume 'my-hns-bucket' is an HNS-enabled bucket.\n     * //-\n     * const bucket = storage.bucket('my-hns-bucket');\n     * const file = bucket.file('my-image.png');\n     *\n     * //-\n     * // If you pass in a string for the destination, the file is copied to its\n     * // current bucket, under the new name provided.\n     * //-\n     * file.moveFileAtomic('moved-image.png', function(err, movedFile, apiResponse) {\n     *   // `my-hns-bucket` now contains:\n     *   // - \"moved-image.png\"\n     *\n     *   // `movedFile` is an instance of a File object that refers to your new\n     *   // file.\n     * });\n     *\n     * //-\n     * // Move the file to a subdirectory, creating parent folders if necessary.\n     * //-\n     * file.moveFileAtomic('new-folder/subfolder/moved-image.png', function(err, movedFile, apiResponse) {\n     * // `my-hns-bucket` now contains:\n     * // - \"new-folder/subfolder/moved-image.png\"\n     * });\n     *\n     * //-\n     * // Prevent overwriting an existing destination object using preconditions.\n     * //-\n     * file.moveFileAtomic('existing-destination.png', {\n     * preconditionOpts: {\n     * ifGenerationMatch: 0 // Fails if the destination object exists.\n     * }\n     * }, function(err, movedFile, apiResponse) {\n     * if (err) {\n     * // Handle the error (e.g., the destination object already exists).\n     * } else {\n     * // Move successful.\n     * }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.moveFileAtomic('moved-image.png).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_move_file_hns\n     * Another example:\n     */\n    moveFileAtomic(destination, optionsOrCallback, callback) {\n        var _a, _b;\n        const noDestinationError = new Error(FileExceptionMessages.DESTINATION_NO_NAME);\n        if (!destination) {\n            throw noDestinationError;\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = { ...optionsOrCallback };\n        }\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        let destName;\n        let newFile;\n        if (typeof destination === 'string') {\n            const parsedDestination = GS_URL_REGEXP.exec(destination);\n            if (parsedDestination !== null && parsedDestination.length === 3) {\n                destName = parsedDestination[2];\n            }\n            else {\n                destName = destination;\n            }\n        }\n        else if (destination instanceof File) {\n            destName = destination.name;\n            newFile = destination;\n        }\n        else {\n            throw noDestinationError;\n        }\n        newFile = newFile || this.bucket.file(destName);\n        if (!this.shouldRetryBasedOnPreconditionAndIdempotencyStrat(options === null || options === void 0 ? void 0 : options.preconditionOpts)) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        const query = {};\n        if (options.userProject !== undefined) {\n            query.userProject = options.userProject;\n            delete options.userProject;\n        }\n        if (((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) !== undefined) {\n            query.ifGenerationMatch = (_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch;\n            delete options.preconditionOpts;\n        }\n        this.request({\n            method: 'POST',\n            uri: `/moveTo/o/${encodeURIComponent(newFile.name)}`,\n            qs: query,\n            json: options,\n        }, (err, resp) => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, newFile, resp);\n        });\n    }\n    /**\n     * @typedef {array} MoveResponse\n     * @property {File} 0 The destination File.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback MoveCallback\n     * @param {?Error} err Request error, if any.\n     * @param {?File} destinationFile The destination File.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {object} MoveOptions Configuration options for File#move(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Move this file to another location. By default, this will rename the file\n     * and keep it in the same bucket, but you can choose to move it to another\n     * Bucket by providing a Bucket or File object or a URL beginning with\n     * \"gs://\".\n     *\n     * **Warning**:\n     * There is currently no atomic `move` method in the Cloud Storage API,\n     * so this method is a composition of {@link File#copy} (to the new\n     * location) and {@link File#delete} (from the old location). While\n     * unlikely, it is possible that an error returned to your callback could be\n     * triggered from either one of these API calls failing, which could leave a\n     * duplicate file lingering. The error message will indicate what operation\n     * has failed.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/copy| Objects: copy API Documentation}\n     *\n     * @throws {Error} If the destination file is not provided.\n     *\n     * @param {string|Bucket|File} destination Destination file.\n     * @param {MoveCallback} [callback] Callback function.\n     * @returns {Promise<MoveResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * //-\n     * // You can pass in a variety of types for the destination.\n     * //\n     * // For all of the below examples, assume we are working with the following\n     * // Bucket and File objects.\n     * //-\n     * const bucket = storage.bucket('my-bucket');\n     * const file = bucket.file('my-image.png');\n     *\n     * //-\n     * // If you pass in a string for the destination, the file is moved to its\n     * // current bucket, under the new name provided.\n     * //-\n     * file.move('my-image-new.png', function(err, destinationFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   // but contains instead:\n     *   // - \"my-image-new.png\"\n     *\n     *   // `destinationFile` is an instance of a File object that refers to your\n     *   // new file.\n     * });\n     *\n     * //-\n     * // If you pass in a string starting with \"gs://\" for the destination, the\n     * // file is copied to the other bucket and under the new name provided.\n     * //-\n     * const newLocation = 'gs://another-bucket/my-image-new.png';\n     * file.move(newLocation, function(err, destinationFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-image-new.png\"\n     *\n     *   // `destinationFile` is an instance of a File object that refers to your\n     *   // new file.\n     * });\n     *\n     * //-\n     * // If you pass in a Bucket object, the file will be moved to that bucket\n     * // using the same name.\n     * //-\n     * const anotherBucket = gcs.bucket('another-bucket');\n     *\n     * file.move(anotherBucket, function(err, destinationFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-image.png\"\n     *\n     *   // `destinationFile` is an instance of a File object that refers to your\n     *   // new file.\n     * });\n     *\n     * //-\n     * // If you pass in a File object, you have complete control over the new\n     * // bucket and filename.\n     * //-\n     * const anotherFile = anotherBucket.file('my-awesome-image.png');\n     *\n     * file.move(anotherFile, function(err, destinationFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-awesome-image.png\"\n     *\n     *   // Note:\n     *   // The `destinationFile` parameter is equal to `anotherFile`.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.move('my-image-new.png').then(function(data) {\n     *   const destinationFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_move_file\n     * Another example:\n     */\n    move(destination, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.copy(destination, options, (err, destinationFile, copyApiResponse) => {\n            if (err) {\n                err.message = 'file#copy failed with an error - ' + err.message;\n                callback(err, null, copyApiResponse);\n                return;\n            }\n            if (this.name !== destinationFile.name ||\n                this.bucket.name !== destinationFile.bucket.name) {\n                this.delete(options, (err, apiResponse) => {\n                    if (err) {\n                        err.message = 'file#delete failed with an error - ' + err.message;\n                        callback(err, destinationFile, apiResponse);\n                        return;\n                    }\n                    callback(null, destinationFile, copyApiResponse);\n                });\n            }\n            else {\n                callback(null, destinationFile, copyApiResponse);\n            }\n        });\n    }\n    /**\n     * @typedef {array} RenameResponse\n     * @property {File} 0 The destination File.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback RenameCallback\n     * @param {?Error} err Request error, if any.\n     * @param {?File} destinationFile The destination File.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {object} RenameOptions Configuration options for File#move(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Rename this file.\n     *\n     * **Warning**:\n     * There is currently no atomic `rename` method in the Cloud Storage API,\n     * so this method is an alias of {@link File#move}, which in turn is a\n     * composition of {@link File#copy} (to the new location) and\n     * {@link File#delete} (from the old location). While\n     * unlikely, it is possible that an error returned to your callback could be\n     * triggered from either one of these API calls failing, which could leave a\n     * duplicate file lingering. The error message will indicate what operation\n     * has failed.\n     *\n     * @param {string|File} destinationFile Destination file.\n     * @param {RenameCallback} [callback] Callback function.\n     * @returns {Promise<RenameResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * //-\n     * // You can pass in a string or a File object.\n     * //\n     * // For all of the below examples, assume we are working with the following\n     * // Bucket and File objects.\n     * //-\n     *\n     * const bucket = storage.bucket('my-bucket');\n     * const file = bucket.file('my-image.png');\n     *\n     * //-\n     * // You can pass in a string for the destinationFile.\n     * //-\n     * file.rename('renamed-image.png', function(err, renamedFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   // but contains instead:\n     *   // - \"renamed-image.png\"\n     *\n     *   // `renamedFile` is an instance of a File object that refers to your\n     *   // renamed file.\n     * });\n     *\n     * //-\n     * // You can pass in a File object.\n     * //-\n     * const anotherFile = anotherBucket.file('my-awesome-image.png');\n     *\n     * file.rename(anotherFile, function(err, renamedFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *\n     *   // Note:\n     *   // The `renamedFile` parameter is equal to `anotherFile`.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.rename('my-renamed-image.png').then(function(data) {\n     *   const renamedFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    rename(destinationFile, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.move(destinationFile, options, callback);\n    }\n    /**\n     * @typedef {object} RestoreOptions Options for File#restore(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {number} [generation] If present, selects a specific revision of this object.\n     * @param {string} [restoreToken] Returns an option that must be specified when getting a soft-deleted object from an HNS-enabled\n     *  bucket that has a naming and generation conflict with another object in the same bucket.\n     * @param {string} [projection] Specifies the set of properties to return. If used, must be 'full' or 'noAcl'.\n     * @param {string | number} [ifGenerationMatch] Request proceeds if the generation of the target resource\n     *  matches the value used in the precondition.\n     *  If the values don't match, the request fails with a 412 Precondition Failed response.\n     * @param {string | number} [ifGenerationNotMatch] Request proceeds if the generation of the target resource does\n     *  not match the value used in the precondition. If the values match, the request fails with a 304 Not Modified response.\n     * @param {string | number} [ifMetagenerationMatch] Request proceeds if the meta-generation of the target resource\n     *  matches the value used in the precondition.\n     *  If the values don't match, the request fails with a 412 Precondition Failed response.\n     * @param {string | number} [ifMetagenerationNotMatch]  Request proceeds if the meta-generation of the target resource does\n     *  not match the value used in the precondition. If the values match, the request fails with a 304 Not Modified response.\n     */\n    /**\n     * Restores a soft-deleted file\n     * @param {RestoreOptions} options Restore options.\n     * @returns {Promise<File>}\n     */\n    async restore(options) {\n        const [file] = await this.request({\n            method: 'POST',\n            uri: '/restore',\n            qs: options,\n        });\n        return file;\n    }\n    /**\n     * Makes request and applies userProject query parameter if necessary.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - The request options.\n     * @param {function} callback - The callback function.\n     */\n    request(reqOpts, callback) {\n        return this.parent.request.call(this, reqOpts, callback);\n    }\n    /**\n     * @callback RotateEncryptionKeyCallback\n     * @extends CopyCallback\n     */\n    /**\n     * @typedef RotateEncryptionKeyResponse\n     * @extends CopyResponse\n     */\n    /**\n     * @param {string|buffer|object} RotateEncryptionKeyOptions Configuration options\n     *     for File#rotateEncryptionKey().\n     * If a string or Buffer is provided, it is interpreted as an AES-256,\n     * customer-supplied encryption key. If you'd like to use a Cloud KMS key\n     * name, you must specify an options object with the property name:\n     * `kmsKeyName`.\n     * @param {string|buffer} [options.encryptionKey] An AES-256 encryption key.\n     * @param {string} [options.kmsKeyName] A Cloud KMS key name.\n     */\n    /**\n     * This method allows you to update the encryption key associated with this\n     * file.\n     *\n     * See {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}\n     *\n     * @param {RotateEncryptionKeyOptions} [options] - Configuration options.\n     * @param {RotateEncryptionKeyCallback} [callback]\n     * @returns {Promise<File>}\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_rotate_encryption_key\n     * Example of rotating the encryption key for this file:\n     */\n    rotateEncryptionKey(optionsOrCallback, callback) {\n        var _a;\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        let options = {};\n        if (typeof optionsOrCallback === 'string' ||\n            optionsOrCallback instanceof Buffer) {\n            options = {\n                encryptionKey: optionsOrCallback,\n            };\n        }\n        else if (typeof optionsOrCallback === 'object') {\n            options = optionsOrCallback;\n        }\n        const newFile = this.bucket.file(this.id, options);\n        const copyOptions = ((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) !== undefined\n            ? { preconditionOpts: options.preconditionOpts }\n            : {};\n        this.copy(newFile, copyOptions, callback);\n    }\n    /**\n     * @typedef {object} SaveOptions\n     * @extends CreateWriteStreamOptions\n     */\n    /**\n     * @callback SaveCallback\n     * @param {?Error} err Request error, if any.\n     */\n    /**\n     * Write strings or buffers to a file.\n     *\n     * *This is a convenience method which wraps {@link File#createWriteStream}.*\n     * To upload arbitrary data to a file, please use {@link File#createWriteStream} directly.\n     *\n     * Resumable uploads are automatically enabled and must be shut off explicitly\n     * by setting `options.resumable` to `false`.\n     *\n     * Multipart uploads with retryable error codes will be retried 3 times with exponential backoff.\n     *\n     * <p class=\"notice\">\n     *   There is some overhead when using a resumable upload that can cause\n     *   noticeable performance degradation while uploading a series of small\n     * files. When uploading files less than 10MB, it is recommended that the\n     * resumable feature is disabled.\n     * </p>\n     *\n     * @param {SaveData} data The data to write to a file.\n     * @param {SaveOptions} [options] See {@link File#createWriteStream}'s `options`\n     *     parameter.\n     * @param {SaveCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * const contents = 'This is the contents of the file.';\n     *\n     * file.save(contents, function(err) {\n     *   if (!err) {\n     *     // File written successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.save(contents).then(function() {});\n     * ```\n     */\n    save(data, optionsOrCallback, callback) {\n        // tslint:enable:no-any\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if (!this.shouldRetryBasedOnPreconditionAndIdempotencyStrat(options === null || options === void 0 ? void 0 : options.preconditionOpts)) {\n            maxRetries = 0;\n        }\n        const returnValue = async_retry__WEBPACK_IMPORTED_MODULE_17__(async (bail) => {\n            return new Promise((resolve, reject) => {\n                if (maxRetries === 0) {\n                    this.storage.retryOptions.autoRetry = false;\n                }\n                const writable = this.createWriteStream(options);\n                if (options.onUploadProgress) {\n                    writable.on('progress', options.onUploadProgress);\n                }\n                const handleError = (err) => {\n                    if (this.storage.retryOptions.autoRetry &&\n                        this.storage.retryOptions.retryableErrorFn(err)) {\n                        return reject(err);\n                    }\n                    return bail(err);\n                };\n                if (typeof data === 'string' ||\n                    Buffer.isBuffer(data) ||\n                    data instanceof Uint8Array) {\n                    writable\n                        .on('error', handleError)\n                        .on('finish', () => resolve())\n                        .end(data);\n                }\n                else {\n                    (0,stream__WEBPACK_IMPORTED_MODULE_6__.pipeline)(data, writable, err => {\n                        if (err) {\n                            if (typeof data !== 'function') {\n                                // Only PipelineSourceFunction can be retried. Async-iterables\n                                // and Readable streams can only be consumed once.\n                                return bail(err);\n                            }\n                            handleError(err);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                }\n            });\n        }, {\n            retries: maxRetries,\n            factor: this.storage.retryOptions.retryDelayMultiplier,\n            maxTimeout: this.storage.retryOptions.maxRetryDelay * 1000, //convert to milliseconds\n            maxRetryTime: this.storage.retryOptions.totalTimeout * 1000, //convert to milliseconds\n        });\n        if (!callback) {\n            return returnValue;\n        }\n        else {\n            return returnValue\n                .then(() => {\n                if (callback) {\n                    return callback();\n                }\n            })\n                .catch(callback);\n        }\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, _bucket_js__WEBPACK_IMPORTED_MODULE_9__.AvailableServiceObjectMethods.setMetadata, options);\n        super\n            .setMetadata(metadata, options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n    /**\n     * @typedef {array} SetStorageClassResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @typedef {object} SetStorageClassOptions Configuration options for File#setStorageClass().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback SetStorageClassCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Set the storage class for this file.\n     *\n     * See {@link https://cloud.google.com/storage/docs/per-object-storage-class| Per-Object Storage Class}\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n     *\n     * @param {string} storageClass The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`)\n     *     **Note:** The storage classes `multi_regional` and `regional`\n     *     are now legacy and will be deprecated in the future.\n     * @param {SetStorageClassOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {SetStorageClassCallback} [callback] Callback function.\n     * @returns {Promise<SetStorageClassResponse>}\n     *\n     * @example\n     * ```\n     * file.setStorageClass('nearline', function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // The storage class was updated successfully.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.setStorageClass('nearline').then(function() {});\n     * ```\n     */\n    setStorageClass(storageClass, optionsOrCallback, callback) {\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const req = {\n            ...options,\n            // In case we get input like `storageClass`, convert to `storage_class`.\n            storageClass: storageClass\n                .replace(/-/g, '_')\n                .replace(/([a-z])([A-Z])/g, (_, low, up) => {\n                return low + '_' + up;\n            })\n                .toUpperCase(),\n        };\n        this.copy(this, req, (err, file, apiResponse) => {\n            if (err) {\n                callback(err, apiResponse);\n                return;\n            }\n            this.metadata = file.metadata;\n            callback(null, apiResponse);\n        });\n    }\n    /**\n     * Set a user project to be billed for all requests made from this File\n     * object.\n     *\n     * @param {string} userProject The user project.\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-file');\n     *\n     * file.setUserProject('grape-spaceship-123');\n     * ```\n     */\n    setUserProject(userProject) {\n        this.bucket.setUserProject.call(this, userProject);\n    }\n    /**\n     * This creates a resumable-upload upload stream.\n     *\n     * @param {Duplexify} stream - Duplexify stream of data to pipe to the file.\n     * @param {object=} options - Configuration object.\n     *\n     * @private\n     */\n    startResumableUpload_(dup, options = {}) {\n        var _a;\n        (_a = options.metadata) !== null && _a !== void 0 ? _a : (options.metadata = {});\n        const retryOptions = this.storage.retryOptions;\n        if (!this.shouldRetryBasedOnPreconditionAndIdempotencyStrat(options.preconditionOpts)) {\n            retryOptions.autoRetry = false;\n        }\n        const cfg = {\n            authClient: this.storage.authClient,\n            apiEndpoint: this.storage.apiEndpoint,\n            bucket: this.bucket.name,\n            customRequestOptions: this.getRequestInterceptors().reduce((reqOpts, interceptorFn) => interceptorFn(reqOpts), {}),\n            file: this.name,\n            generation: this.generation,\n            isPartialUpload: options.isPartialUpload,\n            key: this.encryptionKey,\n            kmsKeyName: this.kmsKeyName,\n            metadata: options.metadata,\n            offset: options.offset,\n            predefinedAcl: options.predefinedAcl,\n            private: options.private,\n            public: options.public,\n            uri: options.uri,\n            userProject: options.userProject || this.userProject,\n            retryOptions: { ...retryOptions },\n            params: (options === null || options === void 0 ? void 0 : options.preconditionOpts) || this.instancePreconditionOpts,\n            chunkSize: options === null || options === void 0 ? void 0 : options.chunkSize,\n            highWaterMark: options === null || options === void 0 ? void 0 : options.highWaterMark,\n            universeDomain: this.bucket.storage.universeDomain,\n            [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY]: options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY],\n        };\n        let uploadStream;\n        try {\n            uploadStream = _resumable_upload_js__WEBPACK_IMPORTED_MODULE_5__.upload(cfg);\n        }\n        catch (error) {\n            dup.destroy(error);\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            return;\n        }\n        uploadStream\n            .on('response', resp => {\n            dup.emit('response', resp);\n        })\n            .on('uri', uri => {\n            dup.emit('uri', uri);\n        })\n            .on('metadata', metadata => {\n            this.metadata = metadata;\n            dup.emit('metadata');\n        })\n            .on('finish', () => {\n            dup.emit('complete');\n        })\n            .on('progress', evt => dup.emit('progress', evt));\n        dup.setWritable(uploadStream);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * Takes a readable stream and pipes it to a remote file. Unlike\n     * `startResumableUpload_`, which uses the resumable upload technique, this\n     * method uses a simple upload (all or nothing).\n     *\n     * @param {Duplexify} dup - Duplexify stream of data to pipe to the file.\n     * @param {object=} options - Configuration object.\n     *\n     * @private\n     */\n    startSimpleUpload_(dup, options = {}) {\n        var _a;\n        (_a = options.metadata) !== null && _a !== void 0 ? _a : (options.metadata = {});\n        const apiEndpoint = this.storage.apiEndpoint;\n        const bucketName = this.bucket.name;\n        const uri = `${apiEndpoint}/upload/storage/v1/b/${bucketName}/o`;\n        const reqOpts = {\n            qs: {\n                name: this.name,\n            },\n            uri: uri,\n            [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY]: options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY],\n        };\n        if (this.generation !== undefined) {\n            reqOpts.qs.ifGenerationMatch = this.generation;\n        }\n        if (this.kmsKeyName !== undefined) {\n            reqOpts.qs.kmsKeyName = this.kmsKeyName;\n        }\n        if (typeof options.timeout === 'number') {\n            reqOpts.timeout = options.timeout;\n        }\n        if (options.userProject || this.userProject) {\n            reqOpts.qs.userProject = options.userProject || this.userProject;\n        }\n        if (options.predefinedAcl) {\n            reqOpts.qs.predefinedAcl = options.predefinedAcl;\n        }\n        else if (options.private) {\n            reqOpts.qs.predefinedAcl = 'private';\n        }\n        else if (options.public) {\n            reqOpts.qs.predefinedAcl = 'publicRead';\n        }\n        Object.assign(reqOpts.qs, this.instancePreconditionOpts, options.preconditionOpts);\n        _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.makeWritableStream(dup, {\n            makeAuthenticatedRequest: (reqOpts) => {\n                this.request(reqOpts, (err, body, resp) => {\n                    if (err) {\n                        dup.destroy(err);\n                        return;\n                    }\n                    this.metadata = body;\n                    dup.emit('metadata', body);\n                    dup.emit('response', resp);\n                    dup.emit('complete');\n                });\n            },\n            metadata: options.metadata,\n            request: reqOpts,\n        });\n    }\n    disableAutoRetryConditionallyIdempotent_(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    coreOpts, methodType, localPreconditionOptions) {\n        var _a, _b, _c, _d;\n        if ((typeof coreOpts === 'object' &&\n            ((_b = (_a = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _a === void 0 ? void 0 : _a.qs) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch) === undefined &&\n            (localPreconditionOptions === null || localPreconditionOptions === void 0 ? void 0 : localPreconditionOptions.ifGenerationMatch) === undefined &&\n            methodType === _bucket_js__WEBPACK_IMPORTED_MODULE_9__.AvailableServiceObjectMethods.delete &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryNever) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        if ((typeof coreOpts === 'object' &&\n            ((_d = (_c = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _c === void 0 ? void 0 : _c.qs) === null || _d === void 0 ? void 0 : _d.ifMetagenerationMatch) === undefined &&\n            (localPreconditionOptions === null || localPreconditionOptions === void 0 ? void 0 : localPreconditionOptions.ifMetagenerationMatch) === undefined &&\n            methodType === _bucket_js__WEBPACK_IMPORTED_MODULE_9__.AvailableServiceObjectMethods.setMetadata &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryNever) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n    }\n    async getBufferFromReadable(readable) {\n        const buf = [];\n        for await (const chunk of readable) {\n            buf.push(chunk);\n        }\n        return Buffer.concat(buf);\n    }\n}\n_File_instances = new WeakSet(), _File_validateIntegrity = \n/**\n *\n * @param hashCalculatingStream\n * @param verify\n * @returns {boolean} Returns `true` if valid, throws with error otherwise\n */\nasync function _File_validateIntegrity(hashCalculatingStream, verify = {}) {\n    const metadata = this.metadata;\n    // If we're doing validation, assume the worst\n    let dataMismatch = !!(verify.crc32c || verify.md5);\n    if (verify.crc32c && metadata.crc32c) {\n        dataMismatch = !hashCalculatingStream.test('crc32c', metadata.crc32c);\n    }\n    if (verify.md5 && metadata.md5Hash) {\n        dataMismatch = !hashCalculatingStream.test('md5', metadata.md5Hash);\n    }\n    if (dataMismatch) {\n        const errors = [];\n        let code = '';\n        let message = '';\n        try {\n            await this.delete();\n            if (verify.md5 && !metadata.md5Hash) {\n                code = 'MD5_NOT_AVAILABLE';\n                message = FileExceptionMessages.MD5_NOT_AVAILABLE;\n            }\n            else {\n                code = 'FILE_NO_UPLOAD';\n                message = FileExceptionMessages.UPLOAD_MISMATCH;\n            }\n        }\n        catch (e) {\n            const error = e;\n            code = 'FILE_NO_UPLOAD_DELETE';\n            message = `${FileExceptionMessages.UPLOAD_MISMATCH_DELETE_FAIL}${error.message}`;\n            errors.push(error);\n        }\n        const error = new RequestError(message);\n        error.code = code;\n        error.errors = errors;\n        throw error;\n    }\n    return true;\n};\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__.promisifyAll)(File, {\n    exclude: [\n        'cloudStorageURI',\n        'publicUrl',\n        'request',\n        'save',\n        'setEncryptionKey',\n        'shouldRetryBasedOnPreconditionAndIdempotencyStrat',\n        'getBufferFromReadable',\n        'restore',\n    ],\n});\n/**\n * Reference to the {@link File} class.\n * @name module:@google-cloud/storage.File\n * @see File\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HashStreamValidator: () => (/* binding */ HashStreamValidator)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _HashStreamValidator_crc32cHash, _HashStreamValidator_md5Hash, _HashStreamValidator_md5Digest;\n\n\n\n\nclass HashStreamValidator extends stream__WEBPACK_IMPORTED_MODULE_1__.Transform {\n    constructor(options = {}) {\n        super();\n        this.updateHashesOnly = false;\n        _HashStreamValidator_crc32cHash.set(this, undefined);\n        _HashStreamValidator_md5Hash.set(this, undefined);\n        _HashStreamValidator_md5Digest.set(this, '');\n        this.crc32cEnabled = !!options.crc32c;\n        this.md5Enabled = !!options.md5;\n        this.updateHashesOnly = !!options.updateHashesOnly;\n        this.crc32cExpected = options.crc32cExpected;\n        this.md5Expected = options.md5Expected;\n        if (this.crc32cEnabled) {\n            if (options.crc32cInstance) {\n                __classPrivateFieldSet(this, _HashStreamValidator_crc32cHash, options.crc32cInstance, \"f\");\n            }\n            else {\n                const crc32cGenerator = options.crc32cGenerator || _crc32c_js__WEBPACK_IMPORTED_MODULE_2__.CRC32C_DEFAULT_VALIDATOR_GENERATOR;\n                __classPrivateFieldSet(this, _HashStreamValidator_crc32cHash, crc32cGenerator(), \"f\");\n            }\n        }\n        if (this.md5Enabled) {\n            __classPrivateFieldSet(this, _HashStreamValidator_md5Hash, (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHash)('md5'), \"f\");\n        }\n    }\n    /**\n     * Return the current CRC32C value, if available.\n     */\n    get crc32c() {\n        var _a;\n        return (_a = __classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\")) === null || _a === void 0 ? void 0 : _a.toString();\n    }\n    _flush(callback) {\n        if (__classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\")) {\n            __classPrivateFieldSet(this, _HashStreamValidator_md5Digest, __classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\").digest('base64'), \"f\");\n        }\n        if (this.updateHashesOnly) {\n            callback();\n            return;\n        }\n        // If we're doing validation, assume the worst-- a data integrity\n        // mismatch. If not, these tests won't be performed, and we can assume\n        // the best.\n        // We must check if the server decompressed the data on serve because hash\n        // validation is not possible in this case.\n        let failed = this.crc32cEnabled || this.md5Enabled;\n        if (this.crc32cEnabled && this.crc32cExpected) {\n            failed = !this.test('crc32c', this.crc32cExpected);\n        }\n        if (this.md5Enabled && this.md5Expected) {\n            failed = !this.test('md5', this.md5Expected);\n        }\n        if (failed) {\n            const mismatchError = new _file_js__WEBPACK_IMPORTED_MODULE_3__.RequestError(_file_js__WEBPACK_IMPORTED_MODULE_3__.FileExceptionMessages.DOWNLOAD_MISMATCH);\n            mismatchError.code = 'CONTENT_DOWNLOAD_MISMATCH';\n            callback(mismatchError);\n        }\n        else {\n            callback();\n        }\n    }\n    _transform(chunk, encoding, callback) {\n        this.push(chunk, encoding);\n        try {\n            if (__classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\"))\n                __classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\").update(chunk);\n            if (__classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\"))\n                __classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\").update(chunk);\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n    test(hash, sum) {\n        const check = Buffer.isBuffer(sum) ? sum.toString('base64') : sum;\n        if (hash === 'crc32c' && __classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\")) {\n            return __classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\").validate(check);\n        }\n        if (hash === 'md5' && __classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\")) {\n            return __classPrivateFieldGet(this, _HashStreamValidator_md5Digest, \"f\") === check;\n        }\n        return false;\n    }\n}\n_HashStreamValidator_crc32cHash = new WeakMap(), _HashStreamValidator_md5Hash = new WeakMap(), _HashStreamValidator_md5Digest = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HmacKey: () => (/* binding */ HmacKey)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n/**\n * The API-formatted resource description of the HMAC key.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name HmacKey#metadata\n * @type {object}\n */\n/**\n * An HmacKey object contains metadata of an HMAC key created from a\n * service account through the {@link Storage} client using\n * {@link Storage#createHmacKey}.\n *\n * See {@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}\n *\n * @class\n */\nclass HmacKey extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    /**\n     * @typedef {object} HmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     */\n    /**\n     * Constructs an HmacKey object.\n     *\n     * Note: this only create a local reference to an HMAC key, to create\n     * an HMAC key, use {@link Storage#createHmacKey}.\n     *\n     * @param {Storage} storage The Storage instance this HMAC key is\n     *     attached to.\n     * @param {string} accessId The unique accessId for this HMAC key.\n     * @param {HmacKeyOptions} options Constructor configurations.\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('access-id');\n     * ```\n     */\n    constructor(storage, accessId, options) {\n        const methods = {\n            /**\n             * @typedef {object} DeleteHmacKeyOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * @typedef {array} DeleteHmacKeyResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteHmacKeyCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Deletes an HMAC key.\n             * Key state must be set to `INACTIVE` prior to deletion.\n             * Caution: HMAC keys cannot be recovered once you delete them.\n             *\n             * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.\n             *\n             * @method HmacKey#delete\n             * @param {DeleteHmacKeyOptions} [options] Configuration options.\n             * @param {DeleteHmacKeyCallback} [callback] Callback function.\n             * @returns {Promise<DeleteHmacKeyResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Delete HMAC key after making the key inactive.\n             * //-\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\n             * hmacKey.setMetadata({state: 'INACTIVE'}, (err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     hmacKey.delete((err) => {\n             *       if (err) {\n             *         console.error(err);\n             *         return;\n             *       }\n             *       // The HMAC key is deleted.\n             *     });\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\n             * hmacKey\n             *   .setMetadata({state: 'INACTIVE'})\n             *   .then(() => {\n             *     return hmacKey.delete();\n             *   });\n             * ```\n             */\n            delete: true,\n            /**\n             * @callback GetHmacKeyCallback\n             * @param {?Error} err Request error, if any.\n             * @param {HmacKey} hmacKey this {@link HmacKey} instance.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} GetHmacKeyResponse\n             * @property {HmacKey} 0 This {@link HmacKey} instance.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @typedef {object} GetHmacKeyOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * Retrieves and populate an HMAC key's metadata, and return\n             * this {@link HmacKey} instance.\n             *\n             * HmacKey.get() does not give the HMAC key secret, as\n             * it is only returned on creation.\n             *\n             * The authenticated user must have `storage.hmacKeys.get` permission\n             * for the project in which the key exists.\n             *\n             * @method HmacKey#get\n             * @param {GetHmacKeyOptions} [options] Configuration options.\n             * @param {GetHmacKeyCallback} [callback] Callback function.\n             * @returns {Promise<GetHmacKeyResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Get the HmacKey's Metadata.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .get((err, hmacKey) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     // do something with the returned HmacKey object.\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .get()\n             *   .then((data) => {\n             *     const hmacKey = data[0];\n             *   });\n             * ```\n             */\n            get: true,\n            /**\n             * @typedef {object} GetHmacKeyMetadataOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * Retrieves and populate an HMAC key's metadata, and return\n             * the HMAC key's metadata as an object.\n             *\n             * HmacKey.getMetadata() does not give the HMAC key secret, as\n             * it is only returned on creation.\n             *\n             * The authenticated user must have `storage.hmacKeys.get` permission\n             * for the project in which the key exists.\n             *\n             * @method HmacKey#getMetadata\n             * @param {GetHmacKeyMetadataOptions} [options] Configuration options.\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\n             * @returns {Promise<HmacKeyMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Get the HmacKey's metadata and populate to the metadata property.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .getMetadata((err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     console.log(hmacKeyMetadata);\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .getMetadata()\n             *   .then((data) => {\n             *     const hmacKeyMetadata = data[0];\n             *     console.log(hmacKeyMetadata);\n             *   });\n             * ```\n             */\n            getMetadata: true,\n            /**\n             * @typedef {object} SetHmacKeyMetadata Subset of {@link HmacKeyMetadata} to update.\n             * @property {string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.\n             * @property {string} [etag] Include an etag from a previous get HMAC key request\n             *    to perform safe read-modify-write.\n             */\n            /**\n             * @typedef {object} SetHmacKeyMetadataOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * @callback HmacKeyMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {HmacKeyMetadata} metadata The updated {@link HmacKeyMetadata} object.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} HmacKeyMetadataResponse\n             * @property {HmacKeyMetadata} 0 The updated {@link HmacKeyMetadata} object.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata} for\n             * valid states.\n             *\n             * @method HmacKey#setMetadata\n             * @param {SetHmacKeyMetadata} metadata The new metadata.\n             * @param {SetHmacKeyMetadataOptions} [options] Configuration options.\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\n             * @returns {Promise<HmacKeyMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * const metadata = {\n             *   state: 'INACTIVE',\n             * };\n             *\n             * storage.hmacKey('ACCESS_ID')\n             *   .setMetadata(metadata, (err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     console.log(hmacKeyMetadata);\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .setMetadata(metadata)\n             *   .then((data) => {\n             *     const hmacKeyMetadata = data[0];\n             *     console.log(hmacKeyMetadata);\n             *   });\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    method: 'PUT',\n                },\n            },\n        };\n        const projectId = (options && options.projectId) || storage.projectId;\n        super({\n            parent: storage,\n            id: accessId,\n            baseUrl: `/projects/${projectId}/hmacKeys`,\n            methods,\n        });\n        this.storage = storage;\n        this.instanceRetryValue = storage.retryOptions.autoRetry;\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        // ETag preconditions are not currently supported. Retries should be disabled if the idempotency strategy is not set to RetryAlways\n        if (this.storage.retryOptions.idempotencyStrategy !==\n            _storage_js__WEBPACK_IMPORTED_MODULE_1__.IdempotencyStrategy.RetryAlways) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        super\n            .setMetadata(metadata, options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__.promisifyAll)(HmacKey);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/iam.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/iam.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IAMExceptionMessages: () => (/* binding */ IAMExceptionMessages),\n/* harmony export */   Iam: () => (/* binding */ Iam)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nvar IAMExceptionMessages;\n(function (IAMExceptionMessages) {\n    IAMExceptionMessages[\"POLICY_OBJECT_REQUIRED\"] = \"A policy object is required.\";\n    IAMExceptionMessages[\"PERMISSIONS_REQUIRED\"] = \"Permissions are required.\";\n})(IAMExceptionMessages || (IAMExceptionMessages = {}));\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n *\n * @constructor Iam\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n * ```\n */\nclass Iam {\n    constructor(bucket) {\n        this.request_ = bucket.request.bind(bucket);\n        this.resourceId_ = 'buckets/' + bucket.getId();\n    }\n    /**\n     * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\n     * @property {number} [requestedPolicyVersion] The version of IAM policies to\n     *     request. If a policy with a condition is requested without setting\n     *     this, the server will return an error. This must be set to a value\n     *     of 3 to retrieve IAM policies containing conditions. This is to\n     *     prevent client code that isn't aware of IAM conditions from\n     *     interpreting and modifying policies incorrectly. The service might\n     *     return a policy with version lower than the one that was requested,\n     *     based on the feature syntax in the policy fetched.\n     *     See {@link https://cloud.google.com/iam/docs/policies#versions| IAM Policy versions}\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} GetPolicyResponse\n     * @property {Policy} 0 The policy.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @typedef {object} Policy\n     * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\n     * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\n     * @property {number} [policy.version] The syntax schema version of the Policy.\n     *      To set an IAM policy with conditional binding, this field must be set to\n     *      3 or greater.\n     *     See {@link https://cloud.google.com/iam/docs/policies#versions| IAM Policy versions}\n     */\n    /**\n     * @typedef {object} PolicyBinding\n     * @property {string} role Role that is assigned to members.\n     * @property {string[]} members Specifies the identities requesting access for the bucket.\n     * @property {Expr} [condition] The condition that is associated with this binding.\n     */\n    /**\n     * @typedef {object} Expr\n     * @property {string} [title] An optional title for the expression, i.e. a\n     *     short string describing its purpose. This can be used e.g. in UIs\n     *     which allow to enter the expression.\n     * @property {string} [description] An optional description of the\n     *     expression. This is a longer text which describes the expression,\n     *     e.g. when hovered over it in a UI.\n     * @property {string} expression Textual representation of an expression in\n     *     Common Expression Language syntax. The application context of the\n     *     containing message determines which well-known feature set of CEL\n     *     is supported.The condition that is associated with this binding.\n     *\n     * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\n     */\n    /**\n     * Get the IAM policy.\n     *\n     * @param {GetPolicyOptions} [options] Request options.\n     * @param {GetPolicyCallback} [callback] Callback function.\n     * @returns {Promise<GetPolicyResponse>}\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy| Buckets: setIamPolicy API Documentation}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.iam.getPolicy(\n     *     {requestedPolicyVersion: 3},\n     *     function(err, policy, apiResponse) {\n     *\n     *     },\n     * );\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.getPolicy({requestedPolicyVersion: 3})\n     *   .then(function(data) {\n     *     const policy = data[0];\n     *     const apiResponse = data[1];\n     *   });\n     *\n     * ```\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_view_bucket_iam_members\n     * Example of retrieving a bucket's IAM policy:\n     */\n    getPolicy(optionsOrCallback, callback) {\n        const { options, callback: cb } = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(optionsOrCallback, callback);\n        const qs = {};\n        if (options.userProject) {\n            qs.userProject = options.userProject;\n        }\n        if (options.requestedPolicyVersion !== null &&\n            options.requestedPolicyVersion !== undefined) {\n            qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\n        }\n        this.request_({\n            uri: '/iam',\n            qs,\n        }, cb);\n    }\n    /**\n     * Set the IAM policy.\n     *\n     * @throws {Error} If no policy is provided.\n     *\n     * @param {Policy} policy The policy.\n     * @param {SetPolicyOptions} [options] Configuration options.\n     * @param {SetPolicyCallback} callback Callback function.\n     * @returns {Promise<SetPolicyResponse>}\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy| Buckets: setIamPolicy API Documentation}\n     * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const myPolicy = {\n     *   bindings: [\n     *     {\n     *       role: 'roles/storage.admin',\n     *       members:\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n     *     }\n     *   ]\n     * };\n     *\n     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.setPolicy(myPolicy).then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_add_bucket_iam_member\n     * Example of adding to a bucket's IAM policy:\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_remove_bucket_iam_member\n     * Example of removing from a bucket's IAM policy:\n     */\n    setPolicy(policy, optionsOrCallback, callback) {\n        if (policy === null || typeof policy !== 'object') {\n            throw new Error(IAMExceptionMessages.POLICY_OBJECT_REQUIRED);\n        }\n        const { options, callback: cb } = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(optionsOrCallback, callback);\n        let maxRetries;\n        if (policy.etag === undefined) {\n            maxRetries = 0;\n        }\n        this.request_({\n            method: 'PUT',\n            uri: '/iam',\n            maxRetries,\n            json: Object.assign({\n                resourceId: this.resourceId_,\n            }, policy),\n            qs: options,\n        }, cb);\n    }\n    /**\n     * Test a set of permissions for a resource.\n     *\n     * @throws {Error} If permissions are not provided.\n     *\n     * @param {string|string[]} permissions The permission(s) to test for.\n     * @param {TestIamPermissionsOptions} [options] Configuration object.\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\n     * @returns {Promise<TestIamPermissionsResponse>}\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions| Buckets: testIamPermissions API Documentation}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Test a single permission.\n     * //-\n     * const test = 'storage.buckets.delete';\n     *\n     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // Test several permissions at once.\n     * //-\n     * const tests = [\n     *   'storage.buckets.delete',\n     *   'storage.buckets.get'\n     * ];\n     *\n     * bucket.iam.testPermissions(tests, function(err, permissions) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": false,\n     *   //   \"storage.buckets.get\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.testPermissions(test).then(function(data) {\n     *   const permissions = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    testPermissions(permissions, optionsOrCallback, callback) {\n        if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n            throw new Error(IAMExceptionMessages.PERMISSIONS_REQUIRED);\n        }\n        const { options, callback: cb } = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(optionsOrCallback, callback);\n        const permissionsArray = Array.isArray(permissions)\n            ? permissions\n            : [permissions];\n        const req = Object.assign({\n            permissions: permissionsArray,\n        }, options);\n        this.request_({\n            uri: '/iam/testPermissions',\n            qs: req,\n            useQuerystring: true,\n        }, (err, resp) => {\n            if (err) {\n                cb(err, null, resp);\n                return;\n            }\n            const availablePermissions = Array.isArray(resp.permissions)\n                ? resp.permissions\n                : [];\n            const permissionsHash = permissionsArray.reduce((acc, permission) => {\n                acc[permission] = availablePermissions.indexOf(permission) > -1;\n                return acc;\n            }, {});\n            cb(null, permissionsHash, resp);\n        });\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__.promisifyAll)(Iam);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvaWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN1RDtBQUNqQjtBQUMvQjtBQUNQO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0RBQW9EO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixRQUFRO0FBQ1IsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsVUFBVSxTQUFTO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QixrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QixrQkFBa0IsUUFBUTtBQUMxQixrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekIsa0JBQWtCLGlCQUFpQjtBQUNuQyxrQkFBa0IsUUFBUTtBQUMxQixrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QixrQkFBa0IsUUFBUTtBQUMxQixrQkFBa0IsVUFBVTtBQUM1QixrQkFBa0IsTUFBTTtBQUN4QjtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekIsa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBLGtCQUFrQixRQUFRO0FBQzFCO0FBQ0E7QUFDQSxrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQyxlQUFlLG1CQUFtQjtBQUNsQyxpQkFBaUI7QUFDakI7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQkFBMEI7QUFDdEM7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDBCQUEwQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0JBQXdCLEVBQUUsbURBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsa0JBQWtCO0FBQ2pDLGVBQWUsbUJBQW1CO0FBQ2xDLGlCQUFpQjtBQUNqQjtBQUNBLFlBQVk7QUFDWixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0JBQXdCLEVBQUUsbURBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGVBQWUsMkJBQTJCO0FBQzFDLGVBQWUsNEJBQTRCO0FBQzNDLGlCQUFpQjtBQUNqQjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3QkFBd0IsRUFBRSxtREFBUztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxJQUFJO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQVk7QUFDRyIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvaWFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgcHJvbWlzaWZ5QWxsIH0gZnJvbSAnQGdvb2dsZS1jbG91ZC9wcm9taXNpZnknO1xuaW1wb3J0IHsgbm9ybWFsaXplIH0gZnJvbSAnLi91dGlsLmpzJztcbmV4cG9ydCB2YXIgSUFNRXhjZXB0aW9uTWVzc2FnZXM7XG4oZnVuY3Rpb24gKElBTUV4Y2VwdGlvbk1lc3NhZ2VzKSB7XG4gICAgSUFNRXhjZXB0aW9uTWVzc2FnZXNbXCJQT0xJQ1lfT0JKRUNUX1JFUVVJUkVEXCJdID0gXCJBIHBvbGljeSBvYmplY3QgaXMgcmVxdWlyZWQuXCI7XG4gICAgSUFNRXhjZXB0aW9uTWVzc2FnZXNbXCJQRVJNSVNTSU9OU19SRVFVSVJFRFwiXSA9IFwiUGVybWlzc2lvbnMgYXJlIHJlcXVpcmVkLlwiO1xufSkoSUFNRXhjZXB0aW9uTWVzc2FnZXMgfHwgKElBTUV4Y2VwdGlvbk1lc3NhZ2VzID0ge30pKTtcbi8qKlxuICogR2V0IGFuZCBzZXQgSUFNIHBvbGljaWVzIGZvciB5b3VyIENsb3VkIFN0b3JhZ2UgYnVja2V0LlxuICpcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy9hY2Nlc3MtY29udHJvbC9pYW0jc2hvcnRfdGl0bGVfaWFtX21hbmFnZW1lbnR8IENsb3VkIFN0b3JhZ2UgSUFNIE1hbmFnZW1lbnR9XG4gKiBTZWUge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9pYW0vZG9jcy9ncmFudGluZy1jaGFuZ2luZy1yZXZva2luZy1hY2Nlc3N8IEdyYW50aW5nLCBDaGFuZ2luZywgYW5kIFJldm9raW5nIEFjY2Vzc31cbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2lhbS9kb2NzL3VuZGVyc3RhbmRpbmctcm9sZXN8IElBTSBSb2xlc31cbiAqXG4gKiBAY29uc3RydWN0b3IgSWFtXG4gKlxuICogQHBhcmFtIHtCdWNrZXR9IGJ1Y2tldCBUaGUgcGFyZW50IGluc3RhbmNlLlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogY29uc3Qge1N0b3JhZ2V9ID0gcmVxdWlyZSgnQGdvb2dsZS1jbG91ZC9zdG9yYWdlJyk7XG4gKiBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAqIGNvbnN0IGJ1Y2tldCA9IHN0b3JhZ2UuYnVja2V0KCdteS1idWNrZXQnKTtcbiAqIC8vIGJ1Y2tldC5pYW1cbiAqIGBgYFxuICovXG5jbGFzcyBJYW0ge1xuICAgIGNvbnN0cnVjdG9yKGJ1Y2tldCkge1xuICAgICAgICB0aGlzLnJlcXVlc3RfID0gYnVja2V0LnJlcXVlc3QuYmluZChidWNrZXQpO1xuICAgICAgICB0aGlzLnJlc291cmNlSWRfID0gJ2J1Y2tldHMvJyArIGJ1Y2tldC5nZXRJZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBHZXRQb2xpY3lPcHRpb25zIFJlcXVlc3RlZCBvcHRpb25zIGZvciBJQU0jZ2V0UG9saWN5KCkuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtyZXF1ZXN0ZWRQb2xpY3lWZXJzaW9uXSBUaGUgdmVyc2lvbiBvZiBJQU0gcG9saWNpZXMgdG9cbiAgICAgKiAgICAgcmVxdWVzdC4gSWYgYSBwb2xpY3kgd2l0aCBhIGNvbmRpdGlvbiBpcyByZXF1ZXN0ZWQgd2l0aG91dCBzZXR0aW5nXG4gICAgICogICAgIHRoaXMsIHRoZSBzZXJ2ZXIgd2lsbCByZXR1cm4gYW4gZXJyb3IuIFRoaXMgbXVzdCBiZSBzZXQgdG8gYSB2YWx1ZVxuICAgICAqICAgICBvZiAzIHRvIHJldHJpZXZlIElBTSBwb2xpY2llcyBjb250YWluaW5nIGNvbmRpdGlvbnMuIFRoaXMgaXMgdG9cbiAgICAgKiAgICAgcHJldmVudCBjbGllbnQgY29kZSB0aGF0IGlzbid0IGF3YXJlIG9mIElBTSBjb25kaXRpb25zIGZyb21cbiAgICAgKiAgICAgaW50ZXJwcmV0aW5nIGFuZCBtb2RpZnlpbmcgcG9saWNpZXMgaW5jb3JyZWN0bHkuIFRoZSBzZXJ2aWNlIG1pZ2h0XG4gICAgICogICAgIHJldHVybiBhIHBvbGljeSB3aXRoIHZlcnNpb24gbG93ZXIgdGhhbiB0aGUgb25lIHRoYXQgd2FzIHJlcXVlc3RlZCxcbiAgICAgKiAgICAgYmFzZWQgb24gdGhlIGZlYXR1cmUgc3ludGF4IGluIHRoZSBwb2xpY3kgZmV0Y2hlZC5cbiAgICAgKiAgICAgU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vaWFtL2RvY3MvcG9saWNpZXMjdmVyc2lvbnN8IElBTSBQb2xpY3kgdmVyc2lvbnN9XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt1c2VyUHJvamVjdF0gVGhlIElEIG9mIHRoZSBwcm9qZWN0IHdoaWNoIHdpbGwgYmVcbiAgICAgKiAgICAgYmlsbGVkIGZvciB0aGUgcmVxdWVzdC5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBAdHlwZWRlZiB7YXJyYXl9IEdldFBvbGljeVJlc3BvbnNlXG4gICAgICogQHByb3BlcnR5IHtQb2xpY3l9IDAgVGhlIHBvbGljeS5cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gMSBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge29iamVjdH0gUG9saWN5XG4gICAgICogQHByb3BlcnR5IHtQb2xpY3lCaW5kaW5nW119IHBvbGljeS5iaW5kaW5ncyBCaW5kaW5ncyBhc3NvY2lhdGUgbWVtYmVycyB3aXRoIHJvbGVzLlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcG9saWN5LmV0YWddIEV0YWdzIGFyZSB1c2VkIHRvIHBlcmZvcm0gYSByZWFkLW1vZGlmeS13cml0ZS5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3BvbGljeS52ZXJzaW9uXSBUaGUgc3ludGF4IHNjaGVtYSB2ZXJzaW9uIG9mIHRoZSBQb2xpY3kuXG4gICAgICogICAgICBUbyBzZXQgYW4gSUFNIHBvbGljeSB3aXRoIGNvbmRpdGlvbmFsIGJpbmRpbmcsIHRoaXMgZmllbGQgbXVzdCBiZSBzZXQgdG9cbiAgICAgKiAgICAgIDMgb3IgZ3JlYXRlci5cbiAgICAgKiAgICAgU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vaWFtL2RvY3MvcG9saWNpZXMjdmVyc2lvbnN8IElBTSBQb2xpY3kgdmVyc2lvbnN9XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge29iamVjdH0gUG9saWN5QmluZGluZ1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByb2xlIFJvbGUgdGhhdCBpcyBhc3NpZ25lZCB0byBtZW1iZXJzLlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IG1lbWJlcnMgU3BlY2lmaWVzIHRoZSBpZGVudGl0aWVzIHJlcXVlc3RpbmcgYWNjZXNzIGZvciB0aGUgYnVja2V0LlxuICAgICAqIEBwcm9wZXJ0eSB7RXhwcn0gW2NvbmRpdGlvbl0gVGhlIGNvbmRpdGlvbiB0aGF0IGlzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGJpbmRpbmcuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge29iamVjdH0gRXhwclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdIEFuIG9wdGlvbmFsIHRpdGxlIGZvciB0aGUgZXhwcmVzc2lvbiwgaS5lLiBhXG4gICAgICogICAgIHNob3J0IHN0cmluZyBkZXNjcmliaW5nIGl0cyBwdXJwb3NlLiBUaGlzIGNhbiBiZSB1c2VkIGUuZy4gaW4gVUlzXG4gICAgICogICAgIHdoaWNoIGFsbG93IHRvIGVudGVyIHRoZSBleHByZXNzaW9uLlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZGVzY3JpcHRpb25dIEFuIG9wdGlvbmFsIGRlc2NyaXB0aW9uIG9mIHRoZVxuICAgICAqICAgICBleHByZXNzaW9uLiBUaGlzIGlzIGEgbG9uZ2VyIHRleHQgd2hpY2ggZGVzY3JpYmVzIHRoZSBleHByZXNzaW9uLFxuICAgICAqICAgICBlLmcuIHdoZW4gaG92ZXJlZCBvdmVyIGl0IGluIGEgVUkuXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGV4cHJlc3Npb24gVGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiBhbiBleHByZXNzaW9uIGluXG4gICAgICogICAgIENvbW1vbiBFeHByZXNzaW9uIExhbmd1YWdlIHN5bnRheC4gVGhlIGFwcGxpY2F0aW9uIGNvbnRleHQgb2YgdGhlXG4gICAgICogICAgIGNvbnRhaW5pbmcgbWVzc2FnZSBkZXRlcm1pbmVzIHdoaWNoIHdlbGwta25vd24gZmVhdHVyZSBzZXQgb2YgQ0VMXG4gICAgICogICAgIGlzIHN1cHBvcnRlZC5UaGUgY29uZGl0aW9uIHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBzZWUgW0NvbmRpdGlvbl0gaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy9hY2Nlc3MtY29udHJvbC9pYW0jY29uZGl0aW9uc1xuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgSUFNIHBvbGljeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7R2V0UG9saWN5T3B0aW9uc30gW29wdGlvbnNdIFJlcXVlc3Qgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge0dldFBvbGljeUNhbGxiYWNrfSBbY2FsbGJhY2tdIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEdldFBvbGljeVJlc3BvbnNlPn1cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3N0b3JhZ2UvZG9jcy9qc29uX2FwaS92MS9idWNrZXRzL2dldElhbVBvbGljeXwgQnVja2V0czogc2V0SWFtUG9saWN5IEFQSSBEb2N1bWVudGF0aW9ufVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCB7U3RvcmFnZX0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL3N0b3JhZ2UnKTtcbiAgICAgKiBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAgICAgKiBjb25zdCBidWNrZXQgPSBzdG9yYWdlLmJ1Y2tldCgnbXktYnVja2V0Jyk7XG4gICAgICpcbiAgICAgKiBidWNrZXQuaWFtLmdldFBvbGljeShcbiAgICAgKiAgICAge3JlcXVlc3RlZFBvbGljeVZlcnNpb246IDN9LFxuICAgICAqICAgICBmdW5jdGlvbihlcnIsIHBvbGljeSwgYXBpUmVzcG9uc2UpIHtcbiAgICAgKlxuICAgICAqICAgICB9LFxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiAvLy1cbiAgICAgKiAvLyBJZiB0aGUgY2FsbGJhY2sgaXMgb21pdHRlZCwgd2UnbGwgcmV0dXJuIGEgUHJvbWlzZS5cbiAgICAgKiAvLy1cbiAgICAgKiBidWNrZXQuaWFtLmdldFBvbGljeSh7cmVxdWVzdGVkUG9saWN5VmVyc2lvbjogM30pXG4gICAgICogICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICogICAgIGNvbnN0IHBvbGljeSA9IGRhdGFbMF07XG4gICAgICogICAgIGNvbnN0IGFwaVJlc3BvbnNlID0gZGF0YVsxXTtcbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogYGBgXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+aW5jbHVkZTpzYW1wbGVzL2lhbS5qczwvY2FwdGlvbj5cbiAgICAgKiByZWdpb25fdGFnOnN0b3JhZ2Vfdmlld19idWNrZXRfaWFtX21lbWJlcnNcbiAgICAgKiBFeGFtcGxlIG9mIHJldHJpZXZpbmcgYSBidWNrZXQncyBJQU0gcG9saWN5OlxuICAgICAqL1xuICAgIGdldFBvbGljeShvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBjYWxsYmFjazogY2IgfSA9IG5vcm1hbGl6ZShvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spO1xuICAgICAgICBjb25zdCBxcyA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy51c2VyUHJvamVjdCkge1xuICAgICAgICAgICAgcXMudXNlclByb2plY3QgPSBvcHRpb25zLnVzZXJQcm9qZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlcXVlc3RlZFBvbGljeVZlcnNpb24gIT09IG51bGwgJiZcbiAgICAgICAgICAgIG9wdGlvbnMucmVxdWVzdGVkUG9saWN5VmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBxcy5vcHRpb25zUmVxdWVzdGVkUG9saWN5VmVyc2lvbiA9IG9wdGlvbnMucmVxdWVzdGVkUG9saWN5VmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcXVlc3RfKHtcbiAgICAgICAgICAgIHVyaTogJy9pYW0nLFxuICAgICAgICAgICAgcXMsXG4gICAgICAgIH0sIGNiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBJQU0gcG9saWN5LlxuICAgICAqXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIG5vIHBvbGljeSBpcyBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UG9saWN5fSBwb2xpY3kgVGhlIHBvbGljeS5cbiAgICAgKiBAcGFyYW0ge1NldFBvbGljeU9wdGlvbnN9IFtvcHRpb25zXSBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtTZXRQb2xpY3lDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge1Byb21pc2U8U2V0UG9saWN5UmVzcG9uc2U+fVxuICAgICAqXG4gICAgICogU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vc3RvcmFnZS9kb2NzL2pzb25fYXBpL3YxL2J1Y2tldHMvc2V0SWFtUG9saWN5fCBCdWNrZXRzOiBzZXRJYW1Qb2xpY3kgQVBJIERvY3VtZW50YXRpb259XG4gICAgICogU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vaWFtL2RvY3MvdW5kZXJzdGFuZGluZy1yb2xlc3wgSUFNIFJvbGVzfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCB7U3RvcmFnZX0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL3N0b3JhZ2UnKTtcbiAgICAgKiBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAgICAgKiBjb25zdCBidWNrZXQgPSBzdG9yYWdlLmJ1Y2tldCgnbXktYnVja2V0Jyk7XG4gICAgICpcbiAgICAgKiBjb25zdCBteVBvbGljeSA9IHtcbiAgICAgKiAgIGJpbmRpbmdzOiBbXG4gICAgICogICAgIHtcbiAgICAgKiAgICAgICByb2xlOiAncm9sZXMvc3RvcmFnZS5hZG1pbicsXG4gICAgICogICAgICAgbWVtYmVyczpcbiAgICAgKiBbJ3NlcnZpY2VBY2NvdW50Om15b3RoZXJwcm9qZWN0QGFwcHNwb3QuZ3NlcnZpY2VhY2NvdW50LmNvbSddXG4gICAgICogICAgIH1cbiAgICAgKiAgIF1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYnVja2V0LmlhbS5zZXRQb2xpY3kobXlQb2xpY3ksIGZ1bmN0aW9uKGVyciwgcG9saWN5LCBhcGlSZXNwb25zZSkge30pO1xuICAgICAqXG4gICAgICogLy8tXG4gICAgICogLy8gSWYgdGhlIGNhbGxiYWNrIGlzIG9taXR0ZWQsIHdlJ2xsIHJldHVybiBhIFByb21pc2UuXG4gICAgICogLy8tXG4gICAgICogYnVja2V0LmlhbS5zZXRQb2xpY3kobXlQb2xpY3kpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAqICAgY29uc3QgcG9saWN5ID0gZGF0YVswXTtcbiAgICAgKiAgIGNvbnN0IGFwaVJlc3BvbnNlID0gZGF0YVsxXTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmluY2x1ZGU6c2FtcGxlcy9pYW0uanM8L2NhcHRpb24+XG4gICAgICogcmVnaW9uX3RhZzpzdG9yYWdlX2FkZF9idWNrZXRfaWFtX21lbWJlclxuICAgICAqIEV4YW1wbGUgb2YgYWRkaW5nIHRvIGEgYnVja2V0J3MgSUFNIHBvbGljeTpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmluY2x1ZGU6c2FtcGxlcy9pYW0uanM8L2NhcHRpb24+XG4gICAgICogcmVnaW9uX3RhZzpzdG9yYWdlX3JlbW92ZV9idWNrZXRfaWFtX21lbWJlclxuICAgICAqIEV4YW1wbGUgb2YgcmVtb3ZpbmcgZnJvbSBhIGJ1Y2tldCdzIElBTSBwb2xpY3k6XG4gICAgICovXG4gICAgc2V0UG9saWN5KHBvbGljeSwgb3B0aW9uc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChwb2xpY3kgPT09IG51bGwgfHwgdHlwZW9mIHBvbGljeSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihJQU1FeGNlcHRpb25NZXNzYWdlcy5QT0xJQ1lfT0JKRUNUX1JFUVVJUkVEKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIGNhbGxiYWNrOiBjYiB9ID0gbm9ybWFsaXplKG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjayk7XG4gICAgICAgIGxldCBtYXhSZXRyaWVzO1xuICAgICAgICBpZiAocG9saWN5LmV0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWF4UmV0cmllcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0Xyh7XG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgdXJpOiAnL2lhbScsXG4gICAgICAgICAgICBtYXhSZXRyaWVzLFxuICAgICAgICAgICAganNvbjogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VJZDogdGhpcy5yZXNvdXJjZUlkXyxcbiAgICAgICAgICAgIH0sIHBvbGljeSksXG4gICAgICAgICAgICBxczogb3B0aW9ucyxcbiAgICAgICAgfSwgY2IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUZXN0IGEgc2V0IG9mIHBlcm1pc3Npb25zIGZvciBhIHJlc291cmNlLlxuICAgICAqXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHBlcm1pc3Npb25zIGFyZSBub3QgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gcGVybWlzc2lvbnMgVGhlIHBlcm1pc3Npb24ocykgdG8gdGVzdCBmb3IuXG4gICAgICogQHBhcmFtIHtUZXN0SWFtUGVybWlzc2lvbnNPcHRpb25zfSBbb3B0aW9uc10gQ29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtUZXN0SWFtUGVybWlzc2lvbnNDYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUZXN0SWFtUGVybWlzc2lvbnNSZXNwb25zZT59XG4gICAgICpcbiAgICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvanNvbl9hcGkvdjEvYnVja2V0cy90ZXN0SWFtUGVybWlzc2lvbnN8IEJ1Y2tldHM6IHRlc3RJYW1QZXJtaXNzaW9ucyBBUEkgRG9jdW1lbnRhdGlvbn1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgXG4gICAgICogY29uc3Qge1N0b3JhZ2V9ID0gcmVxdWlyZSgnQGdvb2dsZS1jbG91ZC9zdG9yYWdlJyk7XG4gICAgICogY29uc3Qgc3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XG4gICAgICogY29uc3QgYnVja2V0ID0gc3RvcmFnZS5idWNrZXQoJ215LWJ1Y2tldCcpO1xuICAgICAqXG4gICAgICogLy8tXG4gICAgICogLy8gVGVzdCBhIHNpbmdsZSBwZXJtaXNzaW9uLlxuICAgICAqIC8vLVxuICAgICAqIGNvbnN0IHRlc3QgPSAnc3RvcmFnZS5idWNrZXRzLmRlbGV0ZSc7XG4gICAgICpcbiAgICAgKiBidWNrZXQuaWFtLnRlc3RQZXJtaXNzaW9ucyh0ZXN0LCBmdW5jdGlvbihlcnIsIHBlcm1pc3Npb25zLCBhcGlSZXNwb25zZSkge1xuICAgICAqICAgY29uc29sZS5sb2cocGVybWlzc2lvbnMpO1xuICAgICAqICAgLy8ge1xuICAgICAqICAgLy8gICBcInN0b3JhZ2UuYnVja2V0cy5kZWxldGVcIjogdHJ1ZVxuICAgICAqICAgLy8gfVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8tXG4gICAgICogLy8gVGVzdCBzZXZlcmFsIHBlcm1pc3Npb25zIGF0IG9uY2UuXG4gICAgICogLy8tXG4gICAgICogY29uc3QgdGVzdHMgPSBbXG4gICAgICogICAnc3RvcmFnZS5idWNrZXRzLmRlbGV0ZScsXG4gICAgICogICAnc3RvcmFnZS5idWNrZXRzLmdldCdcbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogYnVja2V0LmlhbS50ZXN0UGVybWlzc2lvbnModGVzdHMsIGZ1bmN0aW9uKGVyciwgcGVybWlzc2lvbnMpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHBlcm1pc3Npb25zKTtcbiAgICAgKiAgIC8vIHtcbiAgICAgKiAgIC8vICAgXCJzdG9yYWdlLmJ1Y2tldHMuZGVsZXRlXCI6IGZhbHNlLFxuICAgICAqICAgLy8gICBcInN0b3JhZ2UuYnVja2V0cy5nZXRcIjogdHJ1ZVxuICAgICAqICAgLy8gfVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8tXG4gICAgICogLy8gSWYgdGhlIGNhbGxiYWNrIGlzIG9taXR0ZWQsIHdlJ2xsIHJldHVybiBhIFByb21pc2UuXG4gICAgICogLy8tXG4gICAgICogYnVja2V0LmlhbS50ZXN0UGVybWlzc2lvbnModGVzdCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICogICBjb25zdCBwZXJtaXNzaW9ucyA9IGRhdGFbMF07XG4gICAgICogICBjb25zdCBhcGlSZXNwb25zZSA9IGRhdGFbMV07XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdGVzdFBlcm1pc3Npb25zKHBlcm1pc3Npb25zLCBvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHBlcm1pc3Npb25zKSAmJiB0eXBlb2YgcGVybWlzc2lvbnMgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSUFNRXhjZXB0aW9uTWVzc2FnZXMuUEVSTUlTU0lPTlNfUkVRVUlSRUQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgY2FsbGJhY2s6IGNiIH0gPSBub3JtYWxpemUob3B0aW9uc09yQ2FsbGJhY2ssIGNhbGxiYWNrKTtcbiAgICAgICAgY29uc3QgcGVybWlzc2lvbnNBcnJheSA9IEFycmF5LmlzQXJyYXkocGVybWlzc2lvbnMpXG4gICAgICAgICAgICA/IHBlcm1pc3Npb25zXG4gICAgICAgICAgICA6IFtwZXJtaXNzaW9uc107XG4gICAgICAgIGNvbnN0IHJlcSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgcGVybWlzc2lvbnM6IHBlcm1pc3Npb25zQXJyYXksXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlcXVlc3RfKHtcbiAgICAgICAgICAgIHVyaTogJy9pYW0vdGVzdFBlcm1pc3Npb25zJyxcbiAgICAgICAgICAgIHFzOiByZXEsXG4gICAgICAgICAgICB1c2VRdWVyeXN0cmluZzogdHJ1ZSxcbiAgICAgICAgfSwgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNiKGVyciwgbnVsbCwgcmVzcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlUGVybWlzc2lvbnMgPSBBcnJheS5pc0FycmF5KHJlc3AucGVybWlzc2lvbnMpXG4gICAgICAgICAgICAgICAgPyByZXNwLnBlcm1pc3Npb25zXG4gICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgIGNvbnN0IHBlcm1pc3Npb25zSGFzaCA9IHBlcm1pc3Npb25zQXJyYXkucmVkdWNlKChhY2MsIHBlcm1pc3Npb24pID0+IHtcbiAgICAgICAgICAgICAgICBhY2NbcGVybWlzc2lvbl0gPSBhdmFpbGFibGVQZXJtaXNzaW9ucy5pbmRleE9mKHBlcm1pc3Npb24pID4gLTE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgICAgIGNiKG51bGwsIHBlcm1pc3Npb25zSGFzaCwgcmVzcCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8qISBEZXZlbG9wZXIgRG9jdW1lbnRhdGlvblxuICpcbiAqIEFsbCBhc3luYyBtZXRob2RzIChleGNlcHQgZm9yIHN0cmVhbXMpIHdpbGwgcmV0dXJuIGEgUHJvbWlzZSBpbiB0aGUgZXZlbnRcbiAqIHRoYXQgYSBjYWxsYmFjayBpcyBvbWl0dGVkLlxuICovXG5wcm9taXNpZnlBbGwoSWFtKTtcbmV4cG9ydCB7IElhbSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/iam.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* reexport safe */ _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ApiError),\n/* harmony export */   Bucket: () => (/* reexport safe */ _bucket_js__WEBPACK_IMPORTED_MODULE_2__.Bucket),\n/* harmony export */   CRC32C: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C),\n/* harmony export */   CRC32C_DEFAULT_VALIDATOR_GENERATOR: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C_DEFAULT_VALIDATOR_GENERATOR),\n/* harmony export */   CRC32C_EXCEPTION_MESSAGES: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C_EXCEPTION_MESSAGES),\n/* harmony export */   CRC32C_EXTENSIONS: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C_EXTENSIONS),\n/* harmony export */   CRC32C_EXTENSION_TABLE: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C_EXTENSION_TABLE),\n/* harmony export */   Channel: () => (/* reexport safe */ _channel_js__WEBPACK_IMPORTED_MODULE_4__.Channel),\n/* harmony export */   File: () => (/* reexport safe */ _file_js__WEBPACK_IMPORTED_MODULE_5__.File),\n/* harmony export */   HashStreamValidator: () => (/* reexport safe */ _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_6__.HashStreamValidator),\n/* harmony export */   HmacKey: () => (/* reexport safe */ _hmacKey_js__WEBPACK_IMPORTED_MODULE_7__.HmacKey),\n/* harmony export */   Iam: () => (/* reexport safe */ _iam_js__WEBPACK_IMPORTED_MODULE_8__.Iam),\n/* harmony export */   IdempotencyStrategy: () => (/* reexport safe */ _storage_js__WEBPACK_IMPORTED_MODULE_1__.IdempotencyStrategy),\n/* harmony export */   MultiPartUploadError: () => (/* reexport safe */ _transfer_manager_js__WEBPACK_IMPORTED_MODULE_10__.MultiPartUploadError),\n/* harmony export */   Notification: () => (/* reexport safe */ _notification_js__WEBPACK_IMPORTED_MODULE_9__.Notification),\n/* harmony export */   RETRYABLE_ERR_FN_DEFAULT: () => (/* reexport safe */ _storage_js__WEBPACK_IMPORTED_MODULE_1__.RETRYABLE_ERR_FN_DEFAULT),\n/* harmony export */   Storage: () => (/* reexport safe */ _storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage),\n/* harmony export */   TransferManager: () => (/* reexport safe */ _transfer_manager_js__WEBPACK_IMPORTED_MODULE_10__.TransferManager)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _bucket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bucket.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var _channel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./channel.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/channel.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n/* harmony import */ var _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hash-stream-validator.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js\");\n/* harmony import */ var _hmacKey_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hmacKey.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js\");\n/* harmony import */ var _iam_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./iam.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/iam.js\");\n/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./notification.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/notification.js\");\n/* harmony import */ var _transfer_manager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./transfer-manager.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/transfer-manager.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * The `@google-cloud/storage` package has a single named export which is the\n * {@link Storage} (ES6) class, which should be instantiated with `new`.\n *\n * See {@link Storage} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Storage} @google-cloud/storage\n * @alias nodejs-storage\n *\n * @example\n * Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/storage\n * ```\n *\n * @example\n * Import the client library\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * ```\n *\n * @example\n * Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:\n * ```\n * const storage = new Storage();\n * ```\n *\n * @example\n * Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:\n * ```\n * const storage = new Storage({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n * ```\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:storage_quickstart\n * Full quickstart example:\n */\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGVBQWU7QUFDbkI7QUFDQSxRQUFRLGVBQWUsS0FBSyxvQkFBb0I7QUFDaEQ7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxTQUFTO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDbUM7QUFDakQ7QUFDVjtBQUNXO0FBQ0w7QUFDUztBQUNIO0FBQ1I7QUFDa0I7QUFDWiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIFRoZSBgQGdvb2dsZS1jbG91ZC9zdG9yYWdlYCBwYWNrYWdlIGhhcyBhIHNpbmdsZSBuYW1lZCBleHBvcnQgd2hpY2ggaXMgdGhlXG4gKiB7QGxpbmsgU3RvcmFnZX0gKEVTNikgY2xhc3MsIHdoaWNoIHNob3VsZCBiZSBpbnN0YW50aWF0ZWQgd2l0aCBgbmV3YC5cbiAqXG4gKiBTZWUge0BsaW5rIFN0b3JhZ2V9IGFuZCB7QGxpbmsgQ2xpZW50Q29uZmlnfSBmb3IgY2xpZW50IG1ldGhvZHMgYW5kXG4gKiBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKlxuICogQG1vZHVsZSB7U3RvcmFnZX0gQGdvb2dsZS1jbG91ZC9zdG9yYWdlXG4gKiBAYWxpYXMgbm9kZWpzLXN0b3JhZ2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSW5zdGFsbCB0aGUgY2xpZW50IGxpYnJhcnkgd2l0aCA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnBtanMuY29tL1wiPm5wbTwvYT46XG4gKiBgYGBcbiAqIG5wbSBpbnN0YWxsIC0tc2F2ZSBAZ29vZ2xlLWNsb3VkL3N0b3JhZ2VcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBJbXBvcnQgdGhlIGNsaWVudCBsaWJyYXJ5XG4gKiBgYGBcbiAqIGNvbnN0IHtTdG9yYWdlfSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIENyZWF0ZSBhIGNsaWVudCB0aGF0IHVzZXMgPGFcbiAqIGhyZWY9XCJodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vZG9jcy9hdXRoZW50aWNhdGlvbi9wcm9kdWN0aW9uI3Byb3ZpZGluZ19jcmVkZW50aWFsc190b195b3VyX2FwcGxpY2F0aW9uXCI+QXBwbGljYXRpb25cbiAqIERlZmF1bHQgQ3JlZGVudGlhbHMgKEFEQyk8L2E+OlxuICogYGBgXG4gKiBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBDcmVhdGUgYSBjbGllbnQgd2l0aCA8YVxuICogaHJlZj1cImh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9kb2NzL2F1dGhlbnRpY2F0aW9uL3Byb2R1Y3Rpb24jb2J0YWluaW5nX2FuZF9wcm92aWRpbmdfc2VydmljZV9hY2NvdW50X2NyZWRlbnRpYWxzX21hbnVhbGx5XCI+ZXhwbGljaXRcbiAqIGNyZWRlbnRpYWxzPC9hPjpcbiAqIGBgYFxuICogY29uc3Qgc3RvcmFnZSA9IG5ldyBTdG9yYWdlKHsgcHJvamVjdElkOlxuICogJ3lvdXItcHJvamVjdC1pZCcsIGtleUZpbGVuYW1lOiAnL3BhdGgvdG8va2V5ZmlsZS5qc29uJ1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5pbmNsdWRlOnNhbXBsZXMvcXVpY2tzdGFydC5qczwvY2FwdGlvbj5cbiAqIHJlZ2lvbl90YWc6c3RvcmFnZV9xdWlja3N0YXJ0XG4gKiBGdWxsIHF1aWNrc3RhcnQgZXhhbXBsZTpcbiAqL1xuZXhwb3J0IHsgQXBpRXJyb3IgfSBmcm9tICcuL25vZGVqcy1jb21tb24vaW5kZXguanMnO1xuZXhwb3J0IHsgSWRlbXBvdGVuY3lTdHJhdGVneSwgUkVUUllBQkxFX0VSUl9GTl9ERUZBVUxULCBTdG9yYWdlLCB9IGZyb20gJy4vc3RvcmFnZS5qcyc7XG5leHBvcnQgeyBCdWNrZXQsIH0gZnJvbSAnLi9idWNrZXQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmMzMmMuanMnO1xuZXhwb3J0IHsgQ2hhbm5lbCB9IGZyb20gJy4vY2hhbm5lbC5qcyc7XG5leHBvcnQgeyBGaWxlLCB9IGZyb20gJy4vZmlsZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2hhc2gtc3RyZWFtLXZhbGlkYXRvci5qcyc7XG5leHBvcnQgeyBIbWFjS2V5LCB9IGZyb20gJy4vaG1hY0tleS5qcyc7XG5leHBvcnQgeyBJYW0sIH0gZnJvbSAnLi9pYW0uanMnO1xuZXhwb3J0IHsgTm90aWZpY2F0aW9uLCB9IGZyb20gJy4vbm90aWZpY2F0aW9uLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNmZXItbWFuYWdlci5qcyc7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_2__.ApiError),\n/* harmony export */   Service: () => (/* reexport safe */ _service_js__WEBPACK_IMPORTED_MODULE_0__.Service),\n/* harmony export */   ServiceObject: () => (/* reexport safe */ _service_object_js__WEBPACK_IMPORTED_MODULE_1__.ServiceObject),\n/* harmony export */   util: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_2__.util)\n/* harmony export */ });\n/* harmony import */ var _service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./service.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js\");\n/* harmony import */ var _service_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./service-object.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service-object.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvbm9kZWpzLWNvbW1vbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdDO0FBQ2E7QUFDVCIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvbm9kZWpzLWNvbW1vbi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBTZXJ2aWNlLCB9IGZyb20gJy4vc2VydmljZS5qcyc7XG5leHBvcnQgeyBTZXJ2aWNlT2JqZWN0LCB9IGZyb20gJy4vc2VydmljZS1vYmplY3QuanMnO1xuZXhwb3J0IHsgQXBpRXJyb3IsIHV0aWwsIH0gZnJvbSAnLi91dGlsLmpzJztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service-object.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service-object.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceObject: () => (/* binding */ ServiceObject)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * ServiceObject is a base class, meant to be inherited from by a \"service\n * object,\" like a BigQuery dataset or Storage bucket.\n *\n * Most of the time, these objects share common functionality; they can be\n * created or deleted, and you can get or set their metadata.\n *\n * By inheriting from this class, a service object will be extended with these\n * shared behaviors. Note that any method can be overridden when the service\n * object requires specific behavior.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass ServiceObject extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    /*\n     * @constructor\n     * @alias module:common/service-object\n     *\n     * @private\n     *\n     * @param {object} config - Configuration object.\n     * @param {string} config.baseUrl - The base URL to make API requests to.\n     * @param {string} config.createMethod - The method which creates this object.\n     * @param {string=} config.id - The identifier of the object. For example, the\n     *     name of a Storage bucket or Pub/Sub topic.\n     * @param {object=} config.methods - A map of each method name that should be inherited.\n     * @param {object} config.methods[].reqOpts - Default request options for this\n     *     particular method. A common use case is when `setMetadata` requires a\n     *     `PUT` method to override the default `PATCH`.\n     * @param {object} config.parent - The parent service instance. For example, an\n     *     instance of Storage if the object is Bucket.\n     */\n    constructor(config) {\n        super();\n        this.metadata = {};\n        this.baseUrl = config.baseUrl;\n        this.parent = config.parent; // Parent class.\n        this.id = config.id; // Name or ID (e.g. dataset ID, bucket name, etc).\n        this.createMethod = config.createMethod;\n        this.methods = config.methods || {};\n        this.interceptors = [];\n        this.projectId = config.projectId;\n        if (config.methods) {\n            // This filters the ServiceObject instance (e.g. a \"File\") to only have\n            // the configured methods. We make a couple of exceptions for core-\n            // functionality (\"request()\" and \"getRequestInterceptors()\")\n            Object.getOwnPropertyNames(ServiceObject.prototype)\n                .filter(methodName => {\n                return (\n                // All ServiceObjects need `request` and `getRequestInterceptors`.\n                // clang-format off\n                !/^request/.test(methodName) &&\n                    !/^getRequestInterceptors/.test(methodName) &&\n                    // clang-format on\n                    // The ServiceObject didn't redefine the method.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this[methodName] ===\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        ServiceObject.prototype[methodName] &&\n                    // This method isn't wanted.\n                    !config.methods[methodName]);\n            })\n                .forEach(methodName => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this[methodName] = undefined;\n            });\n        }\n    }\n    create(optionsOrCallback, callback) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const args = [this.id];\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        if (typeof optionsOrCallback === 'object') {\n            args.push(optionsOrCallback);\n        }\n        // Wrap the callback to return *this* instance of the object, not the\n        // newly-created one.\n        // tslint: disable-next-line no-any\n        function onCreate(...args) {\n            const [err, instance] = args;\n            if (!err) {\n                self.metadata = instance.metadata;\n                if (self.id && instance.metadata) {\n                    self.id = instance.metadata.id;\n                }\n                args[1] = self; // replace the created `instance` with this one.\n            }\n            callback(...args);\n        }\n        args.push(onCreate);\n        // eslint-disable-next-line prefer-spread\n        this.createMethod.apply(null, args);\n    }\n    delete(optionsOrCallback, cb) {\n        var _a;\n        const [options, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const ignoreNotFound = options.ignoreNotFound;\n        delete options.ignoreNotFound;\n        const methodConfig = (typeof this.methods.delete === 'object' && this.methods.delete) || {};\n        const reqOpts = {\n            method: 'DELETE',\n            uri: '',\n            ...methodConfig.reqOpts,\n            qs: {\n                ...(_a = methodConfig.reqOpts) === null || _a === void 0 ? void 0 : _a.qs,\n                ...options,\n            },\n        };\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {\n            if (err) {\n                if (err.code === 404 && ignoreNotFound) {\n                    err = null;\n                }\n            }\n            callback(err, res);\n        });\n    }\n    exists(optionsOrCallback, cb) {\n        const [options, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        this.get(options, err => {\n            if (err) {\n                if (err.code === 404) {\n                    callback(null, false);\n                }\n                else {\n                    callback(err);\n                }\n                return;\n            }\n            callback(null, true);\n        });\n    }\n    get(optionsOrCallback, cb) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const [opts, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const options = Object.assign({}, opts);\n        const autoCreate = options.autoCreate && typeof this.create === 'function';\n        delete options.autoCreate;\n        function onCreate(err, instance, apiResponse) {\n            if (err) {\n                if (err.code === 409) {\n                    self.get(options, callback);\n                    return;\n                }\n                callback(err, null, apiResponse);\n                return;\n            }\n            callback(null, instance, apiResponse);\n        }\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                if (err.code === 404 && autoCreate) {\n                    const args = [];\n                    if (Object.keys(options).length > 0) {\n                        args.push(options);\n                    }\n                    args.push(onCreate);\n                    self.create(...args);\n                    return;\n                }\n                callback(err, null, metadata);\n                return;\n            }\n            callback(null, self, metadata);\n        });\n    }\n    getMetadata(optionsOrCallback, cb) {\n        var _a;\n        const [options, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const methodConfig = (typeof this.methods.getMetadata === 'object' &&\n            this.methods.getMetadata) ||\n            {};\n        const reqOpts = {\n            uri: '',\n            ...methodConfig.reqOpts,\n            qs: {\n                ...(_a = methodConfig.reqOpts) === null || _a === void 0 ? void 0 : _a.qs,\n                ...options,\n            },\n        };\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {\n            this.metadata = body;\n            callback(err, this.metadata, res);\n        });\n    }\n    /**\n     * Return the user's custom request interceptors.\n     */\n    getRequestInterceptors() {\n        // Interceptors should be returned in the order they were assigned.\n        const localInterceptors = this.interceptors\n            .filter(interceptor => typeof interceptor.request === 'function')\n            .map(interceptor => interceptor.request);\n        return this.parent.getRequestInterceptors().concat(localInterceptors);\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        var _a, _b;\n        const [options, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const methodConfig = (typeof this.methods.setMetadata === 'object' &&\n            this.methods.setMetadata) ||\n            {};\n        const reqOpts = {\n            method: 'PATCH',\n            uri: '',\n            ...methodConfig.reqOpts,\n            json: {\n                ...(_a = methodConfig.reqOpts) === null || _a === void 0 ? void 0 : _a.json,\n                ...metadata,\n            },\n            qs: {\n                ...(_b = methodConfig.reqOpts) === null || _b === void 0 ? void 0 : _b.qs,\n                ...options,\n            },\n        };\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {\n            this.metadata = body;\n            callback(err, this.metadata, res);\n        });\n    }\n    request_(reqOpts, callback) {\n        reqOpts = { ...reqOpts };\n        if (this.projectId) {\n            reqOpts.projectId = this.projectId;\n        }\n        const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n        const uriComponents = [this.baseUrl, this.id || '', reqOpts.uri];\n        if (isAbsoluteUrl) {\n            uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n        }\n        reqOpts.uri = uriComponents\n            .filter(x => x.trim()) // Limit to non-empty strings.\n            .map(uriComponent => {\n            const trimSlashesRegex = /^\\/*|\\/*$/g;\n            return uriComponent.replace(trimSlashesRegex, '');\n        })\n            .join('/');\n        const childInterceptors = Array.isArray(reqOpts.interceptors_)\n            ? reqOpts.interceptors_\n            : [];\n        const localInterceptors = [].slice.call(this.interceptors);\n        reqOpts.interceptors_ = childInterceptors.concat(localInterceptors);\n        if (reqOpts.shouldReturnStream) {\n            return this.parent.requestStream(reqOpts);\n        }\n        this.parent.request(reqOpts, callback);\n    }\n    request(reqOpts, callback) {\n        this.request_(reqOpts, callback);\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     */\n    requestStream(reqOpts) {\n        const opts = { ...reqOpts, shouldReturnStream: true };\n        return this.request_(opts);\n    }\n}\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__.promisifyAll)(ServiceObject, { exclude: ['getRequestInterceptors'] });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service-object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_PROJECT_ID_TOKEN: () => (/* binding */ DEFAULT_PROJECT_ID_TOKEN),\n/* harmony export */   Service: () => (/* binding */ Service)\n/* harmony export */ });\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst DEFAULT_PROJECT_ID_TOKEN = '{{projectId}}';\nclass Service {\n    /**\n     * Service is a base class, meant to be inherited from by a \"service,\" like\n     * BigQuery or Storage.\n     *\n     * This handles making authenticated requests by exposing a `makeReq_`\n     * function.\n     *\n     * @constructor\n     * @alias module:common/service\n     *\n     * @param {object} config - Configuration object.\n     * @param {string} config.baseUrl - The base URL to make API requests to.\n     * @param {string[]} config.scopes - The scopes required for the request.\n     * @param {object=} options - [Configuration object](#/docs).\n     */\n    constructor(config, options = {}) {\n        this.baseUrl = config.baseUrl;\n        this.apiEndpoint = config.apiEndpoint;\n        this.timeout = options.timeout;\n        this.globalInterceptors = Array.isArray(options.interceptors_)\n            ? options.interceptors_\n            : [];\n        this.interceptors = [];\n        this.packageJson = config.packageJson;\n        this.projectId = options.projectId || DEFAULT_PROJECT_ID_TOKEN;\n        this.projectIdRequired = config.projectIdRequired !== false;\n        this.providedUserAgent = options.userAgent;\n        this.universeDomain = options.universeDomain || google_auth_library__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_UNIVERSE;\n        this.customEndpoint = config.customEndpoint || false;\n        this.makeAuthenticatedRequest = _util_js__WEBPACK_IMPORTED_MODULE_1__.util.makeAuthenticatedRequestFactory({\n            ...config,\n            projectIdRequired: this.projectIdRequired,\n            projectId: this.projectId,\n            authClient: options.authClient || config.authClient,\n            credentials: options.credentials,\n            keyFile: options.keyFilename,\n            email: options.email,\n            clientOptions: {\n                universeDomain: options.universeDomain,\n                ...options.clientOptions,\n            },\n        });\n        this.authClient = this.makeAuthenticatedRequest.authClient;\n        const isCloudFunctionEnv = !!process.env.FUNCTION_NAME;\n        if (isCloudFunctionEnv) {\n            this.interceptors.push({\n                request(reqOpts) {\n                    reqOpts.forever = false;\n                    return reqOpts;\n                },\n            });\n        }\n    }\n    /**\n     * Return the user's custom request interceptors.\n     */\n    getRequestInterceptors() {\n        // Interceptors should be returned in the order they were assigned.\n        return [].slice\n            .call(this.globalInterceptors)\n            .concat(this.interceptors)\n            .filter(interceptor => typeof interceptor.request === 'function')\n            .map(interceptor => interceptor.request);\n    }\n    getProjectId(callback) {\n        if (!callback) {\n            return this.getProjectIdAsync();\n        }\n        this.getProjectIdAsync().then(p => callback(null, p), callback);\n    }\n    async getProjectIdAsync() {\n        const projectId = await this.authClient.getProjectId();\n        if (this.projectId === DEFAULT_PROJECT_ID_TOKEN && projectId) {\n            this.projectId = projectId;\n        }\n        return this.projectId;\n    }\n    request_(reqOpts, callback) {\n        reqOpts = { ...reqOpts, timeout: this.timeout };\n        const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n        const uriComponents = [this.baseUrl];\n        if (this.projectIdRequired) {\n            if (reqOpts.projectId) {\n                uriComponents.push('projects');\n                uriComponents.push(reqOpts.projectId);\n            }\n            else {\n                uriComponents.push('projects');\n                uriComponents.push(this.projectId);\n            }\n        }\n        uriComponents.push(reqOpts.uri);\n        if (isAbsoluteUrl) {\n            uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n        }\n        reqOpts.uri = uriComponents\n            .map(uriComponent => {\n            const trimSlashesRegex = /^\\/*|\\/*$/g;\n            return uriComponent.replace(trimSlashesRegex, '');\n        })\n            .join('/')\n            // Some URIs have colon separators.\n            // Bad: https://.../projects/:list\n            // Good: https://.../projects:list\n            .replace(/\\/:/g, ':');\n        const requestInterceptors = this.getRequestInterceptors();\n        const interceptorArray = Array.isArray(reqOpts.interceptors_)\n            ? reqOpts.interceptors_\n            : [];\n        interceptorArray.forEach(interceptor => {\n            if (typeof interceptor.request === 'function') {\n                requestInterceptors.push(interceptor.request);\n            }\n        });\n        requestInterceptors.forEach(requestInterceptor => {\n            reqOpts = requestInterceptor(reqOpts);\n        });\n        delete reqOpts.interceptors_;\n        const pkg = this.packageJson;\n        let userAgent = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgentString)();\n        if (this.providedUserAgent) {\n            userAgent = `${this.providedUserAgent} ${userAgent}`;\n        }\n        reqOpts.headers = {\n            ...reqOpts.headers,\n            'User-Agent': userAgent,\n            'x-goog-api-client': `${(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.getRuntimeTrackingString)()} gccl/${pkg.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.getModuleFormat)()} gccl-invocation-id/${uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()}`,\n        };\n        if (reqOpts[_util_js__WEBPACK_IMPORTED_MODULE_1__.GCCL_GCS_CMD_KEY]) {\n            reqOpts.headers['x-goog-api-client'] +=\n                ` gccl-gcs-cmd/${reqOpts[_util_js__WEBPACK_IMPORTED_MODULE_1__.GCCL_GCS_CMD_KEY]}`;\n        }\n        if (reqOpts.shouldReturnStream) {\n            return this.makeAuthenticatedRequest(reqOpts);\n        }\n        else {\n            this.makeAuthenticatedRequest(reqOpts, callback);\n        }\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     * @param {function} callback - The callback function passed to `request`.\n     */\n    request(reqOpts, callback) {\n        Service.prototype.request_.call(this, reqOpts, callback);\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     */\n    requestStream(reqOpts) {\n        const opts = { ...reqOpts, shouldReturnStream: true };\n        return Service.prototype.request_.call(this, opts);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* binding */ ApiError),\n/* harmony export */   GCCL_GCS_CMD_KEY: () => (/* binding */ GCCL_GCS_CMD_KEY),\n/* harmony export */   PartialFailureError: () => (/* binding */ PartialFailureError),\n/* harmony export */   Util: () => (/* binding */ Util),\n/* harmony export */   util: () => (/* binding */ util)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/projectify */ \"(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js\");\n/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-entities */ \"(rsc)/./node_modules/html-entities/dist/esm/index.js\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var retry_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! retry-request */ \"(rsc)/./node_modules/retry-request/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var teeny_request__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! teeny-request */ \"(rsc)/./node_modules/teeny-request/build/src/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./service.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var duplexify__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*!\n * @module common/util\n */\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\nconst packageJson = (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_9__.getPackageJSON)();\n/**\n * A unique symbol for providing a `gccl-gcs-cmd` value\n * for the `X-Goog-API-Client` header.\n *\n * E.g. the `V` in `X-Goog-API-Client: gccl-gcs-cmd/V`\n **/\nconst GCCL_GCS_CMD_KEY = Symbol.for('GCCL_GCS_CMD');\nconst requestDefaults = {\n    timeout: 60000,\n    gzip: true,\n    forever: true,\n    pool: {\n        maxSockets: Infinity,\n    },\n};\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n * @private\n */\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n * @private\n */\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Custom error type for API errors.\n *\n * @param {object} errorBody - Error object.\n */\nclass ApiError extends Error {\n    constructor(errorBodyOrMessage) {\n        super();\n        if (typeof errorBodyOrMessage !== 'object') {\n            this.message = errorBodyOrMessage || '';\n            return;\n        }\n        const errorBody = errorBodyOrMessage;\n        this.code = errorBody.code;\n        this.errors = errorBody.errors;\n        this.response = errorBody.response;\n        try {\n            this.errors = JSON.parse(this.response.body).error.errors;\n        }\n        catch (e) {\n            this.errors = errorBody.errors;\n        }\n        this.message = ApiError.createMultiErrorMessage(errorBody, this.errors);\n        Error.captureStackTrace(this);\n    }\n    /**\n     * Pieces together an error message by combining all unique error messages\n     * returned from a single GoogleError\n     *\n     * @private\n     *\n     * @param {GoogleErrorBody} err The original error.\n     * @param {GoogleInnerError[]} [errors] Inner errors, if any.\n     * @returns {string}\n     */\n    static createMultiErrorMessage(err, errors) {\n        const messages = new Set();\n        if (err.message) {\n            messages.add(err.message);\n        }\n        if (errors && errors.length) {\n            errors.forEach(({ message }) => messages.add(message));\n        }\n        else if (err.response && err.response.body) {\n            messages.add(html_entities__WEBPACK_IMPORTED_MODULE_1__.decode(err.response.body.toString()));\n        }\n        else if (!err.message) {\n            messages.add('A failure occurred during this request.');\n        }\n        let messageArr = Array.from(messages);\n        if (messageArr.length > 1) {\n            messageArr = messageArr.map((message, i) => `    ${i + 1}. ${message}`);\n            messageArr.unshift('Multiple errors occurred during the request. Please see the `errors` array for complete details.\\n');\n            messageArr.push('\\n');\n        }\n        return messageArr.join('\\n');\n    }\n}\n/**\n * Custom error type for partial errors returned from the API.\n *\n * @param {object} b - Error object.\n */\nclass PartialFailureError extends Error {\n    constructor(b) {\n        super();\n        const errorObject = b;\n        this.errors = errorObject.errors;\n        this.name = 'PartialFailureError';\n        this.response = errorObject.response;\n        this.message = ApiError.createMultiErrorMessage(errorObject, this.errors);\n    }\n}\nclass Util {\n    constructor() {\n        this.ApiError = ApiError;\n        this.PartialFailureError = PartialFailureError;\n    }\n    /**\n     * No op.\n     *\n     * @example\n     * function doSomething(callback) {\n     *   callback = callback || noop;\n     * }\n     */\n    noop() { }\n    /**\n     * Uniformly process an API response.\n     *\n     * @param {*} err - Error value.\n     * @param {*} resp - Response value.\n     * @param {*} body - Body value.\n     * @param {function} callback - The callback function.\n     */\n    handleResp(err, resp, body, callback) {\n        callback = callback || util.noop;\n        const parsedResp = {\n            err: err || null,\n            ...(resp && util.parseHttpRespMessage(resp)),\n            ...(body && util.parseHttpRespBody(body)),\n        };\n        // Assign the parsed body to resp.body, even if { json: false } was passed\n        // as a request option.\n        // We assume that nobody uses the previously unparsed value of resp.body.\n        if (!parsedResp.err && resp && typeof parsedResp.body === 'object') {\n            parsedResp.resp.body = parsedResp.body;\n        }\n        if (parsedResp.err && resp) {\n            parsedResp.err.response = resp;\n        }\n        callback(parsedResp.err, parsedResp.body, parsedResp.resp);\n    }\n    /**\n     * Sniff an incoming HTTP response message for errors.\n     *\n     * @param {object} httpRespMessage - An incoming HTTP response message from `request`.\n     * @return {object} parsedHttpRespMessage - The parsed response.\n     * @param {?error} parsedHttpRespMessage.err - An error detected.\n     * @param {object} parsedHttpRespMessage.resp - The original response object.\n     */\n    parseHttpRespMessage(httpRespMessage) {\n        const parsedHttpRespMessage = {\n            resp: httpRespMessage,\n        };\n        if (httpRespMessage.statusCode < 200 || httpRespMessage.statusCode > 299) {\n            // Unknown error. Format according to ApiError standard.\n            parsedHttpRespMessage.err = new ApiError({\n                errors: new Array(),\n                code: httpRespMessage.statusCode,\n                message: httpRespMessage.statusMessage,\n                response: httpRespMessage,\n            });\n        }\n        return parsedHttpRespMessage;\n    }\n    /**\n     * Parse the response body from an HTTP request.\n     *\n     * @param {object} body - The response body.\n     * @return {object} parsedHttpRespMessage - The parsed response.\n     * @param {?error} parsedHttpRespMessage.err - An error detected.\n     * @param {object} parsedHttpRespMessage.body - The original body value provided\n     *     will try to be JSON.parse'd. If it's successful, the parsed value will\n     * be returned here, otherwise the original value and an error will be returned.\n     */\n    parseHttpRespBody(body) {\n        const parsedHttpRespBody = {\n            body,\n        };\n        if (typeof body === 'string') {\n            try {\n                parsedHttpRespBody.body = JSON.parse(body);\n            }\n            catch (err) {\n                parsedHttpRespBody.body = body;\n            }\n        }\n        if (parsedHttpRespBody.body && parsedHttpRespBody.body.error) {\n            // Error from JSON API.\n            parsedHttpRespBody.err = new ApiError(parsedHttpRespBody.body.error);\n        }\n        return parsedHttpRespBody;\n    }\n    /**\n     * Take a Duplexify stream, fetch an authenticated connection header, and\n     * create an outgoing writable stream.\n     *\n     * @param {Duplexify} dup - Duplexify stream.\n     * @param {object} options - Configuration object.\n     * @param {module:common/connection} options.connection - A connection instance used to get a token with and send the request through.\n     * @param {object} options.metadata - Metadata to send at the head of the request.\n     * @param {object} options.request - Request object, in the format of a standard Node.js http.request() object.\n     * @param {string=} options.request.method - Default: \"POST\".\n     * @param {string=} options.request.qs.uploadType - Default: \"multipart\".\n     * @param {string=} options.streamContentType - Default: \"application/octet-stream\".\n     * @param {function} onComplete - Callback, executed after the writable Request stream has completed.\n     */\n    makeWritableStream(dup, options, onComplete) {\n        var _a;\n        onComplete = onComplete || util.noop;\n        const writeStream = new ProgressStream();\n        writeStream.on('progress', evt => dup.emit('progress', evt));\n        dup.setWritable(writeStream);\n        const defaultReqOpts = {\n            method: 'POST',\n            qs: {\n                uploadType: 'multipart',\n            },\n            timeout: 0,\n            maxRetries: 0,\n        };\n        const metadata = options.metadata || {};\n        const reqOpts = {\n            ...defaultReqOpts,\n            ...options.request,\n            qs: {\n                ...defaultReqOpts.qs,\n                ...(_a = options.request) === null || _a === void 0 ? void 0 : _a.qs,\n            },\n            multipart: [\n                {\n                    'Content-Type': 'application/json',\n                    body: JSON.stringify(metadata),\n                },\n                {\n                    'Content-Type': metadata.contentType || 'application/octet-stream',\n                    body: writeStream,\n                },\n            ],\n        };\n        options.makeAuthenticatedRequest(reqOpts, {\n            onAuthenticated(err, authenticatedReqOpts) {\n                if (err) {\n                    dup.destroy(err);\n                    return;\n                }\n                requestDefaults.headers = util._getDefaultHeaders(reqOpts[GCCL_GCS_CMD_KEY]);\n                const request = teeny_request__WEBPACK_IMPORTED_MODULE_5__.teenyRequest.defaults(requestDefaults);\n                request(authenticatedReqOpts, (err, resp, body) => {\n                    util.handleResp(err, resp, body, (err, data) => {\n                        if (err) {\n                            dup.destroy(err);\n                            return;\n                        }\n                        dup.emit('response', resp);\n                        onComplete(data);\n                    });\n                });\n            },\n        });\n    }\n    /**\n     * Returns true if the API request should be retried, given the error that was\n     * given the first time the request was attempted. This is used for rate limit\n     * related errors as well as intermittent server errors.\n     *\n     * @param {error} err - The API error to check if it is appropriate to retry.\n     * @return {boolean} True if the API request should be retried, false otherwise.\n     */\n    shouldRetryRequest(err) {\n        if (err) {\n            if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n                return true;\n            }\n            if (err.errors) {\n                for (const e of err.errors) {\n                    const reason = e.reason;\n                    if (reason === 'rateLimitExceeded') {\n                        return true;\n                    }\n                    if (reason === 'userRateLimitExceeded') {\n                        return true;\n                    }\n                    if (reason && reason.includes('EAI_AGAIN')) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Get a function for making authenticated requests.\n     *\n     * @param {object} config - Configuration object.\n     * @param {boolean=} config.autoRetry - Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * (default: true)\n     * @param {object=} config.credentials - Credentials object.\n     * @param {boolean=} config.customEndpoint - If true, just return the provided request options. Default: false.\n     * @param {boolean=} config.useAuthWithCustomEndpoint - If true, will authenticate when using a custom endpoint. Default: false.\n     * @param {string=} config.email - Account email address, required for PEM/P12 usage.\n     * @param {number=} config.maxRetries - Maximum number of automatic retries attempted before returning the error. (default: 3)\n     * @param {string=} config.keyFile - Path to a .json, .pem, or .p12 keyfile.\n     * @param {array} config.scopes - Array of scopes required for the API.\n     */\n    makeAuthenticatedRequestFactory(config) {\n        const googleAutoAuthConfig = { ...config };\n        if (googleAutoAuthConfig.projectId === _service_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_PROJECT_ID_TOKEN) {\n            delete googleAutoAuthConfig.projectId;\n        }\n        let authClient;\n        if (googleAutoAuthConfig.authClient instanceof google_auth_library__WEBPACK_IMPORTED_MODULE_2__.GoogleAuth) {\n            // Use an existing `GoogleAuth`\n            authClient = googleAutoAuthConfig.authClient;\n        }\n        else {\n            // Pass an `AuthClient` & `clientOptions` to `GoogleAuth`, if available\n            authClient = new google_auth_library__WEBPACK_IMPORTED_MODULE_2__.GoogleAuth({\n                ...googleAutoAuthConfig,\n                authClient: googleAutoAuthConfig.authClient,\n                clientOptions: googleAutoAuthConfig.clientOptions,\n            });\n        }\n        function makeAuthenticatedRequest(reqOpts, optionsOrCallback) {\n            let stream;\n            let projectId;\n            const reqConfig = { ...config };\n            let activeRequest_;\n            if (!optionsOrCallback) {\n                stream = duplexify__WEBPACK_IMPORTED_MODULE_8__();\n                reqConfig.stream = stream;\n            }\n            const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : undefined;\n            const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : undefined;\n            async function setProjectId() {\n                projectId = await authClient.getProjectId();\n            }\n            const onAuthenticated = async (err, authenticatedReqOpts) => {\n                const authLibraryError = err;\n                const autoAuthFailed = err &&\n                    typeof err.message === 'string' &&\n                    err.message.indexOf('Could not load the default credentials') > -1;\n                if (autoAuthFailed) {\n                    // Even though authentication failed, the API might not actually\n                    // care.\n                    authenticatedReqOpts = reqOpts;\n                }\n                if (!err || autoAuthFailed) {\n                    try {\n                        // Try with existing `projectId` value\n                        authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                        err = null;\n                    }\n                    catch (e) {\n                        if (e instanceof _google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.MissingProjectIdError) {\n                            // A `projectId` was required, but we don't have one.\n                            try {\n                                // Attempt to get the `projectId`\n                                await setProjectId();\n                                authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                                err = null;\n                            }\n                            catch (e) {\n                                // Re-use the \"Could not load the default credentials error\" if\n                                // auto auth failed.\n                                err = err || e;\n                            }\n                        }\n                        else {\n                            // Some other error unrelated to missing `projectId`\n                            err = err || e;\n                        }\n                    }\n                }\n                if (err) {\n                    if (stream) {\n                        stream.destroy(err);\n                    }\n                    else {\n                        const fn = options && options.onAuthenticated\n                            ? options.onAuthenticated\n                            : callback;\n                        fn(err);\n                    }\n                    return;\n                }\n                if (options && options.onAuthenticated) {\n                    options.onAuthenticated(null, authenticatedReqOpts);\n                }\n                else {\n                    activeRequest_ = util.makeRequest(authenticatedReqOpts, reqConfig, (apiResponseError, ...params) => {\n                        if (apiResponseError &&\n                            apiResponseError.code === 401 &&\n                            authLibraryError) {\n                            // Re-use the \"Could not load the default credentials error\" if\n                            // the API request failed due to missing credentials.\n                            apiResponseError = authLibraryError;\n                        }\n                        callback(apiResponseError, ...params);\n                    });\n                }\n            };\n            const prepareRequest = async () => {\n                try {\n                    const getProjectId = async () => {\n                        if (config.projectId &&\n                            config.projectId !== _service_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_PROJECT_ID_TOKEN) {\n                            // The user provided a project ID. We don't need to check with the\n                            // auth client, it could be incorrect.\n                            return config.projectId;\n                        }\n                        if (config.projectIdRequired === false) {\n                            // A projectId is not required. Return the default.\n                            return _service_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_PROJECT_ID_TOKEN;\n                        }\n                        return setProjectId();\n                    };\n                    const authorizeRequest = async () => {\n                        if (reqConfig.customEndpoint &&\n                            !reqConfig.useAuthWithCustomEndpoint) {\n                            // Using a custom API override. Do not use `google-auth-library` for\n                            // authentication. (ex: connecting to a local Datastore server)\n                            return reqOpts;\n                        }\n                        else {\n                            return authClient.authorizeRequest(reqOpts);\n                        }\n                    };\n                    const [_projectId, authorizedReqOpts] = await Promise.all([\n                        getProjectId(),\n                        authorizeRequest(),\n                    ]);\n                    if (_projectId) {\n                        projectId = _projectId;\n                    }\n                    return onAuthenticated(null, authorizedReqOpts);\n                }\n                catch (e) {\n                    return onAuthenticated(e);\n                }\n            };\n            prepareRequest();\n            if (stream) {\n                return stream;\n            }\n            return {\n                abort() {\n                    setImmediate(() => {\n                        if (activeRequest_) {\n                            activeRequest_.abort();\n                            activeRequest_ = null;\n                        }\n                    });\n                },\n            };\n        }\n        const mar = makeAuthenticatedRequest;\n        mar.getCredentials = authClient.getCredentials.bind(authClient);\n        mar.authClient = authClient;\n        return mar;\n    }\n    /**\n     * Make a request through the `retryRequest` module with built-in error\n     * handling and exponential back off.\n     *\n     * @param {object} reqOpts - Request options in the format `request` expects.\n     * @param {object=} config - Configuration object.\n     * @param {boolean=} config.autoRetry - Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * (default: true)\n     * @param {number=} config.maxRetries - Maximum number of automatic retries\n     *     attempted before returning the error. (default: 3)\n     * @param {object=} config.request - HTTP module for request calls.\n     * @param {function} callback - The callback function.\n     */\n    makeRequest(reqOpts, config, callback) {\n        var _a, _b, _c, _d, _e;\n        let autoRetryValue = AUTO_RETRY_DEFAULT;\n        if (config.autoRetry !== undefined) {\n            autoRetryValue = config.autoRetry;\n        }\n        else if (((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined) {\n            autoRetryValue = config.retryOptions.autoRetry;\n        }\n        let maxRetryValue = MAX_RETRY_DEFAULT;\n        if (config.maxRetries !== undefined) {\n            maxRetryValue = config.maxRetries;\n        }\n        else if (((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.maxRetries) !== undefined) {\n            maxRetryValue = config.retryOptions.maxRetries;\n        }\n        requestDefaults.headers = this._getDefaultHeaders(reqOpts[GCCL_GCS_CMD_KEY]);\n        const options = {\n            request: teeny_request__WEBPACK_IMPORTED_MODULE_5__.teenyRequest.defaults(requestDefaults),\n            retries: autoRetryValue !== false ? maxRetryValue : 0,\n            noResponseRetries: autoRetryValue !== false ? maxRetryValue : 0,\n            shouldRetryFn(httpRespMessage) {\n                var _a, _b;\n                const err = util.parseHttpRespMessage(httpRespMessage).err;\n                if ((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.retryableErrorFn) {\n                    return err && ((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.retryableErrorFn(err));\n                }\n                return err && util.shouldRetryRequest(err);\n            },\n            maxRetryDelay: (_c = config.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetryDelay,\n            retryDelayMultiplier: (_d = config.retryOptions) === null || _d === void 0 ? void 0 : _d.retryDelayMultiplier,\n            totalTimeout: (_e = config.retryOptions) === null || _e === void 0 ? void 0 : _e.totalTimeout,\n        };\n        if (typeof reqOpts.maxRetries === 'number') {\n            options.retries = reqOpts.maxRetries;\n            options.noResponseRetries = reqOpts.maxRetries;\n        }\n        if (!config.stream) {\n            return retry_request__WEBPACK_IMPORTED_MODULE_3__(reqOpts, options, \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (err, response, body) => {\n                util.handleResp(err, response, body, callback);\n            });\n        }\n        const dup = config.stream;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let requestStream;\n        const isGetRequest = (reqOpts.method || 'GET').toUpperCase() === 'GET';\n        if (isGetRequest) {\n            requestStream = retry_request__WEBPACK_IMPORTED_MODULE_3__(reqOpts, options);\n            dup.setReadable(requestStream);\n        }\n        else {\n            // Streaming writable HTTP requests cannot be retried.\n            requestStream = options.request(reqOpts);\n            dup.setWritable(requestStream);\n        }\n        // Replay the Request events back to the stream.\n        requestStream\n            .on('error', dup.destroy.bind(dup))\n            .on('response', dup.emit.bind(dup, 'response'))\n            .on('complete', dup.emit.bind(dup, 'complete'));\n        dup.abort = requestStream.abort;\n        return dup;\n    }\n    /**\n     * Decorate the options about to be made in a request.\n     *\n     * @param {object} reqOpts - The options to be passed to `request`.\n     * @param {string} projectId - The project ID.\n     * @return {object} reqOpts - The decorated reqOpts.\n     */\n    decorateRequest(reqOpts, projectId) {\n        delete reqOpts.autoPaginate;\n        delete reqOpts.autoPaginateVal;\n        delete reqOpts.objectMode;\n        if (reqOpts.qs !== null && typeof reqOpts.qs === 'object') {\n            delete reqOpts.qs.autoPaginate;\n            delete reqOpts.qs.autoPaginateVal;\n            reqOpts.qs = (0,_google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.replaceProjectIdToken)(reqOpts.qs, projectId);\n        }\n        if (Array.isArray(reqOpts.multipart)) {\n            reqOpts.multipart = reqOpts.multipart.map(part => {\n                return (0,_google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.replaceProjectIdToken)(part, projectId);\n            });\n        }\n        if (reqOpts.json !== null && typeof reqOpts.json === 'object') {\n            delete reqOpts.json.autoPaginate;\n            delete reqOpts.json.autoPaginateVal;\n            reqOpts.json = (0,_google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.replaceProjectIdToken)(reqOpts.json, projectId);\n        }\n        reqOpts.uri = (0,_google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.replaceProjectIdToken)(reqOpts.uri, projectId);\n        return reqOpts;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isCustomType(unknown, module) {\n        function getConstructorName(obj) {\n            return obj.constructor && obj.constructor.name.toLowerCase();\n        }\n        const moduleNameParts = module.split('/');\n        const parentModuleName = moduleNameParts[0] && moduleNameParts[0].toLowerCase();\n        const subModuleName = moduleNameParts[1] && moduleNameParts[1].toLowerCase();\n        if (subModuleName && getConstructorName(unknown) !== subModuleName) {\n            return false;\n        }\n        let walkingModule = unknown;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (getConstructorName(walkingModule) === parentModuleName) {\n                return true;\n            }\n            walkingModule = walkingModule.parent;\n            if (!walkingModule) {\n                return false;\n            }\n        }\n    }\n    /**\n     * Given two parameters, figure out if this is either:\n     *  - Just a callback function\n     *  - An options object, and then a callback function\n     * @param optionsOrCallback An options object or callback.\n     * @param cb A potentially undefined callback.\n     */\n    maybeOptionsOrCallback(optionsOrCallback, cb) {\n        return typeof optionsOrCallback === 'function'\n            ? [{}, optionsOrCallback]\n            : [optionsOrCallback, cb];\n    }\n    _getDefaultHeaders(gcclGcsCmd) {\n        const headers = {\n            'User-Agent': (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.getUserAgentString)(),\n            'x-goog-api-client': `${(0,_util_js__WEBPACK_IMPORTED_MODULE_7__.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_7__.getModuleFormat)()} gccl-invocation-id/${uuid__WEBPACK_IMPORTED_MODULE_10__[\"default\"]()}`,\n        };\n        if (gcclGcsCmd) {\n            headers['x-goog-api-client'] += ` gccl-gcs-cmd/${gcclGcsCmd}`;\n        }\n        return headers;\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream__WEBPACK_IMPORTED_MODULE_4__.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', { bytesWritten: this.bytesRead, contentLength: '*' });\n        this.push(chunk);\n        callback();\n    }\n}\nconst util = new Util();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/notification.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/notification.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Notification: () => (/* binding */ Notification)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * See {@link https://cloud.google.com/storage/docs/pubsub-notifications| Cloud Pub/Sub Notifications for Google Cloud Storage}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n * ```\n */\nclass Notification extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    constructor(bucket, id) {\n        const requestQueryObject = {};\n        const methods = {\n            /**\n             * Creates a notification subscription for the bucket.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n             * @method Notification#create\n             *\n             * @param {Topic|string} topic The Cloud PubSub topic to which this\n             * subscription publishes. If the project ID is omitted, the current\n             * project ID will be used.\n             *\n             * Acceptable formats are:\n             * - `projects/grape-spaceship-123/topics/my-topic`\n             *\n             * - `my-topic`\n             * @param {CreateNotificationRequest} [options] Metadata to set for\n             *     the notification.\n             * @param {CreateNotificationCallback} [callback] Callback function.\n             * @returns {Promise<CreateNotificationResponse>}\n             * @throws {Error} If a valid topic is not provided.\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.create(function(err, notification, apiResponse) {\n             *   if (!err) {\n             *     // The notification was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.create().then(function(data) {\n             *   const notification = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: true,\n            /**\n             * @typedef {array} DeleteNotificationResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Permanently deletes a notification subscription.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete| Notifications: delete API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteNotificationCallback} [callback] Callback function.\n             * @returns {Promise<DeleteNotificationResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/deleteNotification.js</caption>\n             * region_tag:storage_delete_bucket_notification\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * Get a notification and its metadata if it exists.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             *     See {@link Bucket#createNotification} for create options.\n             * @param {boolean} [options.autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetNotificationCallback} [callback] Callback function.\n             * @return {Promise<GetNotificationCallback>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.get(function(err, notification, apiResponse) {\n             *   // `notification.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.get().then(function(data) {\n             *   const notification = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * Get the notification's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetNotificationMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetNotificationMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/getMetadataNotifications.js</caption>\n             * region_tag:storage_print_pubsub_bucket_notification\n             * Another example:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} NotificationExistsResponse\n             * @property {boolean} 0 Whether the notification exists or not.\n             */\n            /**\n             * @callback NotificationExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the notification exists or not.\n             */\n            /**\n             * Check if the notification exists.\n             *\n             * @method Notification#exists\n             * @param {NotificationExistsCallback} [callback] Callback function.\n             * @returns {Promise<NotificationExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: true,\n        };\n        super({\n            parent: bucket,\n            baseUrl: '/notificationConfigs',\n            id: id.toString(),\n            createMethod: bucket.createNotification.bind(bucket),\n            methods,\n        });\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__.promisifyAll)(Notification);\n/**\n * Reference to the {@link Notification} class.\n * @name module:@google-cloud/storage.Notification\n * @see Notification\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/notification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-disable node/no-missing-require */\n\nfunction getPackageJSON() {\n  return __webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@google-cloud/storage/package.json\");\n}\n\nexports.getPackageJSON = getPackageJSON;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvcGFja2FnZS1qc29uLWhlbHBlci5janMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxTQUFTLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ3hDOztBQUVBLHNCQUFzQiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvcGFja2FnZS1qc29uLWhlbHBlci5janMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tbWlzc2luZy1yZXF1aXJlICovXG5cbmZ1bmN0aW9uIGdldFBhY2thZ2VKU09OKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi4vLi4vLi4vcGFja2FnZS5qc29uJyk7XG59XG5cbmV4cG9ydHMuZ2V0UGFja2FnZUpTT04gPSBnZXRQYWNrYWdlSlNPTjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/resumable-upload.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/resumable-upload.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("var gaxios__WEBPACK_IMPORTED_MODULE_2___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROTOCOL_REGEX: () => (/* binding */ PROTOCOL_REGEX),\n/* harmony export */   Upload: () => (/* binding */ Upload),\n/* harmony export */   checkUploadStatus: () => (/* binding */ checkUploadStatus),\n/* harmony export */   createURI: () => (/* binding */ createURI),\n/* harmony export */   upload: () => (/* binding */ upload)\n/* harmony export */ });\n/* harmony import */ var abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var gaxios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nodejs-common/util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Upload_instances, _Upload_gcclGcsCmd, _Upload_resetLocalBuffersCache, _Upload_addLocalBufferCache;\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\nconst NOT_FOUND_STATUS_CODE = 404;\nconst RESUMABLE_INCOMPLETE_STATUS_CODE = 308;\nconst packageJson = (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_8__.getPackageJSON)();\nconst PROTOCOL_REGEX = /^(\\w*):\\/\\//;\nclass Upload extends stream__WEBPACK_IMPORTED_MODULE_4__.Writable {\n    constructor(cfg) {\n        var _a;\n        super(cfg);\n        _Upload_instances.add(this);\n        this.numBytesWritten = 0;\n        this.numRetries = 0;\n        this.currentInvocationId = {\n            checkUploadStatus: uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"](),\n            chunk: uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"](),\n            uri: uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"](),\n        };\n        /**\n         * A cache of buffers written to this instance, ready for consuming\n         */\n        this.writeBuffers = [];\n        this.numChunksReadInRequest = 0;\n        /**\n         * An array of buffers used for caching the most recent upload chunk.\n         * We should not assume that the server received all bytes sent in the request.\n         *  - https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload\n         */\n        this.localWriteCache = [];\n        this.localWriteCacheByteLength = 0;\n        this.upstreamEnded = false;\n        _Upload_gcclGcsCmd.set(this, void 0);\n        cfg = cfg || {};\n        if (!cfg.bucket || !cfg.file) {\n            throw new Error('A bucket and file name are required');\n        }\n        if (cfg.offset && !cfg.uri) {\n            throw new RangeError('Cannot provide an `offset` without providing a `uri`');\n        }\n        if (cfg.isPartialUpload && !cfg.chunkSize) {\n            throw new RangeError('Cannot set `isPartialUpload` without providing a `chunkSize`');\n        }\n        cfg.authConfig = cfg.authConfig || {};\n        cfg.authConfig.scopes = [\n            'https://www.googleapis.com/auth/devstorage.full_control',\n        ];\n        this.authClient = cfg.authClient || new google_auth_library__WEBPACK_IMPORTED_MODULE_3__.GoogleAuth(cfg.authConfig);\n        const universe = cfg.universeDomain || google_auth_library__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_UNIVERSE;\n        this.apiEndpoint = `https://storage.${universe}`;\n        if (cfg.apiEndpoint && cfg.apiEndpoint !== this.apiEndpoint) {\n            this.apiEndpoint = this.sanitizeEndpoint(cfg.apiEndpoint);\n            const hostname = new URL(this.apiEndpoint).hostname;\n            // check if it is a domain of a known universe\n            const isDomain = hostname === universe;\n            const isDefaultUniverseDomain = hostname === google_auth_library__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_UNIVERSE;\n            // check if it is a subdomain of a known universe\n            // by checking a last (universe's length + 1) of a hostname\n            const isSubDomainOfUniverse = hostname.slice(-(universe.length + 1)) === `.${universe}`;\n            const isSubDomainOfDefaultUniverse = hostname.slice(-(google_auth_library__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_UNIVERSE.length + 1)) ===\n                `.${google_auth_library__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_UNIVERSE}`;\n            if (!isDomain &&\n                !isDefaultUniverseDomain &&\n                !isSubDomainOfUniverse &&\n                !isSubDomainOfDefaultUniverse) {\n                // a custom, non-universe domain,\n                // use gaxios\n                this.authClient = /*#__PURE__*/ (gaxios__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (gaxios__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(gaxios__WEBPACK_IMPORTED_MODULE_2__, 2)));\n            }\n        }\n        this.baseURI = `${this.apiEndpoint}/upload/storage/v1/b`;\n        this.bucket = cfg.bucket;\n        const cacheKeyElements = [cfg.bucket, cfg.file];\n        if (typeof cfg.generation === 'number') {\n            cacheKeyElements.push(`${cfg.generation}`);\n        }\n        this.cacheKey = cacheKeyElements.join('/');\n        this.customRequestOptions = cfg.customRequestOptions || {};\n        this.file = cfg.file;\n        this.generation = cfg.generation;\n        this.kmsKeyName = cfg.kmsKeyName;\n        this.metadata = cfg.metadata || {};\n        this.offset = cfg.offset;\n        this.origin = cfg.origin;\n        this.params = cfg.params || {};\n        this.userProject = cfg.userProject;\n        this.chunkSize = cfg.chunkSize;\n        this.retryOptions = cfg.retryOptions;\n        this.isPartialUpload = (_a = cfg.isPartialUpload) !== null && _a !== void 0 ? _a : false;\n        if (cfg.key) {\n            if (typeof cfg.key === 'string') {\n                const base64Key = Buffer.from(cfg.key).toString('base64');\n                this.encryption = {\n                    key: base64Key,\n                    hash: (0,crypto__WEBPACK_IMPORTED_MODULE_1__.createHash)('sha256').update(cfg.key).digest('base64'),\n                };\n            }\n            else {\n                const base64Key = cfg.key.toString('base64');\n                this.encryption = {\n                    key: base64Key,\n                    hash: (0,crypto__WEBPACK_IMPORTED_MODULE_1__.createHash)('sha256').update(cfg.key).digest('base64'),\n                };\n            }\n        }\n        this.predefinedAcl = cfg.predefinedAcl;\n        if (cfg.private)\n            this.predefinedAcl = 'private';\n        if (cfg.public)\n            this.predefinedAcl = 'publicRead';\n        const autoRetry = cfg.retryOptions.autoRetry;\n        this.uriProvidedManually = !!cfg.uri;\n        this.uri = cfg.uri;\n        if (this.offset) {\n            // we're resuming an incomplete upload\n            this.numBytesWritten = this.offset;\n        }\n        this.numRetries = 0; // counter for number of retries currently executed\n        if (!autoRetry) {\n            cfg.retryOptions.maxRetries = 0;\n        }\n        this.timeOfFirstRequest = Date.now();\n        const contentLength = cfg.metadata\n            ? Number(cfg.metadata.contentLength)\n            : NaN;\n        this.contentLength = isNaN(contentLength) ? '*' : contentLength;\n        __classPrivateFieldSet(this, _Upload_gcclGcsCmd, cfg[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_7__.GCCL_GCS_CMD_KEY], \"f\");\n        this.once('writing', () => {\n            if (this.uri) {\n                this.continueUploading();\n            }\n            else {\n                this.createURI(err => {\n                    if (err) {\n                        return this.destroy(err);\n                    }\n                    this.startUploading();\n                    return;\n                });\n            }\n        });\n    }\n    /**\n     * Prevent 'finish' event until the upload has succeeded.\n     *\n     * @param fireFinishEvent The finish callback\n     */\n    _final(fireFinishEvent = () => { }) {\n        this.upstreamEnded = true;\n        this.once('uploadFinished', fireFinishEvent);\n        process.nextTick(() => {\n            this.emit('upstreamFinished');\n            // it's possible `_write` may not be called - namely for empty object uploads\n            this.emit('writing');\n        });\n    }\n    /**\n     * Handles incoming data from upstream\n     *\n     * @param chunk The chunk to append to the buffer\n     * @param encoding The encoding of the chunk\n     * @param readCallback A callback for when the buffer has been read downstream\n     */\n    _write(chunk, encoding, readCallback = () => { }) {\n        // Backwards-compatible event\n        this.emit('writing');\n        this.writeBuffers.push(typeof chunk === 'string' ? Buffer.from(chunk, encoding) : chunk);\n        this.once('readFromChunkBuffer', readCallback);\n        process.nextTick(() => this.emit('wroteToChunkBuffer'));\n    }\n    /**\n     * Prepends the local buffer to write buffer and resets it.\n     *\n     * @param keepLastBytes number of bytes to keep from the end of the local buffer.\n     */\n    prependLocalBufferToUpstream(keepLastBytes) {\n        // Typically, the upstream write buffers should be smaller than the local\n        // cache, so we can save time by setting the local cache as the new\n        // upstream write buffer array and appending the old array to it\n        let initialBuffers = [];\n        if (keepLastBytes) {\n            // we only want the last X bytes\n            let bytesKept = 0;\n            while (keepLastBytes > bytesKept) {\n                // load backwards because we want the last X bytes\n                // note: `localWriteCacheByteLength` is reset below\n                let buf = this.localWriteCache.pop();\n                if (!buf)\n                    break;\n                bytesKept += buf.byteLength;\n                if (bytesKept > keepLastBytes) {\n                    // we have gone over the amount desired, let's keep the last X bytes\n                    // of this buffer\n                    const diff = bytesKept - keepLastBytes;\n                    buf = buf.subarray(diff);\n                    bytesKept -= diff;\n                }\n                initialBuffers.unshift(buf);\n            }\n        }\n        else {\n            // we're keeping all of the local cache, simply use it as the initial buffer\n            initialBuffers = this.localWriteCache;\n        }\n        // Append the old upstream to the new\n        const append = this.writeBuffers;\n        this.writeBuffers = initialBuffers;\n        for (const buf of append) {\n            this.writeBuffers.push(buf);\n        }\n        // reset last buffers sent\n        __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_resetLocalBuffersCache).call(this);\n    }\n    /**\n     * Retrieves data from upstream's buffer.\n     *\n     * @param limit The maximum amount to return from the buffer.\n     */\n    *pullFromChunkBuffer(limit) {\n        while (limit) {\n            const buf = this.writeBuffers.shift();\n            if (!buf)\n                break;\n            let bufToYield = buf;\n            if (buf.byteLength > limit) {\n                bufToYield = buf.subarray(0, limit);\n                this.writeBuffers.unshift(buf.subarray(limit));\n                limit = 0;\n            }\n            else {\n                limit -= buf.byteLength;\n            }\n            yield bufToYield;\n            // Notify upstream we've read from the buffer and we're able to consume\n            // more. It can also potentially send more data down as we're currently\n            // iterating.\n            this.emit('readFromChunkBuffer');\n        }\n    }\n    /**\n     * A handler for determining if data is ready to be read from upstream.\n     *\n     * @returns If there will be more chunks to read in the future\n     */\n    async waitForNextChunk() {\n        const willBeMoreChunks = await new Promise(resolve => {\n            // There's data available - it should be digested\n            if (this.writeBuffers.length) {\n                return resolve(true);\n            }\n            // The upstream writable ended, we shouldn't expect any more data.\n            if (this.upstreamEnded) {\n                return resolve(false);\n            }\n            // Nothing immediate seems to be determined. We need to prepare some\n            // listeners to determine next steps...\n            const wroteToChunkBufferCallback = () => {\n                removeListeners();\n                return resolve(true);\n            };\n            const upstreamFinishedCallback = () => {\n                removeListeners();\n                // this should be the last chunk, if there's anything there\n                if (this.writeBuffers.length)\n                    return resolve(true);\n                return resolve(false);\n            };\n            // Remove listeners when we're ready to callback.\n            const removeListeners = () => {\n                this.removeListener('wroteToChunkBuffer', wroteToChunkBufferCallback);\n                this.removeListener('upstreamFinished', upstreamFinishedCallback);\n            };\n            // If there's data recently written it should be digested\n            this.once('wroteToChunkBuffer', wroteToChunkBufferCallback);\n            // If the upstream finishes let's see if there's anything to grab\n            this.once('upstreamFinished', upstreamFinishedCallback);\n        });\n        return willBeMoreChunks;\n    }\n    /**\n     * Reads data from upstream up to the provided `limit`.\n     * Ends when the limit has reached or no data is expected to be pushed from upstream.\n     *\n     * @param limit The most amount of data this iterator should return. `Infinity` by default.\n     */\n    async *upstreamIterator(limit = Infinity) {\n        // read from upstream chunk buffer\n        while (limit && (await this.waitForNextChunk())) {\n            // read until end or limit has been reached\n            for (const chunk of this.pullFromChunkBuffer(limit)) {\n                limit -= chunk.byteLength;\n                yield chunk;\n            }\n        }\n    }\n    createURI(callback) {\n        if (!callback) {\n            return this.createURIAsync();\n        }\n        this.createURIAsync().then(r => callback(null, r), callback);\n    }\n    async createURIAsync() {\n        const metadata = { ...this.metadata };\n        const headers = {};\n        // Delete content length and content type from metadata if they exist.\n        // These are headers and should not be sent as part of the metadata.\n        if (metadata.contentLength) {\n            headers['X-Upload-Content-Length'] = metadata.contentLength.toString();\n            delete metadata.contentLength;\n        }\n        if (metadata.contentType) {\n            headers['X-Upload-Content-Type'] = metadata.contentType;\n            delete metadata.contentType;\n        }\n        let googAPIClient = `${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getModuleFormat)()} gccl-invocation-id/${this.currentInvocationId.uri}`;\n        if (__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")) {\n            googAPIClient += ` gccl-gcs-cmd/${__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")}`;\n        }\n        // Check if headers already exist before creating new ones\n        const reqOpts = {\n            method: 'POST',\n            url: [this.baseURI, this.bucket, 'o'].join('/'),\n            params: Object.assign({\n                name: this.file,\n                uploadType: 'resumable',\n            }, this.params),\n            data: metadata,\n            headers: {\n                'User-Agent': (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getUserAgentString)(),\n                'x-goog-api-client': googAPIClient,\n                ...headers,\n            },\n        };\n        if (metadata.contentLength) {\n            reqOpts.headers['X-Upload-Content-Length'] =\n                metadata.contentLength.toString();\n        }\n        if (metadata.contentType) {\n            reqOpts.headers['X-Upload-Content-Type'] = metadata.contentType;\n        }\n        if (typeof this.generation !== 'undefined') {\n            reqOpts.params.ifGenerationMatch = this.generation;\n        }\n        if (this.kmsKeyName) {\n            reqOpts.params.kmsKeyName = this.kmsKeyName;\n        }\n        if (this.predefinedAcl) {\n            reqOpts.params.predefinedAcl = this.predefinedAcl;\n        }\n        if (this.origin) {\n            reqOpts.headers.Origin = this.origin;\n        }\n        const uri = await async_retry__WEBPACK_IMPORTED_MODULE_5__(async (bail) => {\n            var _a, _b, _c;\n            try {\n                const res = await this.makeRequest(reqOpts);\n                // We have successfully got a URI we can now create a new invocation id\n                this.currentInvocationId.uri = uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n                return res.headers.location;\n            }\n            catch (err) {\n                const e = err;\n                const apiError = {\n                    code: (_a = e.response) === null || _a === void 0 ? void 0 : _a.status,\n                    name: (_b = e.response) === null || _b === void 0 ? void 0 : _b.statusText,\n                    message: (_c = e.response) === null || _c === void 0 ? void 0 : _c.statusText,\n                    errors: [\n                        {\n                            reason: e.code,\n                        },\n                    ],\n                };\n                if (this.retryOptions.maxRetries > 0 &&\n                    this.retryOptions.retryableErrorFn(apiError)) {\n                    throw e;\n                }\n                else {\n                    return bail(e);\n                }\n            }\n        }, {\n            retries: this.retryOptions.maxRetries,\n            factor: this.retryOptions.retryDelayMultiplier,\n            maxTimeout: this.retryOptions.maxRetryDelay * 1000, //convert to milliseconds\n            maxRetryTime: this.retryOptions.totalTimeout * 1000, //convert to milliseconds\n        });\n        this.uri = uri;\n        this.offset = 0;\n        // emit the newly generated URI for future reuse, if necessary.\n        this.emit('uri', uri);\n        return uri;\n    }\n    async continueUploading() {\n        var _a;\n        (_a = this.offset) !== null && _a !== void 0 ? _a : (await this.getAndSetOffset());\n        return this.startUploading();\n    }\n    async startUploading() {\n        const multiChunkMode = !!this.chunkSize;\n        let responseReceived = false;\n        this.numChunksReadInRequest = 0;\n        if (!this.offset) {\n            this.offset = 0;\n        }\n        // Check if the offset (server) is too far behind the current stream\n        if (this.offset < this.numBytesWritten) {\n            const delta = this.numBytesWritten - this.offset;\n            const message = `The offset is lower than the number of bytes written. The server has ${this.offset} bytes and while ${this.numBytesWritten} bytes has been uploaded - thus ${delta} bytes are missing. Stopping as this could result in data loss. Initiate a new upload to continue.`;\n            this.emit('error', new RangeError(message));\n            return;\n        }\n        // Check if we should 'fast-forward' to the relevant data to upload\n        if (this.numBytesWritten < this.offset) {\n            // 'fast-forward' to the byte where we need to upload.\n            // only push data from the byte after the one we left off on\n            const fastForwardBytes = this.offset - this.numBytesWritten;\n            for await (const _chunk of this.upstreamIterator(fastForwardBytes)) {\n                _chunk; // discard the data up until the point we want\n            }\n            this.numBytesWritten = this.offset;\n        }\n        let expectedUploadSize = undefined;\n        // Set `expectedUploadSize` to `contentLength - this.numBytesWritten`, if available\n        if (typeof this.contentLength === 'number') {\n            expectedUploadSize = this.contentLength - this.numBytesWritten;\n        }\n        // `expectedUploadSize` should be no more than the `chunkSize`.\n        // It's possible this is the last chunk request for a multiple\n        // chunk upload, thus smaller than the chunk size.\n        if (this.chunkSize) {\n            expectedUploadSize = expectedUploadSize\n                ? Math.min(this.chunkSize, expectedUploadSize)\n                : this.chunkSize;\n        }\n        // A queue for the upstream data\n        const upstreamQueue = this.upstreamIterator(expectedUploadSize);\n        // The primary read stream for this request. This stream retrieves no more\n        // than the exact requested amount from upstream.\n        const requestStream = new stream__WEBPACK_IMPORTED_MODULE_4__.Readable({\n            read: async () => {\n                // Don't attempt to retrieve data upstream if we already have a response\n                if (responseReceived)\n                    requestStream.push(null);\n                const result = await upstreamQueue.next();\n                if (result.value) {\n                    this.numChunksReadInRequest++;\n                    if (multiChunkMode) {\n                        // save ever buffer used in the request in multi-chunk mode\n                        __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_addLocalBufferCache).call(this, result.value);\n                    }\n                    else {\n                        __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_resetLocalBuffersCache).call(this);\n                        __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_addLocalBufferCache).call(this, result.value);\n                    }\n                    this.numBytesWritten += result.value.byteLength;\n                    this.emit('progress', {\n                        bytesWritten: this.numBytesWritten,\n                        contentLength: this.contentLength,\n                    });\n                    requestStream.push(result.value);\n                }\n                if (result.done) {\n                    requestStream.push(null);\n                }\n            },\n        });\n        let googAPIClient = `${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getModuleFormat)()} gccl-invocation-id/${this.currentInvocationId.chunk}`;\n        if (__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")) {\n            googAPIClient += ` gccl-gcs-cmd/${__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")}`;\n        }\n        const headers = {\n            'User-Agent': (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getUserAgentString)(),\n            'x-goog-api-client': googAPIClient,\n        };\n        // If using multiple chunk upload, set appropriate header\n        if (multiChunkMode) {\n            // We need to know how much data is available upstream to set the `Content-Range` header.\n            // https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload\n            for await (const chunk of this.upstreamIterator(expectedUploadSize)) {\n                // This will conveniently track and keep the size of the buffers.\n                // We will reach either the expected upload size or the remainder of the stream.\n                __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_addLocalBufferCache).call(this, chunk);\n            }\n            // This is the sum from the `#addLocalBufferCache` calls\n            const bytesToUpload = this.localWriteCacheByteLength;\n            // Important: we want to know if the upstream has ended and the queue is empty before\n            // unshifting data back into the queue. This way we will know if this is the last request or not.\n            const isLastChunkOfUpload = !(await this.waitForNextChunk());\n            // Important: put the data back in the queue for the actual upload\n            this.prependLocalBufferToUpstream();\n            let totalObjectSize = this.contentLength;\n            if (typeof this.contentLength !== 'number' &&\n                isLastChunkOfUpload &&\n                !this.isPartialUpload) {\n                // Let's let the server know this is the last chunk of the object since we didn't set it before.\n                totalObjectSize = bytesToUpload + this.numBytesWritten;\n            }\n            // `- 1` as the ending byte is inclusive in the request.\n            const endingByte = bytesToUpload + this.numBytesWritten - 1;\n            // `Content-Length` for multiple chunk uploads is the size of the chunk,\n            // not the overall object\n            headers['Content-Length'] = bytesToUpload;\n            headers['Content-Range'] =\n                `bytes ${this.offset}-${endingByte}/${totalObjectSize}`;\n        }\n        else {\n            headers['Content-Range'] = `bytes ${this.offset}-*/${this.contentLength}`;\n        }\n        const reqOpts = {\n            method: 'PUT',\n            url: this.uri,\n            headers,\n            body: requestStream,\n        };\n        try {\n            const resp = await this.makeRequestStream(reqOpts);\n            if (resp) {\n                responseReceived = true;\n                await this.responseHandler(resp);\n            }\n        }\n        catch (e) {\n            const err = e;\n            if (this.retryOptions.retryableErrorFn(err)) {\n                this.attemptDelayedRetry({\n                    status: NaN,\n                    data: err,\n                });\n                return;\n            }\n            this.destroy(err);\n        }\n    }\n    // Process the API response to look for errors that came in\n    // the response body.\n    async responseHandler(resp) {\n        if (resp.data.error) {\n            this.destroy(resp.data.error);\n            return;\n        }\n        // At this point we can safely create a new id for the chunk\n        this.currentInvocationId.chunk = uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n        const moreDataToUpload = await this.waitForNextChunk();\n        const shouldContinueWithNextMultiChunkRequest = this.chunkSize &&\n            resp.status === RESUMABLE_INCOMPLETE_STATUS_CODE &&\n            resp.headers.range &&\n            moreDataToUpload;\n        /**\n         * This is true when we're expecting to upload more data in a future request,\n         * yet the upstream for the upload session has been exhausted.\n         */\n        const shouldContinueUploadInAnotherRequest = this.isPartialUpload &&\n            resp.status === RESUMABLE_INCOMPLETE_STATUS_CODE &&\n            !moreDataToUpload;\n        if (shouldContinueWithNextMultiChunkRequest) {\n            // Use the upper value in this header to determine where to start the next chunk.\n            // We should not assume that the server received all bytes sent in the request.\n            // https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload\n            const range = resp.headers.range;\n            this.offset = Number(range.split('-')[1]) + 1;\n            // We should not assume that the server received all bytes sent in the request.\n            // - https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload\n            const missingBytes = this.numBytesWritten - this.offset;\n            if (missingBytes) {\n                // As multi-chunk uploads send one chunk per request and pulls one\n                // chunk into the pipeline, prepending the missing bytes back should\n                // be fine for the next request.\n                this.prependLocalBufferToUpstream(missingBytes);\n                this.numBytesWritten -= missingBytes;\n            }\n            else {\n                // No bytes missing - no need to keep the local cache\n                __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_resetLocalBuffersCache).call(this);\n            }\n            // continue uploading next chunk\n            this.continueUploading();\n        }\n        else if (!this.isSuccessfulResponse(resp.status) &&\n            !shouldContinueUploadInAnotherRequest) {\n            const err = new Error('Upload failed');\n            err.code = resp.status;\n            err.name = 'Upload failed';\n            if (resp === null || resp === void 0 ? void 0 : resp.data) {\n                err.errors = [resp === null || resp === void 0 ? void 0 : resp.data];\n            }\n            this.destroy(err);\n        }\n        else {\n            // no need to keep the cache\n            __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_resetLocalBuffersCache).call(this);\n            if (resp && resp.data) {\n                resp.data.size = Number(resp.data.size);\n            }\n            this.emit('metadata', resp.data);\n            // Allow the object (Upload) to continue naturally so the user's\n            // \"finish\" event fires.\n            this.emit('uploadFinished');\n        }\n    }\n    /**\n     * Check the status of an existing resumable upload.\n     *\n     * @param cfg A configuration to use. `uri` is required.\n     * @returns the current upload status\n     */\n    async checkUploadStatus(config = {}) {\n        let googAPIClient = `${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getModuleFormat)()} gccl-invocation-id/${this.currentInvocationId.checkUploadStatus}`;\n        if (__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")) {\n            googAPIClient += ` gccl-gcs-cmd/${__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")}`;\n        }\n        const opts = {\n            method: 'PUT',\n            url: this.uri,\n            headers: {\n                'Content-Length': 0,\n                'Content-Range': 'bytes */*',\n                'User-Agent': (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getUserAgentString)(),\n                'x-goog-api-client': googAPIClient,\n            },\n        };\n        try {\n            const resp = await this.makeRequest(opts);\n            // Successfully got the offset we can now create a new offset invocation id\n            this.currentInvocationId.checkUploadStatus = uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n            return resp;\n        }\n        catch (e) {\n            if (config.retry === false ||\n                !(e instanceof Error) ||\n                !this.retryOptions.retryableErrorFn(e)) {\n                throw e;\n            }\n            const retryDelay = this.getRetryDelay();\n            if (retryDelay <= 0) {\n                throw e;\n            }\n            await new Promise(res => setTimeout(res, retryDelay));\n            return this.checkUploadStatus(config);\n        }\n    }\n    async getAndSetOffset() {\n        try {\n            // we want to handle retries in this method.\n            const resp = await this.checkUploadStatus({ retry: false });\n            if (resp.status === RESUMABLE_INCOMPLETE_STATUS_CODE) {\n                if (typeof resp.headers.range === 'string') {\n                    this.offset = Number(resp.headers.range.split('-')[1]) + 1;\n                    return;\n                }\n            }\n            this.offset = 0;\n        }\n        catch (e) {\n            const err = e;\n            if (this.retryOptions.retryableErrorFn(err)) {\n                this.attemptDelayedRetry({\n                    status: NaN,\n                    data: err,\n                });\n                return;\n            }\n            this.destroy(err);\n        }\n    }\n    async makeRequest(reqOpts) {\n        if (this.encryption) {\n            reqOpts.headers = reqOpts.headers || {};\n            reqOpts.headers['x-goog-encryption-algorithm'] = 'AES256';\n            reqOpts.headers['x-goog-encryption-key'] = this.encryption.key.toString();\n            reqOpts.headers['x-goog-encryption-key-sha256'] =\n                this.encryption.hash.toString();\n        }\n        if (this.userProject) {\n            reqOpts.params = reqOpts.params || {};\n            reqOpts.params.userProject = this.userProject;\n        }\n        // Let gaxios know we will handle a 308 error code ourselves.\n        reqOpts.validateStatus = (status) => {\n            return (this.isSuccessfulResponse(status) ||\n                status === RESUMABLE_INCOMPLETE_STATUS_CODE);\n        };\n        const combinedReqOpts = {\n            ...this.customRequestOptions,\n            ...reqOpts,\n            headers: {\n                ...this.customRequestOptions.headers,\n                ...reqOpts.headers,\n            },\n        };\n        const res = await this.authClient.request(combinedReqOpts);\n        if (res.data && res.data.error) {\n            throw res.data.error;\n        }\n        return res;\n    }\n    async makeRequestStream(reqOpts) {\n        const controller = new abort_controller__WEBPACK_IMPORTED_MODULE_0__();\n        const errorCallback = () => controller.abort();\n        this.once('error', errorCallback);\n        if (this.userProject) {\n            reqOpts.params = reqOpts.params || {};\n            reqOpts.params.userProject = this.userProject;\n        }\n        reqOpts.signal = controller.signal;\n        reqOpts.validateStatus = () => true;\n        const combinedReqOpts = {\n            ...this.customRequestOptions,\n            ...reqOpts,\n            headers: {\n                ...this.customRequestOptions.headers,\n                ...reqOpts.headers,\n            },\n        };\n        const res = await this.authClient.request(combinedReqOpts);\n        const successfulRequest = this.onResponse(res);\n        this.removeListener('error', errorCallback);\n        return successfulRequest ? res : null;\n    }\n    /**\n     * @return {bool} is the request good?\n     */\n    onResponse(resp) {\n        if (resp.status !== 200 &&\n            this.retryOptions.retryableErrorFn({\n                code: resp.status,\n                message: resp.statusText,\n                name: resp.statusText,\n            })) {\n            this.attemptDelayedRetry(resp);\n            return false;\n        }\n        this.emit('response', resp);\n        return true;\n    }\n    /**\n     * @param resp GaxiosResponse object from previous attempt\n     */\n    attemptDelayedRetry(resp) {\n        if (this.numRetries < this.retryOptions.maxRetries) {\n            if (resp.status === NOT_FOUND_STATUS_CODE &&\n                this.numChunksReadInRequest === 0) {\n                this.startUploading();\n            }\n            else {\n                const retryDelay = this.getRetryDelay();\n                if (retryDelay <= 0) {\n                    this.destroy(new Error(`Retry total time limit exceeded - ${JSON.stringify(resp.data)}`));\n                    return;\n                }\n                // Unshift the local cache back in case it's needed for the next request.\n                this.numBytesWritten -= this.localWriteCacheByteLength;\n                this.prependLocalBufferToUpstream();\n                // We don't know how much data has been received by the server.\n                // `continueUploading` will recheck the offset via `getAndSetOffset`.\n                // If `offset` < `numberBytesReceived` then we will raise a RangeError\n                // as we've streamed too much data that has been missed - this should\n                // not be the case for multi-chunk uploads as `lastChunkSent` is the\n                // body of the entire request.\n                this.offset = undefined;\n                setTimeout(this.continueUploading.bind(this), retryDelay);\n            }\n            this.numRetries++;\n        }\n        else {\n            this.destroy(new Error(`Retry limit exceeded - ${JSON.stringify(resp.data)}`));\n        }\n    }\n    /**\n     * The amount of time to wait before retrying the request, in milliseconds.\n     * If negative, do not retry.\n     *\n     * @returns the amount of time to wait, in milliseconds.\n     */\n    getRetryDelay() {\n        const randomMs = Math.round(Math.random() * 1000);\n        const waitTime = Math.pow(this.retryOptions.retryDelayMultiplier, this.numRetries) *\n            1000 +\n            randomMs;\n        const maxAllowableDelayMs = this.retryOptions.totalTimeout * 1000 -\n            (Date.now() - this.timeOfFirstRequest);\n        const maxRetryDelayMs = this.retryOptions.maxRetryDelay * 1000;\n        return Math.min(waitTime, maxRetryDelayMs, maxAllowableDelayMs);\n    }\n    /*\n     * Prepare user-defined API endpoint for compatibility with our API.\n     */\n    sanitizeEndpoint(url) {\n        if (!PROTOCOL_REGEX.test(url)) {\n            url = `https://${url}`;\n        }\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\n    }\n    /**\n     * Check if a given status code is 2xx\n     *\n     * @param status The status code to check\n     * @returns if the status is 2xx\n     */\n    isSuccessfulResponse(status) {\n        return status >= 200 && status < 300;\n    }\n}\n_Upload_gcclGcsCmd = new WeakMap(), _Upload_instances = new WeakSet(), _Upload_resetLocalBuffersCache = function _Upload_resetLocalBuffersCache() {\n    this.localWriteCache = [];\n    this.localWriteCacheByteLength = 0;\n}, _Upload_addLocalBufferCache = function _Upload_addLocalBufferCache(buf) {\n    this.localWriteCache.push(buf);\n    this.localWriteCacheByteLength += buf.byteLength;\n};\nfunction upload(cfg) {\n    return new Upload(cfg);\n}\nfunction createURI(cfg, callback) {\n    const up = new Upload(cfg);\n    if (!callback) {\n        return up.createURI();\n    }\n    up.createURI().then(r => callback(null, r), callback);\n}\n/**\n * Check the status of an existing resumable upload.\n *\n * @param cfg A configuration to use. `uri` is required.\n * @returns the current upload status\n */\nfunction checkUploadStatus(cfg) {\n    const up = new Upload(cfg);\n    return up.checkUploadStatus();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvcmVzdW1hYmxlLXVwbG9hZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQytDO0FBQ1g7QUFDSDtBQUNtQztBQUN4QjtBQUNQO0FBQ1I7QUFDOEQ7QUFDaEM7QUFDM0Q7QUFDQTtBQUMyRDtBQUMzRDtBQUNBO0FBQ0Esb0JBQW9CLHdFQUFjO0FBQzNCO0FBQ0EscUJBQXFCLDRDQUFRO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDRDQUFPO0FBQ3RDLG1CQUFtQiw0Q0FBTztBQUMxQixpQkFBaUIsNENBQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCwyREFBVTtBQUMxRCwrQ0FBK0MsaUVBQWdCO0FBQy9ELDhDQUE4QyxTQUFTO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsaUVBQWdCO0FBQ3pFO0FBQ0E7QUFDQSx5RkFBeUYsU0FBUztBQUNsRyxrRUFBa0UsaUVBQWdCO0FBQ2xGLG9CQUFvQixpRUFBZ0IsQ0FBQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsNExBQU07QUFDeEM7QUFDQTtBQUNBLDBCQUEwQixpQkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGVBQWU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsa0RBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGtEQUFVO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELG9FQUFnQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtFQUF3QixJQUFJLE9BQU8sb0JBQW9CLEdBQUcseURBQWUsSUFBSSxxQkFBcUIsNkJBQTZCO0FBQzlKO0FBQ0EsOENBQThDLHNEQUFzRDtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSw4QkFBOEIsNERBQWtCO0FBQ2hEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3Q0FBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyw0Q0FBTztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9HQUFvRyxhQUFhLGtCQUFrQixzQkFBc0IsaUNBQWlDLE9BQU87QUFDak07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsNENBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1QsK0JBQStCLGtFQUF3QixJQUFJLE9BQU8sb0JBQW9CLEdBQUcseURBQWUsSUFBSSxxQkFBcUIsK0JBQStCO0FBQ2hLO0FBQ0EsOENBQThDLHNEQUFzRDtBQUNwRztBQUNBO0FBQ0EsMEJBQTBCLDREQUFrQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixZQUFZLEdBQUcsV0FBVyxHQUFHLGdCQUFnQjtBQUN0RTtBQUNBO0FBQ0EsZ0RBQWdELFlBQVksS0FBSyxtQkFBbUI7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyw0Q0FBTztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsK0JBQStCLGtFQUF3QixJQUFJLE9BQU8sb0JBQW9CLEdBQUcseURBQWUsSUFBSSxxQkFBcUIsMkNBQTJDO0FBQzVLO0FBQ0EsOENBQThDLHNEQUFzRDtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw0REFBa0I7QUFDaEQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsNENBQU87QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsY0FBYztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNkNBQWU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixNQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRiwwQkFBMEI7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCwwQkFBMEI7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixJQUFJO0FBQ2pDO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvcmVzdW1hYmxlLXVwbG9hZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfVXBsb2FkX2luc3RhbmNlcywgX1VwbG9hZF9nY2NsR2NzQ21kLCBfVXBsb2FkX3Jlc2V0TG9jYWxCdWZmZXJzQ2FjaGUsIF9VcGxvYWRfYWRkTG9jYWxCdWZmZXJDYWNoZTtcbmltcG9ydCBBYm9ydENvbnRyb2xsZXIgZnJvbSAnYWJvcnQtY29udHJvbGxlcic7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIGdheGlvcyBmcm9tICdnYXhpb3MnO1xuaW1wb3J0IHsgREVGQVVMVF9VTklWRVJTRSwgR29vZ2xlQXV0aCwgfSBmcm9tICdnb29nbGUtYXV0aC1saWJyYXJ5JztcbmltcG9ydCB7IFJlYWRhYmxlLCBXcml0YWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgQXN5bmNSZXRyeSBmcm9tICdhc3luYy1yZXRyeSc7XG5pbXBvcnQgKiBhcyB1dWlkIGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgZ2V0UnVudGltZVRyYWNraW5nU3RyaW5nLCBnZXRNb2R1bGVGb3JtYXQsIGdldFVzZXJBZ2VudFN0cmluZywgfSBmcm9tICcuL3V0aWwuanMnO1xuaW1wb3J0IHsgR0NDTF9HQ1NfQ01EX0tFWSB9IGZyb20gJy4vbm9kZWpzLWNvbW1vbi91dGlsLmpzJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IGdldFBhY2thZ2VKU09OIH0gZnJvbSAnLi9wYWNrYWdlLWpzb24taGVscGVyLmNqcyc7XG5jb25zdCBOT1RfRk9VTkRfU1RBVFVTX0NPREUgPSA0MDQ7XG5jb25zdCBSRVNVTUFCTEVfSU5DT01QTEVURV9TVEFUVVNfQ09ERSA9IDMwODtcbmNvbnN0IHBhY2thZ2VKc29uID0gZ2V0UGFja2FnZUpTT04oKTtcbmV4cG9ydCBjb25zdCBQUk9UT0NPTF9SRUdFWCA9IC9eKFxcdyopOlxcL1xcLy87XG5leHBvcnQgY2xhc3MgVXBsb2FkIGV4dGVuZHMgV3JpdGFibGUge1xuICAgIGNvbnN0cnVjdG9yKGNmZykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgIF9VcGxvYWRfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgdGhpcy5udW1CeXRlc1dyaXR0ZW4gPSAwO1xuICAgICAgICB0aGlzLm51bVJldHJpZXMgPSAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRJbnZvY2F0aW9uSWQgPSB7XG4gICAgICAgICAgICBjaGVja1VwbG9hZFN0YXR1czogdXVpZC52NCgpLFxuICAgICAgICAgICAgY2h1bms6IHV1aWQudjQoKSxcbiAgICAgICAgICAgIHVyaTogdXVpZC52NCgpLFxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBjYWNoZSBvZiBidWZmZXJzIHdyaXR0ZW4gdG8gdGhpcyBpbnN0YW5jZSwgcmVhZHkgZm9yIGNvbnN1bWluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5udW1DaHVua3NSZWFkSW5SZXF1ZXN0ID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGJ1ZmZlcnMgdXNlZCBmb3IgY2FjaGluZyB0aGUgbW9zdCByZWNlbnQgdXBsb2FkIGNodW5rLlxuICAgICAgICAgKiBXZSBzaG91bGQgbm90IGFzc3VtZSB0aGF0IHRoZSBzZXJ2ZXIgcmVjZWl2ZWQgYWxsIGJ5dGVzIHNlbnQgaW4gdGhlIHJlcXVlc3QuXG4gICAgICAgICAqICAtIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvcGVyZm9ybWluZy1yZXN1bWFibGUtdXBsb2FkcyNjaHVua2VkLXVwbG9hZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sb2NhbFdyaXRlQ2FjaGUgPSBbXTtcbiAgICAgICAgdGhpcy5sb2NhbFdyaXRlQ2FjaGVCeXRlTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy51cHN0cmVhbUVuZGVkID0gZmFsc2U7XG4gICAgICAgIF9VcGxvYWRfZ2NjbEdjc0NtZC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgY2ZnID0gY2ZnIHx8IHt9O1xuICAgICAgICBpZiAoIWNmZy5idWNrZXQgfHwgIWNmZy5maWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgYnVja2V0IGFuZCBmaWxlIG5hbWUgYXJlIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNmZy5vZmZzZXQgJiYgIWNmZy51cmkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdDYW5ub3QgcHJvdmlkZSBhbiBgb2Zmc2V0YCB3aXRob3V0IHByb3ZpZGluZyBhIGB1cmlgJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNmZy5pc1BhcnRpYWxVcGxvYWQgJiYgIWNmZy5jaHVua1NpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdDYW5ub3Qgc2V0IGBpc1BhcnRpYWxVcGxvYWRgIHdpdGhvdXQgcHJvdmlkaW5nIGEgYGNodW5rU2l6ZWAnKTtcbiAgICAgICAgfVxuICAgICAgICBjZmcuYXV0aENvbmZpZyA9IGNmZy5hdXRoQ29uZmlnIHx8IHt9O1xuICAgICAgICBjZmcuYXV0aENvbmZpZy5zY29wZXMgPSBbXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kZXZzdG9yYWdlLmZ1bGxfY29udHJvbCcsXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuYXV0aENsaWVudCA9IGNmZy5hdXRoQ2xpZW50IHx8IG5ldyBHb29nbGVBdXRoKGNmZy5hdXRoQ29uZmlnKTtcbiAgICAgICAgY29uc3QgdW5pdmVyc2UgPSBjZmcudW5pdmVyc2VEb21haW4gfHwgREVGQVVMVF9VTklWRVJTRTtcbiAgICAgICAgdGhpcy5hcGlFbmRwb2ludCA9IGBodHRwczovL3N0b3JhZ2UuJHt1bml2ZXJzZX1gO1xuICAgICAgICBpZiAoY2ZnLmFwaUVuZHBvaW50ICYmIGNmZy5hcGlFbmRwb2ludCAhPT0gdGhpcy5hcGlFbmRwb2ludCkge1xuICAgICAgICAgICAgdGhpcy5hcGlFbmRwb2ludCA9IHRoaXMuc2FuaXRpemVFbmRwb2ludChjZmcuYXBpRW5kcG9pbnQpO1xuICAgICAgICAgICAgY29uc3QgaG9zdG5hbWUgPSBuZXcgVVJMKHRoaXMuYXBpRW5kcG9pbnQpLmhvc3RuYW1lO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgaXQgaXMgYSBkb21haW4gb2YgYSBrbm93biB1bml2ZXJzZVxuICAgICAgICAgICAgY29uc3QgaXNEb21haW4gPSBob3N0bmFtZSA9PT0gdW5pdmVyc2U7XG4gICAgICAgICAgICBjb25zdCBpc0RlZmF1bHRVbml2ZXJzZURvbWFpbiA9IGhvc3RuYW1lID09PSBERUZBVUxUX1VOSVZFUlNFO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgaXQgaXMgYSBzdWJkb21haW4gb2YgYSBrbm93biB1bml2ZXJzZVxuICAgICAgICAgICAgLy8gYnkgY2hlY2tpbmcgYSBsYXN0ICh1bml2ZXJzZSdzIGxlbmd0aCArIDEpIG9mIGEgaG9zdG5hbWVcbiAgICAgICAgICAgIGNvbnN0IGlzU3ViRG9tYWluT2ZVbml2ZXJzZSA9IGhvc3RuYW1lLnNsaWNlKC0odW5pdmVyc2UubGVuZ3RoICsgMSkpID09PSBgLiR7dW5pdmVyc2V9YDtcbiAgICAgICAgICAgIGNvbnN0IGlzU3ViRG9tYWluT2ZEZWZhdWx0VW5pdmVyc2UgPSBob3N0bmFtZS5zbGljZSgtKERFRkFVTFRfVU5JVkVSU0UubGVuZ3RoICsgMSkpID09PVxuICAgICAgICAgICAgICAgIGAuJHtERUZBVUxUX1VOSVZFUlNFfWA7XG4gICAgICAgICAgICBpZiAoIWlzRG9tYWluICYmXG4gICAgICAgICAgICAgICAgIWlzRGVmYXVsdFVuaXZlcnNlRG9tYWluICYmXG4gICAgICAgICAgICAgICAgIWlzU3ViRG9tYWluT2ZVbml2ZXJzZSAmJlxuICAgICAgICAgICAgICAgICFpc1N1YkRvbWFpbk9mRGVmYXVsdFVuaXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gYSBjdXN0b20sIG5vbi11bml2ZXJzZSBkb21haW4sXG4gICAgICAgICAgICAgICAgLy8gdXNlIGdheGlvc1xuICAgICAgICAgICAgICAgIHRoaXMuYXV0aENsaWVudCA9IGdheGlvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhc2VVUkkgPSBgJHt0aGlzLmFwaUVuZHBvaW50fS91cGxvYWQvc3RvcmFnZS92MS9iYDtcbiAgICAgICAgdGhpcy5idWNrZXQgPSBjZmcuYnVja2V0O1xuICAgICAgICBjb25zdCBjYWNoZUtleUVsZW1lbnRzID0gW2NmZy5idWNrZXQsIGNmZy5maWxlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBjZmcuZ2VuZXJhdGlvbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNhY2hlS2V5RWxlbWVudHMucHVzaChgJHtjZmcuZ2VuZXJhdGlvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhY2hlS2V5ID0gY2FjaGVLZXlFbGVtZW50cy5qb2luKCcvJyk7XG4gICAgICAgIHRoaXMuY3VzdG9tUmVxdWVzdE9wdGlvbnMgPSBjZmcuY3VzdG9tUmVxdWVzdE9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMuZmlsZSA9IGNmZy5maWxlO1xuICAgICAgICB0aGlzLmdlbmVyYXRpb24gPSBjZmcuZ2VuZXJhdGlvbjtcbiAgICAgICAgdGhpcy5rbXNLZXlOYW1lID0gY2ZnLmttc0tleU5hbWU7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBjZmcubWV0YWRhdGEgfHwge307XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gY2ZnLm9mZnNldDtcbiAgICAgICAgdGhpcy5vcmlnaW4gPSBjZmcub3JpZ2luO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IGNmZy5wYXJhbXMgfHwge307XG4gICAgICAgIHRoaXMudXNlclByb2plY3QgPSBjZmcudXNlclByb2plY3Q7XG4gICAgICAgIHRoaXMuY2h1bmtTaXplID0gY2ZnLmNodW5rU2l6ZTtcbiAgICAgICAgdGhpcy5yZXRyeU9wdGlvbnMgPSBjZmcucmV0cnlPcHRpb25zO1xuICAgICAgICB0aGlzLmlzUGFydGlhbFVwbG9hZCA9IChfYSA9IGNmZy5pc1BhcnRpYWxVcGxvYWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xuICAgICAgICBpZiAoY2ZnLmtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjZmcua2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2U2NEtleSA9IEJ1ZmZlci5mcm9tKGNmZy5rZXkpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuY3J5cHRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogYmFzZTY0S2V5LFxuICAgICAgICAgICAgICAgICAgICBoYXNoOiBjcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoY2ZnLmtleSkuZGlnZXN0KCdiYXNlNjQnKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0S2V5ID0gY2ZnLmtleS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmNyeXB0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IGJhc2U2NEtleSxcbiAgICAgICAgICAgICAgICAgICAgaGFzaDogY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGNmZy5rZXkpLmRpZ2VzdCgnYmFzZTY0JyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZWRlZmluZWRBY2wgPSBjZmcucHJlZGVmaW5lZEFjbDtcbiAgICAgICAgaWYgKGNmZy5wcml2YXRlKVxuICAgICAgICAgICAgdGhpcy5wcmVkZWZpbmVkQWNsID0gJ3ByaXZhdGUnO1xuICAgICAgICBpZiAoY2ZnLnB1YmxpYylcbiAgICAgICAgICAgIHRoaXMucHJlZGVmaW5lZEFjbCA9ICdwdWJsaWNSZWFkJztcbiAgICAgICAgY29uc3QgYXV0b1JldHJ5ID0gY2ZnLnJldHJ5T3B0aW9ucy5hdXRvUmV0cnk7XG4gICAgICAgIHRoaXMudXJpUHJvdmlkZWRNYW51YWxseSA9ICEhY2ZnLnVyaTtcbiAgICAgICAgdGhpcy51cmkgPSBjZmcudXJpO1xuICAgICAgICBpZiAodGhpcy5vZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIHdlJ3JlIHJlc3VtaW5nIGFuIGluY29tcGxldGUgdXBsb2FkXG4gICAgICAgICAgICB0aGlzLm51bUJ5dGVzV3JpdHRlbiA9IHRoaXMub2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubnVtUmV0cmllcyA9IDA7IC8vIGNvdW50ZXIgZm9yIG51bWJlciBvZiByZXRyaWVzIGN1cnJlbnRseSBleGVjdXRlZFxuICAgICAgICBpZiAoIWF1dG9SZXRyeSkge1xuICAgICAgICAgICAgY2ZnLnJldHJ5T3B0aW9ucy5tYXhSZXRyaWVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpbWVPZkZpcnN0UmVxdWVzdCA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSBjZmcubWV0YWRhdGFcbiAgICAgICAgICAgID8gTnVtYmVyKGNmZy5tZXRhZGF0YS5jb250ZW50TGVuZ3RoKVxuICAgICAgICAgICAgOiBOYU47XG4gICAgICAgIHRoaXMuY29udGVudExlbmd0aCA9IGlzTmFOKGNvbnRlbnRMZW5ndGgpID8gJyonIDogY29udGVudExlbmd0aDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVXBsb2FkX2djY2xHY3NDbWQsIGNmZ1tHQ0NMX0dDU19DTURfS0VZXSwgXCJmXCIpO1xuICAgICAgICB0aGlzLm9uY2UoJ3dyaXRpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy51cmkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRpbnVlVXBsb2FkaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVVSSShlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZXN0cm95KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFVwbG9hZGluZygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50ICdmaW5pc2gnIGV2ZW50IHVudGlsIHRoZSB1cGxvYWQgaGFzIHN1Y2NlZWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmaXJlRmluaXNoRXZlbnQgVGhlIGZpbmlzaCBjYWxsYmFja1xuICAgICAqL1xuICAgIF9maW5hbChmaXJlRmluaXNoRXZlbnQgPSAoKSA9PiB7IH0pIHtcbiAgICAgICAgdGhpcy51cHN0cmVhbUVuZGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vbmNlKCd1cGxvYWRGaW5pc2hlZCcsIGZpcmVGaW5pc2hFdmVudCk7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd1cHN0cmVhbUZpbmlzaGVkJyk7XG4gICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIGBfd3JpdGVgIG1heSBub3QgYmUgY2FsbGVkIC0gbmFtZWx5IGZvciBlbXB0eSBvYmplY3QgdXBsb2Fkc1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd3cml0aW5nJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGluY29taW5nIGRhdGEgZnJvbSB1cHN0cmVhbVxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIFRoZSBjaHVuayB0byBhcHBlbmQgdG8gdGhlIGJ1ZmZlclxuICAgICAqIEBwYXJhbSBlbmNvZGluZyBUaGUgZW5jb2Rpbmcgb2YgdGhlIGNodW5rXG4gICAgICogQHBhcmFtIHJlYWRDYWxsYmFjayBBIGNhbGxiYWNrIGZvciB3aGVuIHRoZSBidWZmZXIgaGFzIGJlZW4gcmVhZCBkb3duc3RyZWFtXG4gICAgICovXG4gICAgX3dyaXRlKGNodW5rLCBlbmNvZGluZywgcmVhZENhbGxiYWNrID0gKCkgPT4geyB9KSB7XG4gICAgICAgIC8vIEJhY2t3YXJkcy1jb21wYXRpYmxlIGV2ZW50XG4gICAgICAgIHRoaXMuZW1pdCgnd3JpdGluZycpO1xuICAgICAgICB0aGlzLndyaXRlQnVmZmVycy5wdXNoKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycgPyBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpIDogY2h1bmspO1xuICAgICAgICB0aGlzLm9uY2UoJ3JlYWRGcm9tQ2h1bmtCdWZmZXInLCByZWFkQ2FsbGJhY2spO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHRoaXMuZW1pdCgnd3JvdGVUb0NodW5rQnVmZmVyJykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmVwZW5kcyB0aGUgbG9jYWwgYnVmZmVyIHRvIHdyaXRlIGJ1ZmZlciBhbmQgcmVzZXRzIGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGtlZXBMYXN0Qnl0ZXMgbnVtYmVyIG9mIGJ5dGVzIHRvIGtlZXAgZnJvbSB0aGUgZW5kIG9mIHRoZSBsb2NhbCBidWZmZXIuXG4gICAgICovXG4gICAgcHJlcGVuZExvY2FsQnVmZmVyVG9VcHN0cmVhbShrZWVwTGFzdEJ5dGVzKSB7XG4gICAgICAgIC8vIFR5cGljYWxseSwgdGhlIHVwc3RyZWFtIHdyaXRlIGJ1ZmZlcnMgc2hvdWxkIGJlIHNtYWxsZXIgdGhhbiB0aGUgbG9jYWxcbiAgICAgICAgLy8gY2FjaGUsIHNvIHdlIGNhbiBzYXZlIHRpbWUgYnkgc2V0dGluZyB0aGUgbG9jYWwgY2FjaGUgYXMgdGhlIG5ld1xuICAgICAgICAvLyB1cHN0cmVhbSB3cml0ZSBidWZmZXIgYXJyYXkgYW5kIGFwcGVuZGluZyB0aGUgb2xkIGFycmF5IHRvIGl0XG4gICAgICAgIGxldCBpbml0aWFsQnVmZmVycyA9IFtdO1xuICAgICAgICBpZiAoa2VlcExhc3RCeXRlcykge1xuICAgICAgICAgICAgLy8gd2Ugb25seSB3YW50IHRoZSBsYXN0IFggYnl0ZXNcbiAgICAgICAgICAgIGxldCBieXRlc0tlcHQgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGtlZXBMYXN0Qnl0ZXMgPiBieXRlc0tlcHQpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2FkIGJhY2t3YXJkcyBiZWNhdXNlIHdlIHdhbnQgdGhlIGxhc3QgWCBieXRlc1xuICAgICAgICAgICAgICAgIC8vIG5vdGU6IGBsb2NhbFdyaXRlQ2FjaGVCeXRlTGVuZ3RoYCBpcyByZXNldCBiZWxvd1xuICAgICAgICAgICAgICAgIGxldCBidWYgPSB0aGlzLmxvY2FsV3JpdGVDYWNoZS5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWJ1ZilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgYnl0ZXNLZXB0ICs9IGJ1Zi5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChieXRlc0tlcHQgPiBrZWVwTGFzdEJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgZ29uZSBvdmVyIHRoZSBhbW91bnQgZGVzaXJlZCwgbGV0J3Mga2VlcCB0aGUgbGFzdCBYIGJ5dGVzXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIHRoaXMgYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBieXRlc0tlcHQgLSBrZWVwTGFzdEJ5dGVzO1xuICAgICAgICAgICAgICAgICAgICBidWYgPSBidWYuc3ViYXJyYXkoZGlmZik7XG4gICAgICAgICAgICAgICAgICAgIGJ5dGVzS2VwdCAtPSBkaWZmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbml0aWFsQnVmZmVycy51bnNoaWZ0KGJ1Zik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB3ZSdyZSBrZWVwaW5nIGFsbCBvZiB0aGUgbG9jYWwgY2FjaGUsIHNpbXBseSB1c2UgaXQgYXMgdGhlIGluaXRpYWwgYnVmZmVyXG4gICAgICAgICAgICBpbml0aWFsQnVmZmVycyA9IHRoaXMubG9jYWxXcml0ZUNhY2hlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFwcGVuZCB0aGUgb2xkIHVwc3RyZWFtIHRvIHRoZSBuZXdcbiAgICAgICAgY29uc3QgYXBwZW5kID0gdGhpcy53cml0ZUJ1ZmZlcnM7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXJzID0gaW5pdGlhbEJ1ZmZlcnM7XG4gICAgICAgIGZvciAoY29uc3QgYnVmIG9mIGFwcGVuZCkge1xuICAgICAgICAgICAgdGhpcy53cml0ZUJ1ZmZlcnMucHVzaChidWYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlc2V0IGxhc3QgYnVmZmVycyBzZW50XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VwbG9hZF9pbnN0YW5jZXMsIFwibVwiLCBfVXBsb2FkX3Jlc2V0TG9jYWxCdWZmZXJzQ2FjaGUpLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBkYXRhIGZyb20gdXBzdHJlYW0ncyBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgVGhlIG1heGltdW0gYW1vdW50IHRvIHJldHVybiBmcm9tIHRoZSBidWZmZXIuXG4gICAgICovXG4gICAgKnB1bGxGcm9tQ2h1bmtCdWZmZXIobGltaXQpIHtcbiAgICAgICAgd2hpbGUgKGxpbWl0KSB7XG4gICAgICAgICAgICBjb25zdCBidWYgPSB0aGlzLndyaXRlQnVmZmVycy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKCFidWYpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBsZXQgYnVmVG9ZaWVsZCA9IGJ1ZjtcbiAgICAgICAgICAgIGlmIChidWYuYnl0ZUxlbmd0aCA+IGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgYnVmVG9ZaWVsZCA9IGJ1Zi5zdWJhcnJheSgwLCBsaW1pdCk7XG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUJ1ZmZlcnMudW5zaGlmdChidWYuc3ViYXJyYXkobGltaXQpKTtcbiAgICAgICAgICAgICAgICBsaW1pdCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaW1pdCAtPSBidWYuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIGJ1ZlRvWWllbGQ7XG4gICAgICAgICAgICAvLyBOb3RpZnkgdXBzdHJlYW0gd2UndmUgcmVhZCBmcm9tIHRoZSBidWZmZXIgYW5kIHdlJ3JlIGFibGUgdG8gY29uc3VtZVxuICAgICAgICAgICAgLy8gbW9yZS4gSXQgY2FuIGFsc28gcG90ZW50aWFsbHkgc2VuZCBtb3JlIGRhdGEgZG93biBhcyB3ZSdyZSBjdXJyZW50bHlcbiAgICAgICAgICAgIC8vIGl0ZXJhdGluZy5cbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVhZEZyb21DaHVua0J1ZmZlcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgaGFuZGxlciBmb3IgZGV0ZXJtaW5pbmcgaWYgZGF0YSBpcyByZWFkeSB0byBiZSByZWFkIGZyb20gdXBzdHJlYW0uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBJZiB0aGVyZSB3aWxsIGJlIG1vcmUgY2h1bmtzIHRvIHJlYWQgaW4gdGhlIGZ1dHVyZVxuICAgICAqL1xuICAgIGFzeW5jIHdhaXRGb3JOZXh0Q2h1bmsoKSB7XG4gICAgICAgIGNvbnN0IHdpbGxCZU1vcmVDaHVua3MgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgIC8vIFRoZXJlJ3MgZGF0YSBhdmFpbGFibGUgLSBpdCBzaG91bGQgYmUgZGlnZXN0ZWRcbiAgICAgICAgICAgIGlmICh0aGlzLndyaXRlQnVmZmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSB1cHN0cmVhbSB3cml0YWJsZSBlbmRlZCwgd2Ugc2hvdWxkbid0IGV4cGVjdCBhbnkgbW9yZSBkYXRhLlxuICAgICAgICAgICAgaWYgKHRoaXMudXBzdHJlYW1FbmRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5vdGhpbmcgaW1tZWRpYXRlIHNlZW1zIHRvIGJlIGRldGVybWluZWQuIFdlIG5lZWQgdG8gcHJlcGFyZSBzb21lXG4gICAgICAgICAgICAvLyBsaXN0ZW5lcnMgdG8gZGV0ZXJtaW5lIG5leHQgc3RlcHMuLi5cbiAgICAgICAgICAgIGNvbnN0IHdyb3RlVG9DaHVua0J1ZmZlckNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHVwc3RyZWFtRmluaXNoZWRDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHNob3VsZCBiZSB0aGUgbGFzdCBjaHVuaywgaWYgdGhlcmUncyBhbnl0aGluZyB0aGVyZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLndyaXRlQnVmZmVycy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBSZW1vdmUgbGlzdGVuZXJzIHdoZW4gd2UncmUgcmVhZHkgdG8gY2FsbGJhY2suXG4gICAgICAgICAgICBjb25zdCByZW1vdmVMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcignd3JvdGVUb0NodW5rQnVmZmVyJywgd3JvdGVUb0NodW5rQnVmZmVyQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ3Vwc3RyZWFtRmluaXNoZWQnLCB1cHN0cmVhbUZpbmlzaGVkQ2FsbGJhY2spO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgZGF0YSByZWNlbnRseSB3cml0dGVuIGl0IHNob3VsZCBiZSBkaWdlc3RlZFxuICAgICAgICAgICAgdGhpcy5vbmNlKCd3cm90ZVRvQ2h1bmtCdWZmZXInLCB3cm90ZVRvQ2h1bmtCdWZmZXJDYWxsYmFjayk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdXBzdHJlYW0gZmluaXNoZXMgbGV0J3Mgc2VlIGlmIHRoZXJlJ3MgYW55dGhpbmcgdG8gZ3JhYlxuICAgICAgICAgICAgdGhpcy5vbmNlKCd1cHN0cmVhbUZpbmlzaGVkJywgdXBzdHJlYW1GaW5pc2hlZENhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3aWxsQmVNb3JlQ2h1bmtzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkcyBkYXRhIGZyb20gdXBzdHJlYW0gdXAgdG8gdGhlIHByb3ZpZGVkIGBsaW1pdGAuXG4gICAgICogRW5kcyB3aGVuIHRoZSBsaW1pdCBoYXMgcmVhY2hlZCBvciBubyBkYXRhIGlzIGV4cGVjdGVkIHRvIGJlIHB1c2hlZCBmcm9tIHVwc3RyZWFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IFRoZSBtb3N0IGFtb3VudCBvZiBkYXRhIHRoaXMgaXRlcmF0b3Igc2hvdWxkIHJldHVybi4gYEluZmluaXR5YCBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIGFzeW5jICp1cHN0cmVhbUl0ZXJhdG9yKGxpbWl0ID0gSW5maW5pdHkpIHtcbiAgICAgICAgLy8gcmVhZCBmcm9tIHVwc3RyZWFtIGNodW5rIGJ1ZmZlclxuICAgICAgICB3aGlsZSAobGltaXQgJiYgKGF3YWl0IHRoaXMud2FpdEZvck5leHRDaHVuaygpKSkge1xuICAgICAgICAgICAgLy8gcmVhZCB1bnRpbCBlbmQgb3IgbGltaXQgaGFzIGJlZW4gcmVhY2hlZFxuICAgICAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiB0aGlzLnB1bGxGcm9tQ2h1bmtCdWZmZXIobGltaXQpKSB7XG4gICAgICAgICAgICAgICAgbGltaXQgLT0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICB5aWVsZCBjaHVuaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVVUkkoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVVJJQXN5bmMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNyZWF0ZVVSSUFzeW5jKCkudGhlbihyID0+IGNhbGxiYWNrKG51bGwsIHIpLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGFzeW5jIGNyZWF0ZVVSSUFzeW5jKCkge1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHsgLi4udGhpcy5tZXRhZGF0YSB9O1xuICAgICAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgICAgIC8vIERlbGV0ZSBjb250ZW50IGxlbmd0aCBhbmQgY29udGVudCB0eXBlIGZyb20gbWV0YWRhdGEgaWYgdGhleSBleGlzdC5cbiAgICAgICAgLy8gVGhlc2UgYXJlIGhlYWRlcnMgYW5kIHNob3VsZCBub3QgYmUgc2VudCBhcyBwYXJ0IG9mIHRoZSBtZXRhZGF0YS5cbiAgICAgICAgaWYgKG1ldGFkYXRhLmNvbnRlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbJ1gtVXBsb2FkLUNvbnRlbnQtTGVuZ3RoJ10gPSBtZXRhZGF0YS5jb250ZW50TGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBkZWxldGUgbWV0YWRhdGEuY29udGVudExlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0YWRhdGEuY29udGVudFR5cGUpIHtcbiAgICAgICAgICAgIGhlYWRlcnNbJ1gtVXBsb2FkLUNvbnRlbnQtVHlwZSddID0gbWV0YWRhdGEuY29udGVudFR5cGU7XG4gICAgICAgICAgICBkZWxldGUgbWV0YWRhdGEuY29udGVudFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGdvb2dBUElDbGllbnQgPSBgJHtnZXRSdW50aW1lVHJhY2tpbmdTdHJpbmcoKX0gZ2NjbC8ke3BhY2thZ2VKc29uLnZlcnNpb259LSR7Z2V0TW9kdWxlRm9ybWF0KCl9IGdjY2wtaW52b2NhdGlvbi1pZC8ke3RoaXMuY3VycmVudEludm9jYXRpb25JZC51cml9YDtcbiAgICAgICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VwbG9hZF9nY2NsR2NzQ21kLCBcImZcIikpIHtcbiAgICAgICAgICAgIGdvb2dBUElDbGllbnQgKz0gYCBnY2NsLWdjcy1jbWQvJHtfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VcGxvYWRfZ2NjbEdjc0NtZCwgXCJmXCIpfWA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2hlY2sgaWYgaGVhZGVycyBhbHJlYWR5IGV4aXN0IGJlZm9yZSBjcmVhdGluZyBuZXcgb25lc1xuICAgICAgICBjb25zdCByZXFPcHRzID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6IFt0aGlzLmJhc2VVUkksIHRoaXMuYnVja2V0LCAnbyddLmpvaW4oJy8nKSxcbiAgICAgICAgICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5maWxlLFxuICAgICAgICAgICAgICAgIHVwbG9hZFR5cGU6ICdyZXN1bWFibGUnLFxuICAgICAgICAgICAgfSwgdGhpcy5wYXJhbXMpLFxuICAgICAgICAgICAgZGF0YTogbWV0YWRhdGEsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBnZXRVc2VyQWdlbnRTdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAneC1nb29nLWFwaS1jbGllbnQnOiBnb29nQVBJQ2xpZW50LFxuICAgICAgICAgICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBpZiAobWV0YWRhdGEuY29udGVudExlbmd0aCkge1xuICAgICAgICAgICAgcmVxT3B0cy5oZWFkZXJzWydYLVVwbG9hZC1Db250ZW50LUxlbmd0aCddID1cbiAgICAgICAgICAgICAgICBtZXRhZGF0YS5jb250ZW50TGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGFkYXRhLmNvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICByZXFPcHRzLmhlYWRlcnNbJ1gtVXBsb2FkLUNvbnRlbnQtVHlwZSddID0gbWV0YWRhdGEuY29udGVudFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdlbmVyYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXFPcHRzLnBhcmFtcy5pZkdlbmVyYXRpb25NYXRjaCA9IHRoaXMuZ2VuZXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5rbXNLZXlOYW1lKSB7XG4gICAgICAgICAgICByZXFPcHRzLnBhcmFtcy5rbXNLZXlOYW1lID0gdGhpcy5rbXNLZXlOYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByZWRlZmluZWRBY2wpIHtcbiAgICAgICAgICAgIHJlcU9wdHMucGFyYW1zLnByZWRlZmluZWRBY2wgPSB0aGlzLnByZWRlZmluZWRBY2w7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3JpZ2luKSB7XG4gICAgICAgICAgICByZXFPcHRzLmhlYWRlcnMuT3JpZ2luID0gdGhpcy5vcmlnaW47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJpID0gYXdhaXQgQXN5bmNSZXRyeShhc3luYyAoYmFpbCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QocmVxT3B0cyk7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBzdWNjZXNzZnVsbHkgZ290IGEgVVJJIHdlIGNhbiBub3cgY3JlYXRlIGEgbmV3IGludm9jYXRpb24gaWRcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnZvY2F0aW9uSWQudXJpID0gdXVpZC52NCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXMuaGVhZGVycy5sb2NhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gZXJyO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFwaUVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiAoX2EgPSBlLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAoX2IgPSBlLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogKF9jID0gZS5yZXNwb25zZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogZS5jb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJldHJ5T3B0aW9ucy5tYXhSZXRyaWVzID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJldHJ5T3B0aW9ucy5yZXRyeWFibGVFcnJvckZuKGFwaUVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhaWwoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICByZXRyaWVzOiB0aGlzLnJldHJ5T3B0aW9ucy5tYXhSZXRyaWVzLFxuICAgICAgICAgICAgZmFjdG9yOiB0aGlzLnJldHJ5T3B0aW9ucy5yZXRyeURlbGF5TXVsdGlwbGllcixcbiAgICAgICAgICAgIG1heFRpbWVvdXQ6IHRoaXMucmV0cnlPcHRpb25zLm1heFJldHJ5RGVsYXkgKiAxMDAwLCAvL2NvbnZlcnQgdG8gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBtYXhSZXRyeVRpbWU6IHRoaXMucmV0cnlPcHRpb25zLnRvdGFsVGltZW91dCAqIDEwMDAsIC8vY29udmVydCB0byBtaWxsaXNlY29uZHNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXJpID0gdXJpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIC8vIGVtaXQgdGhlIG5ld2x5IGdlbmVyYXRlZCBVUkkgZm9yIGZ1dHVyZSByZXVzZSwgaWYgbmVjZXNzYXJ5LlxuICAgICAgICB0aGlzLmVtaXQoJ3VyaScsIHVyaSk7XG4gICAgICAgIHJldHVybiB1cmk7XG4gICAgfVxuICAgIGFzeW5jIGNvbnRpbnVlVXBsb2FkaW5nKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMub2Zmc2V0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoYXdhaXQgdGhpcy5nZXRBbmRTZXRPZmZzZXQoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0VXBsb2FkaW5nKCk7XG4gICAgfVxuICAgIGFzeW5jIHN0YXJ0VXBsb2FkaW5nKCkge1xuICAgICAgICBjb25zdCBtdWx0aUNodW5rTW9kZSA9ICEhdGhpcy5jaHVua1NpemU7XG4gICAgICAgIGxldCByZXNwb25zZVJlY2VpdmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubnVtQ2h1bmtzUmVhZEluUmVxdWVzdCA9IDA7XG4gICAgICAgIGlmICghdGhpcy5vZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgb2Zmc2V0IChzZXJ2ZXIpIGlzIHRvbyBmYXIgYmVoaW5kIHRoZSBjdXJyZW50IHN0cmVhbVxuICAgICAgICBpZiAodGhpcy5vZmZzZXQgPCB0aGlzLm51bUJ5dGVzV3JpdHRlbikge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLm51bUJ5dGVzV3JpdHRlbiAtIHRoaXMub2Zmc2V0O1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBUaGUgb2Zmc2V0IGlzIGxvd2VyIHRoYW4gdGhlIG51bWJlciBvZiBieXRlcyB3cml0dGVuLiBUaGUgc2VydmVyIGhhcyAke3RoaXMub2Zmc2V0fSBieXRlcyBhbmQgd2hpbGUgJHt0aGlzLm51bUJ5dGVzV3JpdHRlbn0gYnl0ZXMgaGFzIGJlZW4gdXBsb2FkZWQgLSB0aHVzICR7ZGVsdGF9IGJ5dGVzIGFyZSBtaXNzaW5nLiBTdG9wcGluZyBhcyB0aGlzIGNvdWxkIHJlc3VsdCBpbiBkYXRhIGxvc3MuIEluaXRpYXRlIGEgbmV3IHVwbG9hZCB0byBjb250aW51ZS5gO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBSYW5nZUVycm9yKG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBzaG91bGQgJ2Zhc3QtZm9yd2FyZCcgdG8gdGhlIHJlbGV2YW50IGRhdGEgdG8gdXBsb2FkXG4gICAgICAgIGlmICh0aGlzLm51bUJ5dGVzV3JpdHRlbiA8IHRoaXMub2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyAnZmFzdC1mb3J3YXJkJyB0byB0aGUgYnl0ZSB3aGVyZSB3ZSBuZWVkIHRvIHVwbG9hZC5cbiAgICAgICAgICAgIC8vIG9ubHkgcHVzaCBkYXRhIGZyb20gdGhlIGJ5dGUgYWZ0ZXIgdGhlIG9uZSB3ZSBsZWZ0IG9mZiBvblxuICAgICAgICAgICAgY29uc3QgZmFzdEZvcndhcmRCeXRlcyA9IHRoaXMub2Zmc2V0IC0gdGhpcy5udW1CeXRlc1dyaXR0ZW47XG4gICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IF9jaHVuayBvZiB0aGlzLnVwc3RyZWFtSXRlcmF0b3IoZmFzdEZvcndhcmRCeXRlcykpIHtcbiAgICAgICAgICAgICAgICBfY2h1bms7IC8vIGRpc2NhcmQgdGhlIGRhdGEgdXAgdW50aWwgdGhlIHBvaW50IHdlIHdhbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubnVtQnl0ZXNXcml0dGVuID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGV4cGVjdGVkVXBsb2FkU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gU2V0IGBleHBlY3RlZFVwbG9hZFNpemVgIHRvIGBjb250ZW50TGVuZ3RoIC0gdGhpcy5udW1CeXRlc1dyaXR0ZW5gLCBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRlbnRMZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBleHBlY3RlZFVwbG9hZFNpemUgPSB0aGlzLmNvbnRlbnRMZW5ndGggLSB0aGlzLm51bUJ5dGVzV3JpdHRlbjtcbiAgICAgICAgfVxuICAgICAgICAvLyBgZXhwZWN0ZWRVcGxvYWRTaXplYCBzaG91bGQgYmUgbm8gbW9yZSB0aGFuIHRoZSBgY2h1bmtTaXplYC5cbiAgICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGlzIGlzIHRoZSBsYXN0IGNodW5rIHJlcXVlc3QgZm9yIGEgbXVsdGlwbGVcbiAgICAgICAgLy8gY2h1bmsgdXBsb2FkLCB0aHVzIHNtYWxsZXIgdGhhbiB0aGUgY2h1bmsgc2l6ZS5cbiAgICAgICAgaWYgKHRoaXMuY2h1bmtTaXplKSB7XG4gICAgICAgICAgICBleHBlY3RlZFVwbG9hZFNpemUgPSBleHBlY3RlZFVwbG9hZFNpemVcbiAgICAgICAgICAgICAgICA/IE1hdGgubWluKHRoaXMuY2h1bmtTaXplLCBleHBlY3RlZFVwbG9hZFNpemUpXG4gICAgICAgICAgICAgICAgOiB0aGlzLmNodW5rU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBIHF1ZXVlIGZvciB0aGUgdXBzdHJlYW0gZGF0YVxuICAgICAgICBjb25zdCB1cHN0cmVhbVF1ZXVlID0gdGhpcy51cHN0cmVhbUl0ZXJhdG9yKGV4cGVjdGVkVXBsb2FkU2l6ZSk7XG4gICAgICAgIC8vIFRoZSBwcmltYXJ5IHJlYWQgc3RyZWFtIGZvciB0aGlzIHJlcXVlc3QuIFRoaXMgc3RyZWFtIHJldHJpZXZlcyBubyBtb3JlXG4gICAgICAgIC8vIHRoYW4gdGhlIGV4YWN0IHJlcXVlc3RlZCBhbW91bnQgZnJvbSB1cHN0cmVhbS5cbiAgICAgICAgY29uc3QgcmVxdWVzdFN0cmVhbSA9IG5ldyBSZWFkYWJsZSh7XG4gICAgICAgICAgICByZWFkOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgYXR0ZW1wdCB0byByZXRyaWV2ZSBkYXRhIHVwc3RyZWFtIGlmIHdlIGFscmVhZHkgaGF2ZSBhIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlUmVjZWl2ZWQpXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0ucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1cHN0cmVhbVF1ZXVlLm5leHQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubnVtQ2h1bmtzUmVhZEluUmVxdWVzdCsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAobXVsdGlDaHVua01vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgZXZlciBidWZmZXIgdXNlZCBpbiB0aGUgcmVxdWVzdCBpbiBtdWx0aS1jaHVuayBtb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VcGxvYWRfaW5zdGFuY2VzLCBcIm1cIiwgX1VwbG9hZF9hZGRMb2NhbEJ1ZmZlckNhY2hlKS5jYWxsKHRoaXMsIHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VcGxvYWRfaW5zdGFuY2VzLCBcIm1cIiwgX1VwbG9hZF9yZXNldExvY2FsQnVmZmVyc0NhY2hlKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVXBsb2FkX2luc3RhbmNlcywgXCJtXCIsIF9VcGxvYWRfYWRkTG9jYWxCdWZmZXJDYWNoZSkuY2FsbCh0aGlzLCByZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubnVtQnl0ZXNXcml0dGVuICs9IHJlc3VsdC52YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXNXcml0dGVuOiB0aGlzLm51bUJ5dGVzV3JpdHRlbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRMZW5ndGg6IHRoaXMuY29udGVudExlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0ucHVzaChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFN0cmVhbS5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgZ29vZ0FQSUNsaWVudCA9IGAke2dldFJ1bnRpbWVUcmFja2luZ1N0cmluZygpfSBnY2NsLyR7cGFja2FnZUpzb24udmVyc2lvbn0tJHtnZXRNb2R1bGVGb3JtYXQoKX0gZ2NjbC1pbnZvY2F0aW9uLWlkLyR7dGhpcy5jdXJyZW50SW52b2NhdGlvbklkLmNodW5rfWA7XG4gICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VcGxvYWRfZ2NjbEdjc0NtZCwgXCJmXCIpKSB7XG4gICAgICAgICAgICBnb29nQVBJQ2xpZW50ICs9IGAgZ2NjbC1nY3MtY21kLyR7X19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVXBsb2FkX2djY2xHY3NDbWQsIFwiZlwiKX1gO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6IGdldFVzZXJBZ2VudFN0cmluZygpLFxuICAgICAgICAgICAgJ3gtZ29vZy1hcGktY2xpZW50JzogZ29vZ0FQSUNsaWVudCxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSWYgdXNpbmcgbXVsdGlwbGUgY2h1bmsgdXBsb2FkLCBzZXQgYXBwcm9wcmlhdGUgaGVhZGVyXG4gICAgICAgIGlmIChtdWx0aUNodW5rTW9kZSkge1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBrbm93IGhvdyBtdWNoIGRhdGEgaXMgYXZhaWxhYmxlIHVwc3RyZWFtIHRvIHNldCB0aGUgYENvbnRlbnQtUmFuZ2VgIGhlYWRlci5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvcGVyZm9ybWluZy1yZXN1bWFibGUtdXBsb2FkcyNjaHVua2VkLXVwbG9hZFxuICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiB0aGlzLnVwc3RyZWFtSXRlcmF0b3IoZXhwZWN0ZWRVcGxvYWRTaXplKSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBjb252ZW5pZW50bHkgdHJhY2sgYW5kIGtlZXAgdGhlIHNpemUgb2YgdGhlIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAgLy8gV2Ugd2lsbCByZWFjaCBlaXRoZXIgdGhlIGV4cGVjdGVkIHVwbG9hZCBzaXplIG9yIHRoZSByZW1haW5kZXIgb2YgdGhlIHN0cmVhbS5cbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VcGxvYWRfaW5zdGFuY2VzLCBcIm1cIiwgX1VwbG9hZF9hZGRMb2NhbEJ1ZmZlckNhY2hlKS5jYWxsKHRoaXMsIGNodW5rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHN1bSBmcm9tIHRoZSBgI2FkZExvY2FsQnVmZmVyQ2FjaGVgIGNhbGxzXG4gICAgICAgICAgICBjb25zdCBieXRlc1RvVXBsb2FkID0gdGhpcy5sb2NhbFdyaXRlQ2FjaGVCeXRlTGVuZ3RoO1xuICAgICAgICAgICAgLy8gSW1wb3J0YW50OiB3ZSB3YW50IHRvIGtub3cgaWYgdGhlIHVwc3RyZWFtIGhhcyBlbmRlZCBhbmQgdGhlIHF1ZXVlIGlzIGVtcHR5IGJlZm9yZVxuICAgICAgICAgICAgLy8gdW5zaGlmdGluZyBkYXRhIGJhY2sgaW50byB0aGUgcXVldWUuIFRoaXMgd2F5IHdlIHdpbGwga25vdyBpZiB0aGlzIGlzIHRoZSBsYXN0IHJlcXVlc3Qgb3Igbm90LlxuICAgICAgICAgICAgY29uc3QgaXNMYXN0Q2h1bmtPZlVwbG9hZCA9ICEoYXdhaXQgdGhpcy53YWl0Rm9yTmV4dENodW5rKCkpO1xuICAgICAgICAgICAgLy8gSW1wb3J0YW50OiBwdXQgdGhlIGRhdGEgYmFjayBpbiB0aGUgcXVldWUgZm9yIHRoZSBhY3R1YWwgdXBsb2FkXG4gICAgICAgICAgICB0aGlzLnByZXBlbmRMb2NhbEJ1ZmZlclRvVXBzdHJlYW0oKTtcbiAgICAgICAgICAgIGxldCB0b3RhbE9iamVjdFNpemUgPSB0aGlzLmNvbnRlbnRMZW5ndGg7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29udGVudExlbmd0aCAhPT0gJ251bWJlcicgJiZcbiAgICAgICAgICAgICAgICBpc0xhc3RDaHVua09mVXBsb2FkICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNQYXJ0aWFsVXBsb2FkKSB7XG4gICAgICAgICAgICAgICAgLy8gTGV0J3MgbGV0IHRoZSBzZXJ2ZXIga25vdyB0aGlzIGlzIHRoZSBsYXN0IGNodW5rIG9mIHRoZSBvYmplY3Qgc2luY2Ugd2UgZGlkbid0IHNldCBpdCBiZWZvcmUuXG4gICAgICAgICAgICAgICAgdG90YWxPYmplY3RTaXplID0gYnl0ZXNUb1VwbG9hZCArIHRoaXMubnVtQnl0ZXNXcml0dGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYC0gMWAgYXMgdGhlIGVuZGluZyBieXRlIGlzIGluY2x1c2l2ZSBpbiB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgIGNvbnN0IGVuZGluZ0J5dGUgPSBieXRlc1RvVXBsb2FkICsgdGhpcy5udW1CeXRlc1dyaXR0ZW4gLSAxO1xuICAgICAgICAgICAgLy8gYENvbnRlbnQtTGVuZ3RoYCBmb3IgbXVsdGlwbGUgY2h1bmsgdXBsb2FkcyBpcyB0aGUgc2l6ZSBvZiB0aGUgY2h1bmssXG4gICAgICAgICAgICAvLyBub3QgdGhlIG92ZXJhbGwgb2JqZWN0XG4gICAgICAgICAgICBoZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gYnl0ZXNUb1VwbG9hZDtcbiAgICAgICAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtUmFuZ2UnXSA9XG4gICAgICAgICAgICAgICAgYGJ5dGVzICR7dGhpcy5vZmZzZXR9LSR7ZW5kaW5nQnl0ZX0vJHt0b3RhbE9iamVjdFNpemV9YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtUmFuZ2UnXSA9IGBieXRlcyAke3RoaXMub2Zmc2V0fS0qLyR7dGhpcy5jb250ZW50TGVuZ3RofWA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxT3B0cyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXJpLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIGJvZHk6IHJlcXVlc3RTdHJlYW0sXG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdFN0cmVhbShyZXFPcHRzKTtcbiAgICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VSZWNlaXZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNwb25zZUhhbmRsZXIocmVzcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IGU7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXRyeU9wdGlvbnMucmV0cnlhYmxlRXJyb3JGbihlcnIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdHRlbXB0RGVsYXllZFJldHJ5KHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBOYU4sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGVycixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBQcm9jZXNzIHRoZSBBUEkgcmVzcG9uc2UgdG8gbG9vayBmb3IgZXJyb3JzIHRoYXQgY2FtZSBpblxuICAgIC8vIHRoZSByZXNwb25zZSBib2R5LlxuICAgIGFzeW5jIHJlc3BvbnNlSGFuZGxlcihyZXNwKSB7XG4gICAgICAgIGlmIChyZXNwLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveShyZXNwLmRhdGEuZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgY2FuIHNhZmVseSBjcmVhdGUgYSBuZXcgaWQgZm9yIHRoZSBjaHVua1xuICAgICAgICB0aGlzLmN1cnJlbnRJbnZvY2F0aW9uSWQuY2h1bmsgPSB1dWlkLnY0KCk7XG4gICAgICAgIGNvbnN0IG1vcmVEYXRhVG9VcGxvYWQgPSBhd2FpdCB0aGlzLndhaXRGb3JOZXh0Q2h1bmsoKTtcbiAgICAgICAgY29uc3Qgc2hvdWxkQ29udGludWVXaXRoTmV4dE11bHRpQ2h1bmtSZXF1ZXN0ID0gdGhpcy5jaHVua1NpemUgJiZcbiAgICAgICAgICAgIHJlc3Auc3RhdHVzID09PSBSRVNVTUFCTEVfSU5DT01QTEVURV9TVEFUVVNfQ09ERSAmJlxuICAgICAgICAgICAgcmVzcC5oZWFkZXJzLnJhbmdlICYmXG4gICAgICAgICAgICBtb3JlRGF0YVRvVXBsb2FkO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpcyB0cnVlIHdoZW4gd2UncmUgZXhwZWN0aW5nIHRvIHVwbG9hZCBtb3JlIGRhdGEgaW4gYSBmdXR1cmUgcmVxdWVzdCxcbiAgICAgICAgICogeWV0IHRoZSB1cHN0cmVhbSBmb3IgdGhlIHVwbG9hZCBzZXNzaW9uIGhhcyBiZWVuIGV4aGF1c3RlZC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHNob3VsZENvbnRpbnVlVXBsb2FkSW5Bbm90aGVyUmVxdWVzdCA9IHRoaXMuaXNQYXJ0aWFsVXBsb2FkICYmXG4gICAgICAgICAgICByZXNwLnN0YXR1cyA9PT0gUkVTVU1BQkxFX0lOQ09NUExFVEVfU1RBVFVTX0NPREUgJiZcbiAgICAgICAgICAgICFtb3JlRGF0YVRvVXBsb2FkO1xuICAgICAgICBpZiAoc2hvdWxkQ29udGludWVXaXRoTmV4dE11bHRpQ2h1bmtSZXF1ZXN0KSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIHVwcGVyIHZhbHVlIGluIHRoaXMgaGVhZGVyIHRvIGRldGVybWluZSB3aGVyZSB0byBzdGFydCB0aGUgbmV4dCBjaHVuay5cbiAgICAgICAgICAgIC8vIFdlIHNob3VsZCBub3QgYXNzdW1lIHRoYXQgdGhlIHNlcnZlciByZWNlaXZlZCBhbGwgYnl0ZXMgc2VudCBpbiB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvcGVyZm9ybWluZy1yZXN1bWFibGUtdXBsb2FkcyNjaHVua2VkLXVwbG9hZFxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSByZXNwLmhlYWRlcnMucmFuZ2U7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IE51bWJlcihyYW5nZS5zcGxpdCgnLScpWzFdKSArIDE7XG4gICAgICAgICAgICAvLyBXZSBzaG91bGQgbm90IGFzc3VtZSB0aGF0IHRoZSBzZXJ2ZXIgcmVjZWl2ZWQgYWxsIGJ5dGVzIHNlbnQgaW4gdGhlIHJlcXVlc3QuXG4gICAgICAgICAgICAvLyAtIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9zdG9yYWdlL2RvY3MvcGVyZm9ybWluZy1yZXN1bWFibGUtdXBsb2FkcyNjaHVua2VkLXVwbG9hZFxuICAgICAgICAgICAgY29uc3QgbWlzc2luZ0J5dGVzID0gdGhpcy5udW1CeXRlc1dyaXR0ZW4gLSB0aGlzLm9mZnNldDtcbiAgICAgICAgICAgIGlmIChtaXNzaW5nQnl0ZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBBcyBtdWx0aS1jaHVuayB1cGxvYWRzIHNlbmQgb25lIGNodW5rIHBlciByZXF1ZXN0IGFuZCBwdWxscyBvbmVcbiAgICAgICAgICAgICAgICAvLyBjaHVuayBpbnRvIHRoZSBwaXBlbGluZSwgcHJlcGVuZGluZyB0aGUgbWlzc2luZyBieXRlcyBiYWNrIHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIGJlIGZpbmUgZm9yIHRoZSBuZXh0IHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgdGhpcy5wcmVwZW5kTG9jYWxCdWZmZXJUb1Vwc3RyZWFtKG1pc3NpbmdCeXRlcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5udW1CeXRlc1dyaXR0ZW4gLT0gbWlzc2luZ0J5dGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gYnl0ZXMgbWlzc2luZyAtIG5vIG5lZWQgdG8ga2VlcCB0aGUgbG9jYWwgY2FjaGVcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VcGxvYWRfaW5zdGFuY2VzLCBcIm1cIiwgX1VwbG9hZF9yZXNldExvY2FsQnVmZmVyc0NhY2hlKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29udGludWUgdXBsb2FkaW5nIG5leHQgY2h1bmtcbiAgICAgICAgICAgIHRoaXMuY29udGludWVVcGxvYWRpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5pc1N1Y2Nlc3NmdWxSZXNwb25zZShyZXNwLnN0YXR1cykgJiZcbiAgICAgICAgICAgICFzaG91bGRDb250aW51ZVVwbG9hZEluQW5vdGhlclJlcXVlc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcignVXBsb2FkIGZhaWxlZCcpO1xuICAgICAgICAgICAgZXJyLmNvZGUgPSByZXNwLnN0YXR1cztcbiAgICAgICAgICAgIGVyci5uYW1lID0gJ1VwbG9hZCBmYWlsZWQnO1xuICAgICAgICAgICAgaWYgKHJlc3AgPT09IG51bGwgfHwgcmVzcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgZXJyLmVycm9ycyA9IFtyZXNwID09PSBudWxsIHx8IHJlc3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3AuZGF0YV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8ga2VlcCB0aGUgY2FjaGVcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VwbG9hZF9pbnN0YW5jZXMsIFwibVwiLCBfVXBsb2FkX3Jlc2V0TG9jYWxCdWZmZXJzQ2FjaGUpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICBpZiAocmVzcCAmJiByZXNwLmRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXNwLmRhdGEuc2l6ZSA9IE51bWJlcihyZXNwLmRhdGEuc2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ21ldGFkYXRhJywgcmVzcC5kYXRhKTtcbiAgICAgICAgICAgIC8vIEFsbG93IHRoZSBvYmplY3QgKFVwbG9hZCkgdG8gY29udGludWUgbmF0dXJhbGx5IHNvIHRoZSB1c2VyJ3NcbiAgICAgICAgICAgIC8vIFwiZmluaXNoXCIgZXZlbnQgZmlyZXMuXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3VwbG9hZEZpbmlzaGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHN0YXR1cyBvZiBhbiBleGlzdGluZyByZXN1bWFibGUgdXBsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNmZyBBIGNvbmZpZ3VyYXRpb24gdG8gdXNlLiBgdXJpYCBpcyByZXF1aXJlZC5cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGxvYWQgc3RhdHVzXG4gICAgICovXG4gICAgYXN5bmMgY2hlY2tVcGxvYWRTdGF0dXMoY29uZmlnID0ge30pIHtcbiAgICAgICAgbGV0IGdvb2dBUElDbGllbnQgPSBgJHtnZXRSdW50aW1lVHJhY2tpbmdTdHJpbmcoKX0gZ2NjbC8ke3BhY2thZ2VKc29uLnZlcnNpb259LSR7Z2V0TW9kdWxlRm9ybWF0KCl9IGdjY2wtaW52b2NhdGlvbi1pZC8ke3RoaXMuY3VycmVudEludm9jYXRpb25JZC5jaGVja1VwbG9hZFN0YXR1c31gO1xuICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVXBsb2FkX2djY2xHY3NDbWQsIFwiZlwiKSkge1xuICAgICAgICAgICAgZ29vZ0FQSUNsaWVudCArPSBgIGdjY2wtZ2NzLWNtZC8ke19fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VwbG9hZF9nY2NsR2NzQ21kLCBcImZcIil9YDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIHVybDogdGhpcy51cmksXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogMCxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1SYW5nZSc6ICdieXRlcyAqLyonLFxuICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogZ2V0VXNlckFnZW50U3RyaW5nKCksXG4gICAgICAgICAgICAgICAgJ3gtZ29vZy1hcGktY2xpZW50JzogZ29vZ0FQSUNsaWVudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChvcHRzKTtcbiAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWxseSBnb3QgdGhlIG9mZnNldCB3ZSBjYW4gbm93IGNyZWF0ZSBhIG5ldyBvZmZzZXQgaW52b2NhdGlvbiBpZFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SW52b2NhdGlvbklkLmNoZWNrVXBsb2FkU3RhdHVzID0gdXVpZC52NCgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3A7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcucmV0cnkgPT09IGZhbHNlIHx8XG4gICAgICAgICAgICAgICAgIShlIGluc3RhbmNlb2YgRXJyb3IpIHx8XG4gICAgICAgICAgICAgICAgIXRoaXMucmV0cnlPcHRpb25zLnJldHJ5YWJsZUVycm9yRm4oZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmV0cnlEZWxheSA9IHRoaXMuZ2V0UmV0cnlEZWxheSgpO1xuICAgICAgICAgICAgaWYgKHJldHJ5RGVsYXkgPD0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXMgPT4gc2V0VGltZW91dChyZXMsIHJldHJ5RGVsYXkpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrVXBsb2FkU3RhdHVzKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0QW5kU2V0T2Zmc2V0KCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gd2Ugd2FudCB0byBoYW5kbGUgcmV0cmllcyBpbiB0aGlzIG1ldGhvZC5cbiAgICAgICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLmNoZWNrVXBsb2FkU3RhdHVzKHsgcmV0cnk6IGZhbHNlIH0pO1xuICAgICAgICAgICAgaWYgKHJlc3Auc3RhdHVzID09PSBSRVNVTUFCTEVfSU5DT01QTEVURV9TVEFUVVNfQ09ERSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzcC5oZWFkZXJzLnJhbmdlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IE51bWJlcihyZXNwLmhlYWRlcnMucmFuZ2Uuc3BsaXQoJy0nKVsxXSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zdCBlcnIgPSBlO1xuICAgICAgICAgICAgaWYgKHRoaXMucmV0cnlPcHRpb25zLnJldHJ5YWJsZUVycm9yRm4oZXJyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0ZW1wdERlbGF5ZWRSZXRyeSh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogTmFOLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBlcnIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXN0cm95KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgbWFrZVJlcXVlc3QocmVxT3B0cykge1xuICAgICAgICBpZiAodGhpcy5lbmNyeXB0aW9uKSB7XG4gICAgICAgICAgICByZXFPcHRzLmhlYWRlcnMgPSByZXFPcHRzLmhlYWRlcnMgfHwge307XG4gICAgICAgICAgICByZXFPcHRzLmhlYWRlcnNbJ3gtZ29vZy1lbmNyeXB0aW9uLWFsZ29yaXRobSddID0gJ0FFUzI1Nic7XG4gICAgICAgICAgICByZXFPcHRzLmhlYWRlcnNbJ3gtZ29vZy1lbmNyeXB0aW9uLWtleSddID0gdGhpcy5lbmNyeXB0aW9uLmtleS50b1N0cmluZygpO1xuICAgICAgICAgICAgcmVxT3B0cy5oZWFkZXJzWyd4LWdvb2ctZW5jcnlwdGlvbi1rZXktc2hhMjU2J10gPVxuICAgICAgICAgICAgICAgIHRoaXMuZW5jcnlwdGlvbi5oYXNoLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudXNlclByb2plY3QpIHtcbiAgICAgICAgICAgIHJlcU9wdHMucGFyYW1zID0gcmVxT3B0cy5wYXJhbXMgfHwge307XG4gICAgICAgICAgICByZXFPcHRzLnBhcmFtcy51c2VyUHJvamVjdCA9IHRoaXMudXNlclByb2plY3Q7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTGV0IGdheGlvcyBrbm93IHdlIHdpbGwgaGFuZGxlIGEgMzA4IGVycm9yIGNvZGUgb3Vyc2VsdmVzLlxuICAgICAgICByZXFPcHRzLnZhbGlkYXRlU3RhdHVzID0gKHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmlzU3VjY2Vzc2Z1bFJlc3BvbnNlKHN0YXR1cykgfHxcbiAgICAgICAgICAgICAgICBzdGF0dXMgPT09IFJFU1VNQUJMRV9JTkNPTVBMRVRFX1NUQVRVU19DT0RFKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tYmluZWRSZXFPcHRzID0ge1xuICAgICAgICAgICAgLi4udGhpcy5jdXN0b21SZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnJlcU9wdHMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5jdXN0b21SZXF1ZXN0T3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgIC4uLnJlcU9wdHMuaGVhZGVycyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYXV0aENsaWVudC5yZXF1ZXN0KGNvbWJpbmVkUmVxT3B0cyk7XG4gICAgICAgIGlmIChyZXMuZGF0YSAmJiByZXMuZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgcmVzLmRhdGEuZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgYXN5bmMgbWFrZVJlcXVlc3RTdHJlYW0ocmVxT3B0cykge1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICBjb25zdCBlcnJvckNhbGxiYWNrID0gKCkgPT4gY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICB0aGlzLm9uY2UoJ2Vycm9yJywgZXJyb3JDYWxsYmFjayk7XG4gICAgICAgIGlmICh0aGlzLnVzZXJQcm9qZWN0KSB7XG4gICAgICAgICAgICByZXFPcHRzLnBhcmFtcyA9IHJlcU9wdHMucGFyYW1zIHx8IHt9O1xuICAgICAgICAgICAgcmVxT3B0cy5wYXJhbXMudXNlclByb2plY3QgPSB0aGlzLnVzZXJQcm9qZWN0O1xuICAgICAgICB9XG4gICAgICAgIHJlcU9wdHMuc2lnbmFsID0gY29udHJvbGxlci5zaWduYWw7XG4gICAgICAgIHJlcU9wdHMudmFsaWRhdGVTdGF0dXMgPSAoKSA9PiB0cnVlO1xuICAgICAgICBjb25zdCBjb21iaW5lZFJlcU9wdHMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLmN1c3RvbVJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgLi4ucmVxT3B0cyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmN1c3RvbVJlcXVlc3RPcHRpb25zLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgLi4ucmVxT3B0cy5oZWFkZXJzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5hdXRoQ2xpZW50LnJlcXVlc3QoY29tYmluZWRSZXFPcHRzKTtcbiAgICAgICAgY29uc3Qgc3VjY2Vzc2Z1bFJlcXVlc3QgPSB0aGlzLm9uUmVzcG9uc2UocmVzKTtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHN1Y2Nlc3NmdWxSZXF1ZXN0ID8gcmVzIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7Ym9vbH0gaXMgdGhlIHJlcXVlc3QgZ29vZD9cbiAgICAgKi9cbiAgICBvblJlc3BvbnNlKHJlc3ApIHtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzICE9PSAyMDAgJiZcbiAgICAgICAgICAgIHRoaXMucmV0cnlPcHRpb25zLnJldHJ5YWJsZUVycm9yRm4oe1xuICAgICAgICAgICAgICAgIGNvZGU6IHJlc3Auc3RhdHVzLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3Auc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICBuYW1lOiByZXNwLnN0YXR1c1RleHQsXG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgdGhpcy5hdHRlbXB0RGVsYXllZFJldHJ5KHJlc3ApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgncmVzcG9uc2UnLCByZXNwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSByZXNwIEdheGlvc1Jlc3BvbnNlIG9iamVjdCBmcm9tIHByZXZpb3VzIGF0dGVtcHRcbiAgICAgKi9cbiAgICBhdHRlbXB0RGVsYXllZFJldHJ5KHJlc3ApIHtcbiAgICAgICAgaWYgKHRoaXMubnVtUmV0cmllcyA8IHRoaXMucmV0cnlPcHRpb25zLm1heFJldHJpZXMpIHtcbiAgICAgICAgICAgIGlmIChyZXNwLnN0YXR1cyA9PT0gTk9UX0ZPVU5EX1NUQVRVU19DT0RFICYmXG4gICAgICAgICAgICAgICAgdGhpcy5udW1DaHVua3NSZWFkSW5SZXF1ZXN0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFVwbG9hZGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmV0cnlEZWxheSA9IHRoaXMuZ2V0UmV0cnlEZWxheSgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXRyeURlbGF5IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KG5ldyBFcnJvcihgUmV0cnkgdG90YWwgdGltZSBsaW1pdCBleGNlZWRlZCAtICR7SlNPTi5zdHJpbmdpZnkocmVzcC5kYXRhKX1gKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVW5zaGlmdCB0aGUgbG9jYWwgY2FjaGUgYmFjayBpbiBjYXNlIGl0J3MgbmVlZGVkIGZvciB0aGUgbmV4dCByZXF1ZXN0LlxuICAgICAgICAgICAgICAgIHRoaXMubnVtQnl0ZXNXcml0dGVuIC09IHRoaXMubG9jYWxXcml0ZUNhY2hlQnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXBlbmRMb2NhbEJ1ZmZlclRvVXBzdHJlYW0oKTtcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBrbm93IGhvdyBtdWNoIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWQgYnkgdGhlIHNlcnZlci5cbiAgICAgICAgICAgICAgICAvLyBgY29udGludWVVcGxvYWRpbmdgIHdpbGwgcmVjaGVjayB0aGUgb2Zmc2V0IHZpYSBgZ2V0QW5kU2V0T2Zmc2V0YC5cbiAgICAgICAgICAgICAgICAvLyBJZiBgb2Zmc2V0YCA8IGBudW1iZXJCeXRlc1JlY2VpdmVkYCB0aGVuIHdlIHdpbGwgcmFpc2UgYSBSYW5nZUVycm9yXG4gICAgICAgICAgICAgICAgLy8gYXMgd2UndmUgc3RyZWFtZWQgdG9vIG11Y2ggZGF0YSB0aGF0IGhhcyBiZWVuIG1pc3NlZCAtIHRoaXMgc2hvdWxkXG4gICAgICAgICAgICAgICAgLy8gbm90IGJlIHRoZSBjYXNlIGZvciBtdWx0aS1jaHVuayB1cGxvYWRzIGFzIGBsYXN0Q2h1bmtTZW50YCBpcyB0aGVcbiAgICAgICAgICAgICAgICAvLyBib2R5IG9mIHRoZSBlbnRpcmUgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY29udGludWVVcGxvYWRpbmcuYmluZCh0aGlzKSwgcmV0cnlEZWxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm51bVJldHJpZXMrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveShuZXcgRXJyb3IoYFJldHJ5IGxpbWl0IGV4Y2VlZGVkIC0gJHtKU09OLnN0cmluZ2lmeShyZXNwLmRhdGEpfWApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gd2FpdCBiZWZvcmUgcmV0cnlpbmcgdGhlIHJlcXVlc3QsIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKiBJZiBuZWdhdGl2ZSwgZG8gbm90IHJldHJ5LlxuICAgICAqXG4gICAgICogQHJldHVybnMgdGhlIGFtb3VudCBvZiB0aW1lIHRvIHdhaXQsIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKi9cbiAgICBnZXRSZXRyeURlbGF5KCkge1xuICAgICAgICBjb25zdCByYW5kb21NcyA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwMDApO1xuICAgICAgICBjb25zdCB3YWl0VGltZSA9IE1hdGgucG93KHRoaXMucmV0cnlPcHRpb25zLnJldHJ5RGVsYXlNdWx0aXBsaWVyLCB0aGlzLm51bVJldHJpZXMpICpcbiAgICAgICAgICAgIDEwMDAgK1xuICAgICAgICAgICAgcmFuZG9tTXM7XG4gICAgICAgIGNvbnN0IG1heEFsbG93YWJsZURlbGF5TXMgPSB0aGlzLnJldHJ5T3B0aW9ucy50b3RhbFRpbWVvdXQgKiAxMDAwIC1cbiAgICAgICAgICAgIChEYXRlLm5vdygpIC0gdGhpcy50aW1lT2ZGaXJzdFJlcXVlc3QpO1xuICAgICAgICBjb25zdCBtYXhSZXRyeURlbGF5TXMgPSB0aGlzLnJldHJ5T3B0aW9ucy5tYXhSZXRyeURlbGF5ICogMTAwMDtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKHdhaXRUaW1lLCBtYXhSZXRyeURlbGF5TXMsIG1heEFsbG93YWJsZURlbGF5TXMpO1xuICAgIH1cbiAgICAvKlxuICAgICAqIFByZXBhcmUgdXNlci1kZWZpbmVkIEFQSSBlbmRwb2ludCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG91ciBBUEkuXG4gICAgICovXG4gICAgc2FuaXRpemVFbmRwb2ludCh1cmwpIHtcbiAgICAgICAgaWYgKCFQUk9UT0NPTF9SRUdFWC50ZXN0KHVybCkpIHtcbiAgICAgICAgICAgIHVybCA9IGBodHRwczovLyR7dXJsfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKC9cXC8rJC8sICcnKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBnaXZlbiBzdGF0dXMgY29kZSBpcyAyeHhcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGF0dXMgVGhlIHN0YXR1cyBjb2RlIHRvIGNoZWNrXG4gICAgICogQHJldHVybnMgaWYgdGhlIHN0YXR1cyBpcyAyeHhcbiAgICAgKi9cbiAgICBpc1N1Y2Nlc3NmdWxSZXNwb25zZShzdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICAgIH1cbn1cbl9VcGxvYWRfZ2NjbEdjc0NtZCA9IG5ldyBXZWFrTWFwKCksIF9VcGxvYWRfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX1VwbG9hZF9yZXNldExvY2FsQnVmZmVyc0NhY2hlID0gZnVuY3Rpb24gX1VwbG9hZF9yZXNldExvY2FsQnVmZmVyc0NhY2hlKCkge1xuICAgIHRoaXMubG9jYWxXcml0ZUNhY2hlID0gW107XG4gICAgdGhpcy5sb2NhbFdyaXRlQ2FjaGVCeXRlTGVuZ3RoID0gMDtcbn0sIF9VcGxvYWRfYWRkTG9jYWxCdWZmZXJDYWNoZSA9IGZ1bmN0aW9uIF9VcGxvYWRfYWRkTG9jYWxCdWZmZXJDYWNoZShidWYpIHtcbiAgICB0aGlzLmxvY2FsV3JpdGVDYWNoZS5wdXNoKGJ1Zik7XG4gICAgdGhpcy5sb2NhbFdyaXRlQ2FjaGVCeXRlTGVuZ3RoICs9IGJ1Zi5ieXRlTGVuZ3RoO1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWQoY2ZnKSB7XG4gICAgcmV0dXJuIG5ldyBVcGxvYWQoY2ZnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVUkkoY2ZnLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHVwID0gbmV3IFVwbG9hZChjZmcpO1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHVwLmNyZWF0ZVVSSSgpO1xuICAgIH1cbiAgICB1cC5jcmVhdGVVUkkoKS50aGVuKHIgPT4gY2FsbGJhY2sobnVsbCwgciksIGNhbGxiYWNrKTtcbn1cbi8qKlxuICogQ2hlY2sgdGhlIHN0YXR1cyBvZiBhbiBleGlzdGluZyByZXN1bWFibGUgdXBsb2FkLlxuICpcbiAqIEBwYXJhbSBjZmcgQSBjb25maWd1cmF0aW9uIHRvIHVzZS4gYHVyaWAgaXMgcmVxdWlyZWQuXG4gKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGxvYWQgc3RhdHVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1VwbG9hZFN0YXR1cyhjZmcpIHtcbiAgICBjb25zdCB1cCA9IG5ldyBVcGxvYWQoY2ZnKTtcbiAgICByZXR1cm4gdXAuY2hlY2tVcGxvYWRTdGF0dXMoKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/resumable-upload.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/signer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/signer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PATH_STYLED_HOST: () => (/* binding */ PATH_STYLED_HOST),\n/* harmony export */   SignerExceptionMessages: () => (/* binding */ SignerExceptionMessages),\n/* harmony export */   SigningError: () => (/* binding */ SigningError),\n/* harmony export */   URLSigner: () => (/* binding */ URLSigner)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\nvar SignerExceptionMessages;\n(function (SignerExceptionMessages) {\n    SignerExceptionMessages[\"ACCESSIBLE_DATE_INVALID\"] = \"The accessible at date provided was invalid.\";\n    SignerExceptionMessages[\"EXPIRATION_BEFORE_ACCESSIBLE_DATE\"] = \"An expiration date cannot be before accessible date.\";\n    SignerExceptionMessages[\"X_GOOG_CONTENT_SHA256\"] = \"The header X-Goog-Content-SHA256 must be a hexadecimal string.\";\n})(SignerExceptionMessages || (SignerExceptionMessages = {}));\n/*\n * Default signing version for getSignedUrl is 'v2'.\n */\nconst DEFAULT_SIGNING_VERSION = 'v2';\nconst SEVEN_DAYS = 7 * 24 * 60 * 60;\n/**\n * @const {string}\n * @deprecated - unused\n */\nconst PATH_STYLED_HOST = 'https://storage.googleapis.com';\nclass URLSigner {\n    constructor(auth, bucket, file, \n    /**\n     * A {@link Storage} object.\n     *\n     * @privateRemarks\n     *\n     * Technically this is a required field, however it would be a breaking change to\n     * move it before optional properties. In the next major we should refactor the\n     * constructor of this class to only accept a config object.\n     */\n    storage = new _storage_js__WEBPACK_IMPORTED_MODULE_2__.Storage()) {\n        this.auth = auth;\n        this.bucket = bucket;\n        this.file = file;\n        this.storage = storage;\n    }\n    getSignedUrl(cfg) {\n        const expiresInSeconds = this.parseExpires(cfg.expires);\n        const method = cfg.method;\n        const accessibleAtInSeconds = this.parseAccessibleAt(cfg.accessibleAt);\n        if (expiresInSeconds < accessibleAtInSeconds) {\n            throw new Error(SignerExceptionMessages.EXPIRATION_BEFORE_ACCESSIBLE_DATE);\n        }\n        let customHost;\n        // Default style is `path`.\n        const isVirtualHostedStyle = cfg.virtualHostedStyle || false;\n        if (cfg.cname) {\n            customHost = cfg.cname;\n        }\n        else if (isVirtualHostedStyle) {\n            customHost = `https://${this.bucket.name}.storage.${this.storage.universeDomain}`;\n        }\n        const secondsToMilliseconds = 1000;\n        const config = Object.assign({}, cfg, {\n            method,\n            expiration: expiresInSeconds,\n            accessibleAt: new Date(secondsToMilliseconds * accessibleAtInSeconds),\n            bucket: this.bucket.name,\n            file: this.file ? (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.encodeURI)(this.file.name, false) : undefined,\n        });\n        if (customHost) {\n            config.cname = customHost;\n        }\n        const version = cfg.version || DEFAULT_SIGNING_VERSION;\n        let promise;\n        if (version === 'v2') {\n            promise = this.getSignedUrlV2(config);\n        }\n        else if (version === 'v4') {\n            promise = this.getSignedUrlV4(config);\n        }\n        else {\n            throw new Error(`Invalid signed URL version: ${version}. Supported versions are 'v2' and 'v4'.`);\n        }\n        return promise.then(query => {\n            var _a;\n            query = Object.assign(query, cfg.queryParams);\n            const signedUrl = new url__WEBPACK_IMPORTED_MODULE_1__.URL(((_a = cfg.host) === null || _a === void 0 ? void 0 : _a.toString()) || config.cname || this.storage.apiEndpoint);\n            signedUrl.pathname = this.getResourcePath(!!config.cname, this.bucket.name, config.file);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            signedUrl.search = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.qsStringify)(query);\n            return signedUrl.href;\n        });\n    }\n    getSignedUrlV2(config) {\n        const canonicalHeadersString = this.getCanonicalHeaders(config.extensionHeaders || {});\n        const resourcePath = this.getResourcePath(false, config.bucket, config.file);\n        const blobToSign = [\n            config.method,\n            config.contentMd5 || '',\n            config.contentType || '',\n            config.expiration,\n            canonicalHeadersString + resourcePath,\n        ].join('\\n');\n        const sign = async () => {\n            var _a;\n            const auth = this.auth;\n            try {\n                const signature = await auth.sign(blobToSign, (_a = config.signingEndpoint) === null || _a === void 0 ? void 0 : _a.toString());\n                const credentials = await auth.getCredentials();\n                return {\n                    GoogleAccessId: credentials.client_email,\n                    Expires: config.expiration,\n                    Signature: signature,\n                };\n            }\n            catch (err) {\n                const error = err;\n                const signingErr = new SigningError(error.message);\n                signingErr.stack = error.stack;\n                throw signingErr;\n            }\n        };\n        return sign();\n    }\n    getSignedUrlV4(config) {\n        var _a;\n        config.accessibleAt = config.accessibleAt\n            ? config.accessibleAt\n            : new Date();\n        const millisecondsToSeconds = 1.0 / 1000.0;\n        const expiresPeriodInSeconds = config.expiration - config.accessibleAt.valueOf() * millisecondsToSeconds;\n        // v4 limit expiration to be 7 days maximum\n        if (expiresPeriodInSeconds > SEVEN_DAYS) {\n            throw new Error(`Max allowed expiration is seven days (${SEVEN_DAYS} seconds).`);\n        }\n        const extensionHeaders = Object.assign({}, config.extensionHeaders);\n        const fqdn = new url__WEBPACK_IMPORTED_MODULE_1__.URL(((_a = config.host) === null || _a === void 0 ? void 0 : _a.toString()) || config.cname || this.storage.apiEndpoint);\n        extensionHeaders.host = fqdn.hostname;\n        if (config.contentMd5) {\n            extensionHeaders['content-md5'] = config.contentMd5;\n        }\n        if (config.contentType) {\n            extensionHeaders['content-type'] = config.contentType;\n        }\n        let contentSha256;\n        const sha256Header = extensionHeaders['x-goog-content-sha256'];\n        if (sha256Header) {\n            if (typeof sha256Header !== 'string' ||\n                !/[A-Fa-f0-9]{40}/.test(sha256Header)) {\n                throw new Error(SignerExceptionMessages.X_GOOG_CONTENT_SHA256);\n            }\n            contentSha256 = sha256Header;\n        }\n        const signedHeaders = Object.keys(extensionHeaders)\n            .map(header => header.toLowerCase())\n            .sort()\n            .join(';');\n        const extensionHeadersString = this.getCanonicalHeaders(extensionHeaders);\n        const datestamp = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.formatAsUTCISO)(config.accessibleAt);\n        const credentialScope = `${datestamp}/auto/storage/goog4_request`;\n        const sign = async () => {\n            var _a;\n            const credentials = await this.auth.getCredentials();\n            const credential = `${credentials.client_email}/${credentialScope}`;\n            const dateISO = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.formatAsUTCISO)(config.accessibleAt ? config.accessibleAt : new Date(), true);\n            const queryParams = {\n                'X-Goog-Algorithm': 'GOOG4-RSA-SHA256',\n                'X-Goog-Credential': credential,\n                'X-Goog-Date': dateISO,\n                'X-Goog-Expires': expiresPeriodInSeconds.toString(10),\n                'X-Goog-SignedHeaders': signedHeaders,\n                ...(config.queryParams || {}),\n            };\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const canonicalQueryParams = this.getCanonicalQueryParams(queryParams);\n            const canonicalRequest = this.getCanonicalRequest(config.method, this.getResourcePath(!!config.cname, config.bucket, config.file), canonicalQueryParams, extensionHeadersString, signedHeaders, contentSha256);\n            const hash = crypto__WEBPACK_IMPORTED_MODULE_0__.createHash('sha256')\n                .update(canonicalRequest)\n                .digest('hex');\n            const blobToSign = [\n                'GOOG4-RSA-SHA256',\n                dateISO,\n                credentialScope,\n                hash,\n            ].join('\\n');\n            try {\n                const signature = await this.auth.sign(blobToSign, (_a = config.signingEndpoint) === null || _a === void 0 ? void 0 : _a.toString());\n                const signatureHex = Buffer.from(signature, 'base64').toString('hex');\n                const signedQuery = Object.assign({}, queryParams, {\n                    'X-Goog-Signature': signatureHex,\n                });\n                return signedQuery;\n            }\n            catch (err) {\n                const error = err;\n                const signingErr = new SigningError(error.message);\n                signingErr.stack = error.stack;\n                throw signingErr;\n            }\n        };\n        return sign();\n    }\n    /**\n     * Create canonical headers for signing v4 url.\n     *\n     * The canonical headers for v4-signing a request demands header names are\n     * first lowercased, followed by sorting the header names.\n     * Then, construct the canonical headers part of the request:\n     *  <lowercasedHeaderName> + \":\" + Trim(<value>) + \"\\n\"\n     *  ..\n     *  <lowercasedHeaderName> + \":\" + Trim(<value>) + \"\\n\"\n     *\n     * @param headers\n     * @private\n     */\n    getCanonicalHeaders(headers) {\n        // Sort headers by their lowercased names\n        const sortedHeaders = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.objectEntries)(headers)\n            // Convert header names to lowercase\n            .map(([headerName, value]) => [\n            headerName.toLowerCase(),\n            value,\n        ])\n            .sort((a, b) => a[0].localeCompare(b[0]));\n        return sortedHeaders\n            .filter(([, value]) => value !== undefined)\n            .map(([headerName, value]) => {\n            // - Convert Array (multi-valued header) into string, delimited by\n            //      ',' (no space).\n            // - Trim leading and trailing spaces.\n            // - Convert sequential (2+) spaces into a single space\n            const canonicalValue = `${value}`.trim().replace(/\\s{2,}/g, ' ');\n            return `${headerName}:${canonicalValue}\\n`;\n        })\n            .join('');\n    }\n    getCanonicalRequest(method, path, query, headers, signedHeaders, contentSha256) {\n        return [\n            method,\n            path,\n            query,\n            headers,\n            signedHeaders,\n            contentSha256 || 'UNSIGNED-PAYLOAD',\n        ].join('\\n');\n    }\n    getCanonicalQueryParams(query) {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.objectEntries)(query)\n            .map(([key, value]) => [(0,_util_js__WEBPACK_IMPORTED_MODULE_3__.encodeURI)(key, true), (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.encodeURI)(value, true)])\n            .sort((a, b) => (a[0] < b[0] ? -1 : 1))\n            .map(([key, value]) => `${key}=${value}`)\n            .join('&');\n    }\n    getResourcePath(cname, bucket, file) {\n        if (cname) {\n            return '/' + (file || '');\n        }\n        else if (file) {\n            return `/${bucket}/${file}`;\n        }\n        else {\n            return `/${bucket}`;\n        }\n    }\n    parseExpires(expires, current = new Date()) {\n        const expiresInMSeconds = new Date(expires).valueOf();\n        if (isNaN(expiresInMSeconds)) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_2__.ExceptionMessages.EXPIRATION_DATE_INVALID);\n        }\n        if (expiresInMSeconds < current.valueOf()) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_2__.ExceptionMessages.EXPIRATION_DATE_PAST);\n        }\n        return Math.floor(expiresInMSeconds / 1000); // The API expects seconds.\n    }\n    parseAccessibleAt(accessibleAt) {\n        const accessibleAtInMSeconds = new Date(accessibleAt || new Date()).valueOf();\n        if (isNaN(accessibleAtInMSeconds)) {\n            throw new Error(SignerExceptionMessages.ACCESSIBLE_DATE_INVALID);\n        }\n        return Math.floor(accessibleAtInMSeconds / 1000); // The API expects seconds.\n    }\n}\n/**\n * Custom error type for errors related to getting signed errors and policies.\n *\n * @private\n */\nclass SigningError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'SigningError';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/signer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/storage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_RETRY_DEFAULT: () => (/* binding */ AUTO_RETRY_DEFAULT),\n/* harmony export */   ExceptionMessages: () => (/* binding */ ExceptionMessages),\n/* harmony export */   IdempotencyStrategy: () => (/* binding */ IdempotencyStrategy),\n/* harmony export */   MAX_RETRY_DEFAULT: () => (/* binding */ MAX_RETRY_DEFAULT),\n/* harmony export */   MAX_RETRY_DELAY_DEFAULT: () => (/* binding */ MAX_RETRY_DELAY_DEFAULT),\n/* harmony export */   PROTOCOL_REGEX: () => (/* binding */ PROTOCOL_REGEX),\n/* harmony export */   RETRYABLE_ERR_FN_DEFAULT: () => (/* binding */ RETRYABLE_ERR_FN_DEFAULT),\n/* harmony export */   RETRY_DELAY_MULTIPLIER_DEFAULT: () => (/* binding */ RETRY_DELAY_MULTIPLIER_DEFAULT),\n/* harmony export */   Storage: () => (/* binding */ Storage),\n/* harmony export */   StorageExceptionMessages: () => (/* binding */ StorageExceptionMessages),\n/* harmony export */   TOTAL_TIMEOUT_DEFAULT: () => (/* binding */ TOTAL_TIMEOUT_DEFAULT)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/paginator */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var _bucket_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bucket.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js\");\n/* harmony import */ var _channel_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./channel.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/channel.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n/* harmony import */ var _hmacKey_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hmacKey.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\n\n\n\nvar IdempotencyStrategy;\n(function (IdempotencyStrategy) {\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryAlways\"] = 0] = \"RetryAlways\";\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryConditional\"] = 1] = \"RetryConditional\";\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryNever\"] = 2] = \"RetryNever\";\n})(IdempotencyStrategy || (IdempotencyStrategy = {}));\nvar ExceptionMessages;\n(function (ExceptionMessages) {\n    ExceptionMessages[\"EXPIRATION_DATE_INVALID\"] = \"The expiration date provided was invalid.\";\n    ExceptionMessages[\"EXPIRATION_DATE_PAST\"] = \"An expiration date cannot be in the past.\";\n})(ExceptionMessages || (ExceptionMessages = {}));\nvar StorageExceptionMessages;\n(function (StorageExceptionMessages) {\n    StorageExceptionMessages[\"BUCKET_NAME_REQUIRED\"] = \"A bucket name is needed to use Cloud Storage.\";\n    StorageExceptionMessages[\"BUCKET_NAME_REQUIRED_CREATE\"] = \"A name is required to create a bucket.\";\n    StorageExceptionMessages[\"HMAC_SERVICE_ACCOUNT\"] = \"The first argument must be a service account email to create an HMAC key.\";\n    StorageExceptionMessages[\"HMAC_ACCESS_ID\"] = \"An access ID is needed to create an HmacKey object.\";\n})(StorageExceptionMessages || (StorageExceptionMessages = {}));\nconst PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n */\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n */\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Default behavior: Wait twice as long as previous retry before retrying.\n *\n * @const {number}\n */\nconst RETRY_DELAY_MULTIPLIER_DEFAULT = 2;\n/**\n * Default behavior: If the operation doesn't succeed after 600 seconds,\n *  stop retrying.\n *\n * @const {number}\n */\nconst TOTAL_TIMEOUT_DEFAULT = 600;\n/**\n * Default behavior: Wait no more than 64 seconds between retries.\n *\n * @const {number}\n */\nconst MAX_RETRY_DELAY_DEFAULT = 64;\n/**\n * Default behavior: Retry conditionally idempotent operations if correct preconditions are set.\n *\n * @const {enum}\n * @private\n */\nconst IDEMPOTENCY_STRATEGY_DEFAULT = IdempotencyStrategy.RetryConditional;\n/**\n * Returns true if the API request should be retried, given the error that was\n * given the first time the request was attempted.\n * @const\n * @param {error} err - The API error to check if it is appropriate to retry.\n * @return {boolean} True if the API request should be retried, false otherwise.\n */\nconst RETRYABLE_ERR_FN_DEFAULT = function (err) {\n    var _a;\n    const isConnectionProblem = (reason) => {\n        return (reason.includes('eai_again') || // DNS lookup error\n            reason === 'econnreset' ||\n            reason === 'unexpected connection closure' ||\n            reason === 'epipe' ||\n            reason === 'socket connection timeout');\n    };\n    if (err) {\n        if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n            return true;\n        }\n        if (typeof err.code === 'string') {\n            if (['408', '429', '500', '502', '503', '504'].indexOf(err.code) !== -1) {\n                return true;\n            }\n            const reason = err.code.toLowerCase();\n            if (isConnectionProblem(reason)) {\n                return true;\n            }\n        }\n        if (err.errors) {\n            for (const e of err.errors) {\n                const reason = (_a = e === null || e === void 0 ? void 0 : e.reason) === null || _a === void 0 ? void 0 : _a.toString().toLowerCase();\n                if (reason && isConnectionProblem(reason)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n};\n/*! Developer Documentation\n *\n * Invoke this method to create a new Storage object bound with pre-determined\n * configuration options. For each object that can be created (e.g., a bucket),\n * there is an equivalent static and instance method. While they are classes,\n * they can be instantiated without use of the `new` keyword.\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * This object provides constants to refer to the three permission levels that\n * can be granted to an entity:\n *\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/lists| About Access Control Lists}\n *\n * @name Storage#acl\n * @type {object}\n * @property {string} OWNER_ROLE\n * @property {string} READER_ROLE\n * @property {string} WRITER_ROLE\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const albums = storage.bucket('albums');\n *\n * //-\n * // Make all of the files currently in a bucket publicly readable.\n * //-\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * albums.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // Make any new objects added to a bucket publicly readable.\n * //-\n * albums.acl.default.add(options, function(err, aclObject) {});\n *\n * //-\n * // Grant a user ownership permissions to a bucket.\n * //-\n * albums.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: storage.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * albums.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n * ```\n */\n/**\n * Get {@link Bucket} objects for all of the buckets in your project as\n * a readable object stream.\n *\n * @method Storage#getBucketsStream\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\n *     instances.\n *\n * @example\n * ```\n * storage.getBucketsStream()\n *   .on('error', console.error)\n *   .on('data', function(bucket) {\n *     // bucket is a Bucket object.\n *   })\n *   .on('end', function() {\n *     // All buckets retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getBucketsStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n * ```\n */\n/**\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\n * readable object stream.\n *\n * @method Storage#getHmacKeysStream\n * @param {GetHmacKeysOptions} [options] Configuration options.\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\n *     instances.\n *\n * @example\n * ```\n * storage.getHmacKeysStream()\n *   .on('error', console.error)\n *   .on('data', function(hmacKey) {\n *     // hmacKey is an HmacKey object.\n *   })\n *   .on('end', function() {\n *     // All HmacKey retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getHmacKeysStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n * ```\n */\n/**\n * <h4>ACLs</h4>\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share files with other users\n * and allow other users to access your buckets and files.\n *\n * To learn more about ACLs, read this overview on\n * {@link https://cloud.google.com/storage/docs/access-control| Access Control}.\n *\n * See {@link https://cloud.google.com/storage/docs/overview| Cloud Storage overview}\n * See {@link https://cloud.google.com/storage/docs/access-control| Access Control}\n *\n * @class\n */\nclass Storage extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Service {\n    getBucketsStream() {\n        // placeholder body, overwritten in constructor\n        return new stream__WEBPACK_IMPORTED_MODULE_3__.Readable();\n    }\n    getHmacKeysStream() {\n        // placeholder body, overwritten in constructor\n        return new stream__WEBPACK_IMPORTED_MODULE_3__.Readable();\n    }\n    /**\n     * @callback Crc32cGeneratorToStringCallback\n     * A method returning the CRC32C as a base64-encoded string.\n     *\n     * @returns {string}\n     *\n     * @example\n     * Hashing the string 'data' should return 'rth90Q=='\n     *\n     * ```js\n     * const buffer = Buffer.from('data');\n     * crc32c.update(buffer);\n     * crc32c.toString(); // 'rth90Q=='\n     * ```\n     **/\n    /**\n     * @callback Crc32cGeneratorValidateCallback\n     * A method validating a base64-encoded CRC32C string.\n     *\n     * @param {string} [value] base64-encoded CRC32C string to validate\n     * @returns {boolean}\n     *\n     * @example\n     * Should return `true` if the value matches, `false` otherwise\n     *\n     * ```js\n     * const buffer = Buffer.from('data');\n     * crc32c.update(buffer);\n     * crc32c.validate('DkjKuA=='); // false\n     * crc32c.validate('rth90Q=='); // true\n     * ```\n     **/\n    /**\n     * @callback Crc32cGeneratorUpdateCallback\n     * A method for passing `Buffer`s for CRC32C generation.\n     *\n     * @param {Buffer} [data] data to update CRC32C value with\n     * @returns {undefined}\n     *\n     * @example\n     * Hashing buffers from 'some ' and 'text\\n'\n     *\n     * ```js\n     * const buffer1 = Buffer.from('some ');\n     * crc32c.update(buffer1);\n     *\n     * const buffer2 = Buffer.from('text\\n');\n     * crc32c.update(buffer2);\n     *\n     * crc32c.toString(); // 'DkjKuA=='\n     * ```\n     **/\n    /**\n     * @typedef {object} CRC32CValidator\n     * @property {Crc32cGeneratorToStringCallback}\n     * @property {Crc32cGeneratorValidateCallback}\n     * @property {Crc32cGeneratorUpdateCallback}\n     */\n    /**\n     * @callback Crc32cGeneratorCallback\n     * @returns {CRC32CValidator}\n     */\n    /**\n     * @typedef {object} StorageOptions\n     * @property {string} [projectId] The project ID from the Google Developer's\n     *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n     *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\n     * in an environment which supports {@link\n     * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n     * Application Default Credentials}, your project ID will be detected\n     * automatically.\n     * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n     *     downloaded from the Google Developers Console. If you provide a path to\n     * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n     *     .p12 require you to specify the `email` option as well.\n     * @property {string} [email] Account email address. Required when using a .pem\n     *     or .p12 keyFilename.\n     * @property {object} [credentials] Credentials object.\n     * @property {string} [credentials.client_email]\n     * @property {string} [credentials.private_key]\n     * @property {object} [retryOptions] Options for customizing retries. Retriable server errors\n     *     will be retried with exponential delay between them dictated by the formula\n     *     max(maxRetryDelay, retryDelayMultiplier*retryNumber) until maxRetries or totalTimeout\n     *     has been reached. Retries will only happen if autoRetry is set to true.\n     * @property {boolean} [retryOptions.autoRetry=true] Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * @property {number} [retryOptions.retryDelayMultiplier = 2] the multiplier by which to\n     *   increase the delay time between the completion of failed requests, and the\n     *   initiation of the subsequent retrying request.\n     * @property {number} [retryOptions.totalTimeout = 600] The total time, starting from\n     *  when the initial request is sent, after which an error will\n     *   be returned, regardless of the retrying attempts made meanwhile.\n     * @property {number} [retryOptions.maxRetryDelay = 64] The maximum delay time between requests.\n     *   When this value is reached, ``retryDelayMultiplier`` will no longer be used to\n     *   increase delay time.\n     * @property {number} [retryOptions.maxRetries=3] Maximum number of automatic retries\n     *     attempted before returning the error.\n     * @property {function} [retryOptions.retryableErrorFn] Function that returns true if a given\n     *     error should be retried and false otherwise.\n     * @property {enum} [retryOptions.idempotencyStrategy=IdempotencyStrategy.RetryConditional] Enumeration\n     *     controls how conditionally idempotent operations are retried. Possible values are: RetryAlways -\n     *     will respect other retry settings and attempt to retry conditionally idempotent operations. RetryConditional -\n     *     will retry conditionally idempotent operations if the correct preconditions are set. RetryNever - never\n     *     retry a conditionally idempotent operation.\n     * @property {string} [userAgent] The value to be prepended to the User-Agent\n     *     header in API requests.\n     * @property {object} [authClient] `AuthClient` or `GoogleAuth` client to reuse instead of creating a new one.\n     * @property {number} [timeout] The amount of time in milliseconds to wait per http request before timing out.\n     * @property {object[]} [interceptors_] Array of custom request interceptors to be returned in the order they were assigned.\n     * @property {string} [apiEndpoint = storage.google.com] The API endpoint of the service used to make requests.\n     * @property {boolean} [useAuthWithCustomEndpoint = false] Controls whether or not to use authentication when using a custom endpoint.\n     * @property {Crc32cGeneratorCallback} [callback] A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\n     */\n    /**\n     * Constructs the Storage client.\n     *\n     * @example\n     * Create a client that uses Application Default Credentials\n     * (ADC)\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * ```\n     *\n     * @example\n     * Create a client with explicit credentials\n     * ```\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   keyFilename: '/path/to/keyfile.json'\n     * });\n     * ```\n     *\n     * @example\n     * Create a client with credentials passed\n     * by value as a JavaScript object\n     * ```\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   credentials: {\n     *     type: 'service_account',\n     *     project_id: 'xxxxxxx',\n     *     private_key_id: 'xxxx',\n     *     private_key:'-----BEGIN PRIVATE KEY-----xxxxxxx\\n-----END PRIVATE KEY-----\\n',\n     *     client_email: 'xxxx',\n     *     client_id: 'xxx',\n     *     auth_uri: 'https://accounts.google.com/o/oauth2/auth',\n     *     token_uri: 'https://oauth2.googleapis.com/token',\n     *     auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',\n     *     client_x509_cert_url: 'xxx',\n     *     }\n     * });\n     * ```\n     *\n     * @example\n     * Create a client with credentials passed\n     * by loading a JSON file directly from disk\n     * ```\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   credentials: require('/path/to-keyfile.json')\n     * });\n     * ```\n     *\n     * @example\n     * Create a client with an `AuthClient` (e.g. `DownscopedClient`)\n     * ```\n     * const {DownscopedClient} = require('google-auth-library');\n     * const authClient = new DownscopedClient({...});\n     *\n     * const storage = new Storage({authClient});\n     * ```\n     *\n     * Additional samples:\n     * - https://github.com/googleapis/google-auth-library-nodejs#sample-usage-1\n     * - https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/downscopedclient.js\n     *\n     * @param {StorageOptions} [options] Configuration options.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n        const universe = options.universeDomain || google_auth_library__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_UNIVERSE;\n        let apiEndpoint = `https://storage.${universe}`;\n        let customEndpoint = false;\n        // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n        const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\n        if (typeof EMULATOR_HOST === 'string') {\n            apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\n            customEndpoint = true;\n        }\n        if (options.apiEndpoint && options.apiEndpoint !== apiEndpoint) {\n            apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\n            customEndpoint = true;\n        }\n        options = Object.assign({}, options, { apiEndpoint });\n        // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n        const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\n        const config = {\n            apiEndpoint: options.apiEndpoint,\n            retryOptions: {\n                autoRetry: ((_a = options.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined\n                    ? (_b = options.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry\n                    : AUTO_RETRY_DEFAULT,\n                maxRetries: ((_c = options.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetries)\n                    ? (_d = options.retryOptions) === null || _d === void 0 ? void 0 : _d.maxRetries\n                    : MAX_RETRY_DEFAULT,\n                retryDelayMultiplier: ((_e = options.retryOptions) === null || _e === void 0 ? void 0 : _e.retryDelayMultiplier)\n                    ? (_f = options.retryOptions) === null || _f === void 0 ? void 0 : _f.retryDelayMultiplier\n                    : RETRY_DELAY_MULTIPLIER_DEFAULT,\n                totalTimeout: ((_g = options.retryOptions) === null || _g === void 0 ? void 0 : _g.totalTimeout)\n                    ? (_h = options.retryOptions) === null || _h === void 0 ? void 0 : _h.totalTimeout\n                    : TOTAL_TIMEOUT_DEFAULT,\n                maxRetryDelay: ((_j = options.retryOptions) === null || _j === void 0 ? void 0 : _j.maxRetryDelay)\n                    ? (_k = options.retryOptions) === null || _k === void 0 ? void 0 : _k.maxRetryDelay\n                    : MAX_RETRY_DELAY_DEFAULT,\n                retryableErrorFn: ((_l = options.retryOptions) === null || _l === void 0 ? void 0 : _l.retryableErrorFn)\n                    ? (_m = options.retryOptions) === null || _m === void 0 ? void 0 : _m.retryableErrorFn\n                    : RETRYABLE_ERR_FN_DEFAULT,\n                idempotencyStrategy: ((_o = options.retryOptions) === null || _o === void 0 ? void 0 : _o.idempotencyStrategy) !== undefined\n                    ? (_p = options.retryOptions) === null || _p === void 0 ? void 0 : _p.idempotencyStrategy\n                    : IDEMPOTENCY_STRATEGY_DEFAULT,\n            },\n            baseUrl,\n            customEndpoint,\n            useAuthWithCustomEndpoint: options === null || options === void 0 ? void 0 : options.useAuthWithCustomEndpoint,\n            projectIdRequired: false,\n            scopes: [\n                'https://www.googleapis.com/auth/iam',\n                'https://www.googleapis.com/auth/cloud-platform',\n                'https://www.googleapis.com/auth/devstorage.full_control',\n            ],\n            packageJson: (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_8__.getPackageJSON)(),\n        };\n        super(config, options);\n        /**\n         * Reference to {@link Storage.acl}.\n         *\n         * @name Storage#acl\n         * @see Storage.acl\n         */\n        this.acl = Storage.acl;\n        this.crc32cGenerator =\n            options.crc32cGenerator || _crc32c_js__WEBPACK_IMPORTED_MODULE_10__.CRC32C_DEFAULT_VALIDATOR_GENERATOR;\n        this.retryOptions = config.retryOptions;\n        this.getBucketsStream = _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.streamify('getBuckets');\n        this.getHmacKeysStream = _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.streamify('getHmacKeys');\n    }\n    static sanitizeEndpoint(url) {\n        if (!PROTOCOL_REGEX.test(url)) {\n            url = `https://${url}`;\n        }\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\n    }\n    /**\n     * Get a reference to a Cloud Storage bucket.\n     *\n     * @param {string} name Name of the bucket.\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\n     *     encrypt objects inserted into this bucket, if no encryption method is\n     *     specified.\n     * @param {string} [options.userProject] User project to be billed for all\n     *     requests made from this Bucket object.\n     * @returns {Bucket}\n     * @see Bucket\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const albums = storage.bucket('albums');\n     * const photos = storage.bucket('photos');\n     * ```\n     */\n    bucket(name, options) {\n        if (!name) {\n            throw new Error(StorageExceptionMessages.BUCKET_NAME_REQUIRED);\n        }\n        return new _bucket_js__WEBPACK_IMPORTED_MODULE_4__.Bucket(this, name, options);\n    }\n    /**\n     * Reference a channel to receive notifications about changes to your bucket.\n     *\n     * @param {string} id The ID of the channel.\n     * @param {string} resourceId The resource ID of the channel.\n     * @returns {Channel}\n     * @see Channel\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const channel = storage.channel('id', 'resource-id');\n     * ```\n     */\n    channel(id, resourceId) {\n        return new _channel_js__WEBPACK_IMPORTED_MODULE_5__.Channel(this, id, resourceId);\n    }\n    /**\n     * @typedef {array} CreateBucketResponse\n     * @property {Bucket} 0 The new {@link Bucket}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateBucketCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket} bucket The new {@link Bucket}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Metadata to set for the bucket.\n     *\n     * @typedef {object} CreateBucketRequest\n     * @property {boolean} [archive=false] Specify the storage class as Archive.\n     * @property {object} [autoclass.enabled=false] Specify whether Autoclass is\n     *     enabled for the bucket.\n     * @property {object} [autoclass.terminalStorageClass='NEARLINE'] The storage class that objects in an Autoclass bucket eventually transition to if\n     *     they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE.\n     * @property {boolean} [coldline=false] Specify the storage class as Coldline.\n     * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\n     * @property {CustomPlacementConfig} [customPlacementConfig={}] Specify the bucket's regions for dual-region buckets.\n     *     For more information, see {@link https://cloud.google.com/storage/docs/locations| Bucket Locations}.\n     * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\n     *     Availability.\n     * @property {boolean} [enableObjectRetention=false] Specifiy whether or not object retention should be enabled on this bucket.\n     * @property {object} [hierarchicalNamespace.enabled=false] Specify whether or not to enable hierarchical namespace on this bucket.\n     * @property {string} [location] Specify the bucket's location. If specifying\n     *     a dual-region, the `customPlacementConfig` property should be set in conjunction.\n     *     For more information, see {@link https://cloud.google.com/storage/docs/locations| Bucket Locations}.\n     * @property {boolean} [multiRegional=false] Specify the storage class as\n     *     Multi-Regional.\n     * @property {boolean} [nearline=false] Specify the storage class as Nearline.\n     * @property {boolean} [regional=false] Specify the storage class as Regional.\n     * @property {boolean} [requesterPays=false] Force the use of the User Project metadata field to assign operational\n     *     costs when an operation is made on a Bucket and its objects.\n     * @property {string} [rpo] For dual-region buckets, controls whether turbo\n     *      replication is enabled (`ASYNC_TURBO`) or disabled (`DEFAULT`).\n     * @property {boolean} [standard=true] Specify the storage class as Standard.\n     * @property {string} [storageClass] The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @property {Versioning} [versioning=undefined] Specify the versioning status.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n    /**\n     * Create a bucket.\n     *\n     * Cloud Storage uses a flat namespace, so you can't create a bucket with\n     * a name that is already in use. For more information, see\n     * {@link https://cloud.google.com/storage/docs/bucketnaming.html#requirements| Bucket Naming Guidelines}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert| Buckets: insert API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n     *\n     * @param {string} name Name of the bucket to create.\n     * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n     * @param {CreateBucketCallback} [callback] Callback function.\n     * @returns {Promise<CreateBucketResponse>}\n     * @throws {Error} If a name is not provided.\n     * @see Bucket#create\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const callback = function(err, bucket, apiResponse) {\n     *   // `bucket` is a Bucket object.\n     * };\n     *\n     * storage.createBucket('new-bucket', callback);\n     *\n     * //-\n     * // Create a bucket in a specific location and region. <em>See the <a\n     * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\n     * // Official JSON API docs</a> for complete details on the `location`\n     * option.\n     * // </em>\n     * //-\n     * const metadata = {\n     *   location: 'US-CENTRAL1',\n     *   regional: true\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Create a bucket with a retention policy of 6 months.\n     * //-\n     * const metadata = {\n     *   retentionPolicy: {\n     *     retentionPeriod: 15780000 // 6 months in seconds.\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Enable versioning on a new bucket.\n     * //-\n     * const metadata = {\n     *   versioning: {\n     *     enabled: true\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createBucket('new-bucket').then(function(data) {\n     *   const bucket = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_create_bucket\n     * Another example:\n     */\n    createBucket(name, metadataOrCallback, callback) {\n        if (!name) {\n            throw new Error(StorageExceptionMessages.BUCKET_NAME_REQUIRED_CREATE);\n        }\n        let metadata;\n        if (!callback) {\n            callback = metadataOrCallback;\n            metadata = {};\n        }\n        else {\n            metadata = metadataOrCallback;\n        }\n        const body = {\n            ...metadata,\n            name,\n        };\n        const storageClasses = {\n            archive: 'ARCHIVE',\n            coldline: 'COLDLINE',\n            dra: 'DURABLE_REDUCED_AVAILABILITY',\n            multiRegional: 'MULTI_REGIONAL',\n            nearline: 'NEARLINE',\n            regional: 'REGIONAL',\n            standard: 'STANDARD',\n        };\n        const storageClassKeys = Object.keys(storageClasses);\n        for (const storageClass of storageClassKeys) {\n            if (body[storageClass]) {\n                if (metadata.storageClass && metadata.storageClass !== storageClass) {\n                    throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\n                }\n                body.storageClass = storageClasses[storageClass];\n                delete body[storageClass];\n            }\n        }\n        if (body.requesterPays) {\n            body.billing = {\n                requesterPays: body.requesterPays,\n            };\n            delete body.requesterPays;\n        }\n        const query = {\n            project: this.projectId,\n        };\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        if (body.enableObjectRetention) {\n            query.enableObjectRetention = body.enableObjectRetention;\n            delete body.enableObjectRetention;\n        }\n        if (body.predefinedAcl) {\n            query.predefinedAcl = body.predefinedAcl;\n            delete body.predefinedAcl;\n        }\n        if (body.predefinedDefaultObjectAcl) {\n            query.predefinedDefaultObjectAcl = body.predefinedDefaultObjectAcl;\n            delete body.predefinedDefaultObjectAcl;\n        }\n        if (body.projection) {\n            query.projection = body.projection;\n            delete body.projection;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/b',\n            qs: query,\n            json: body,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const bucket = this.bucket(name);\n            bucket.metadata = resp;\n            callback(null, bucket, resp);\n        });\n    }\n    /**\n     * @typedef {object} CreateHmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     * @property {string} [userProject] This parameter is currently ignored.\n     */\n    /**\n     * @typedef {object} HmacKeyMetadata\n     * @property {string} accessId The access id identifies which HMAC key was\n     *     used to sign a request when authenticating with HMAC.\n     * @property {string} etag Used to perform a read-modify-write of the key.\n     * @property {string} id The resource name of the HMAC key.\n     * @property {string} projectId The project ID.\n     * @property {string} serviceAccountEmail The service account's email this\n     *     HMAC key is created for.\n     * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\n     *     \"INACTIVE\" or \"DELETED\".\n     * @property {string} timeCreated The creation time of the HMAC key in\n     *     RFC 3339 format.\n     * @property {string} [updated] The time this HMAC key was last updated in\n     *     RFC 3339 format.\n     */\n    /**\n     * @typedef {array} CreateHmacKeyResponse\n     * @property {HmacKey} 0 The HmacKey instance created from API response.\n     * @property {string} 1 The HMAC key's secret used to access the XML API.\n     * @property {object} 3 The raw API response.\n     */\n    /**\n     * @callback CreateHmacKeyCallback Callback function.\n     * @param {?Error} err Request error, if any.\n     * @param {HmacKey} hmacKey The HmacKey instance created from API response.\n     * @param {string} secret The HMAC key's secret used to access the XML API.\n     * @param {object} apiResponse The raw API response.\n     */\n    /**\n     * Create an HMAC key associated with an service account to authenticate\n     * requests to the Cloud Storage XML API.\n     *\n     * See {@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}\n     *\n     * @param {string} serviceAccountEmail The service account's email address\n     *     with which the HMAC key is created for.\n     * @param {CreateHmacKeyCallback} [callback] Callback function.\n     * @return {Promise<CreateHmacKeyResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * // Replace with your service account's email address\n     * const serviceAccountEmail =\n     *   'my-service-account@appspot.gserviceaccount.com';\n     *\n     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\n     *   if (!err) {\n     *     // Securely store the secret for use with the XML API.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createHmacKey(serviceAccountEmail)\n     *   .then((response) => {\n     *     const hmacKey = response[0];\n     *     const secret = response[1];\n     *     // Securely store the secret for use with the XML API.\n     *   });\n     * ```\n     */\n    createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n        if (typeof serviceAccountEmail !== 'string') {\n            throw new Error(StorageExceptionMessages.HMAC_SERVICE_ACCOUNT);\n        }\n        const { options, callback } = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(optionsOrCb, cb);\n        const query = Object.assign({}, options, { serviceAccountEmail });\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            method: 'POST',\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n            maxRetries: 0, //explicitly set this value since this is a non-idempotent function\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const metadata = resp.metadata;\n            const hmacKey = this.hmacKey(metadata.accessId, {\n                projectId: metadata.projectId,\n            });\n            hmacKey.metadata = resp.metadata;\n            callback(null, hmacKey, resp.secret, resp);\n        });\n    }\n    /**\n     * Query object for listing buckets.\n     *\n     * @typedef {object} GetBucketsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     *  @param {boolean} [softDeleted] If true, returns the soft-deleted object.\n     *     Object `generation` is required if `softDeleted` is set to True.\n     */\n    /**\n     * @typedef {array} GetBucketsResponse\n     * @property {Bucket[]} 0 Array of {@link Bucket} instances.\n     * @property {object} 1 nextQuery A query object to receive more results.\n     * @property {object} 2 The full API response.\n     */\n    /**\n     * @callback GetBucketsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket[]} buckets Array of {@link Bucket} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get Bucket objects for all of the buckets in your project.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list| Buckets: list API Documentation}\n     *\n     * @param {GetBucketsRequest} [query] Query object for listing buckets.\n     * @param {GetBucketsCallback} [callback] Callback function.\n     * @returns {Promise<GetBucketsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * storage.getBuckets(function(err, buckets) {\n     *   if (!err) {\n     *     // buckets is an array of Bucket objects.\n     *   }\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, buckets, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     storage.getBuckets(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   buckets[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n     * };\n     *\n     * storage.getBuckets({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getBuckets().then(function(data) {\n     *   const buckets = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_list_buckets\n     * Another example:\n     */\n    getBuckets(optionsOrCallback, cb) {\n        const { options, callback } = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(optionsOrCallback, cb);\n        options.project = options.project || this.projectId;\n        this.request({\n            uri: '/b',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const buckets = itemsArray.map((bucket) => {\n                const bucketInstance = this.bucket(bucket.id);\n                bucketInstance.metadata = bucket;\n                return bucketInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, buckets, nextQuery, resp);\n        });\n    }\n    getHmacKeys(optionsOrCb, cb) {\n        const { options, callback } = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(optionsOrCb, cb);\n        const query = Object.assign({}, options);\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const hmacKeys = itemsArray.map((hmacKey) => {\n                const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n                    projectId: hmacKey.projectId,\n                });\n                hmacKeyInstance.metadata = hmacKey;\n                return hmacKeyInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, hmacKeys, nextQuery, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetServiceAccountResponse\n     * @property {object} 0 The service account resource.\n     * @property {object} 1 The full\n     * {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| API response}.\n     */\n    /**\n     * @callback GetServiceAccountCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} serviceAccount The serviceAccount resource.\n     * @param {string} serviceAccount.emailAddress The service account email\n     *     address.\n     * @param {object} apiResponse The full\n     * {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| API response}.\n     */\n    /**\n     * Get the email address of this project's Google Cloud Storage service\n     * account.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get| Projects.serviceAccount: get API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| Projects.serviceAccount Resource}\n     *\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.userProject] User project to be billed for this\n     *     request.\n     * @param {GetServiceAccountCallback} [callback] Callback function.\n     * @returns {Promise<GetServiceAccountResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\n     *   if (!err) {\n     *     const serviceAccountEmail = serviceAccount.emailAddress;\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getServiceAccount().then(function(data) {\n     *   const serviceAccountEmail = data[0].emailAddress;\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    getServiceAccount(optionsOrCallback, cb) {\n        const { options, callback } = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(optionsOrCallback, cb);\n        this.request({\n            uri: `/projects/${this.projectId}/serviceAccount`,\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const camelCaseResponse = {};\n            for (const prop in resp) {\n                // eslint-disable-next-line no-prototype-builtins\n                if (resp.hasOwnProperty(prop)) {\n                    const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n                    camelCaseResponse[camelCaseProp] = resp[prop];\n                }\n            }\n            callback(null, camelCaseResponse, resp);\n        });\n    }\n    /**\n     * Get a reference to an HmacKey object.\n     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\n     * retrieve and populate the metadata.\n     *\n     * To get a reference to an HMAC key that's not created for a service\n     * account in the same project used to instantiate the Storage client,\n     * supply the project's ID as `projectId` in the `options` argument.\n     *\n     * @param {string} accessId The HMAC key's access ID.\n     * @param {HmacKeyOptions} options HmacKey constructor options.\n     * @returns {HmacKey}\n     * @see HmacKey\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('ACCESS_ID');\n     * ```\n     */\n    hmacKey(accessId, options) {\n        if (!accessId) {\n            throw new Error(StorageExceptionMessages.HMAC_ACCESS_ID);\n        }\n        return new _hmacKey_js__WEBPACK_IMPORTED_MODULE_9__.HmacKey(this, accessId, options);\n    }\n}\n/**\n * {@link Bucket} class.\n *\n * @name Storage.Bucket\n * @see Bucket\n * @type {Constructor}\n */\nStorage.Bucket = _bucket_js__WEBPACK_IMPORTED_MODULE_4__.Bucket;\n/**\n * {@link Channel} class.\n *\n * @name Storage.Channel\n * @see Channel\n * @type {Constructor}\n */\nStorage.Channel = _channel_js__WEBPACK_IMPORTED_MODULE_5__.Channel;\n/**\n * {@link File} class.\n *\n * @name Storage.File\n * @see File\n * @type {Constructor}\n */\nStorage.File = _file_js__WEBPACK_IMPORTED_MODULE_6__.File;\n/**\n * {@link HmacKey} class.\n *\n * @name Storage.HmacKey\n * @see HmacKey\n * @type {Constructor}\n */\nStorage.HmacKey = _hmacKey_js__WEBPACK_IMPORTED_MODULE_9__.HmacKey;\nStorage.acl = {\n    OWNER_ROLE: 'OWNER',\n    READER_ROLE: 'READER',\n    WRITER_ROLE: 'WRITER',\n};\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n_google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__.promisifyAll)(Storage, {\n    exclude: ['bucket', 'channel', 'hmacKey'],\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/transfer-manager.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/transfer-manager.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiPartUploadError: () => (/* binding */ MultiPartUploadError),\n/* harmony export */   TransferManager: () => (/* binding */ TransferManager)\n/* harmony export */ });\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-limit */ \"(rsc)/./node_modules/p-limit/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./nodejs-common/util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _XMLMultiPartUploadHelper_instances, _XMLMultiPartUploadHelper_setGoogApiClientHeaders, _XMLMultiPartUploadHelper_handleErrorResponse;\n\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\nconst packageJson = (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_11__.getPackageJSON)();\n/**\n * Default number of concurrently executing promises to use when calling uploadManyFiles.\n *\n */\nconst DEFAULT_PARALLEL_UPLOAD_LIMIT = 5;\n/**\n * Default number of concurrently executing promises to use when calling downloadManyFiles.\n *\n */\nconst DEFAULT_PARALLEL_DOWNLOAD_LIMIT = 5;\n/**\n * Default number of concurrently executing promises to use when calling downloadFileInChunks.\n *\n */\nconst DEFAULT_PARALLEL_CHUNKED_DOWNLOAD_LIMIT = 5;\n/**\n * The minimum size threshold in bytes at which to apply a chunked download strategy when calling downloadFileInChunks.\n *\n */\nconst DOWNLOAD_IN_CHUNKS_FILE_SIZE_THRESHOLD = 32 * 1024 * 1024;\n/**\n * The chunk size in bytes to use when calling downloadFileInChunks.\n *\n */\nconst DOWNLOAD_IN_CHUNKS_DEFAULT_CHUNK_SIZE = 32 * 1024 * 1024;\n/**\n * The chunk size in bytes to use when calling uploadFileInChunks.\n *\n */\nconst UPLOAD_IN_CHUNKS_DEFAULT_CHUNK_SIZE = 32 * 1024 * 1024;\n/**\n * Default number of concurrently executing promises to use when calling uploadFileInChunks.\n *\n */\nconst DEFAULT_PARALLEL_CHUNKED_UPLOAD_LIMIT = 5;\nconst EMPTY_REGEX = '(?:)';\n/**\n * The `gccl-gcs-cmd` value for the `X-Goog-API-Client` header.\n * Example: `gccl-gcs-cmd/tm.upload_many`\n *\n * @see {@link GCCL_GCS_CMD}.\n * @see {@link GCCL_GCS_CMD_KEY}.\n */\nconst GCCL_GCS_CMD_FEATURE = {\n    UPLOAD_MANY: 'tm.upload_many',\n    DOWNLOAD_MANY: 'tm.download_many',\n    UPLOAD_SHARDED: 'tm.upload_sharded',\n    DOWNLOAD_SHARDED: 'tm.download_sharded',\n};\nconst defaultMultiPartGenerator = (bucket, fileName, uploadId, partsMap) => {\n    return new XMLMultiPartUploadHelper(bucket, fileName, uploadId, partsMap);\n};\nclass MultiPartUploadError extends Error {\n    constructor(message, uploadId, partsMap) {\n        super(message);\n        this.uploadId = uploadId;\n        this.partsMap = partsMap;\n    }\n}\n/**\n * Class representing an implementation of MPU in the XML API. This class is not meant for public usage.\n *\n * @private\n *\n */\nclass XMLMultiPartUploadHelper {\n    constructor(bucket, fileName, uploadId, partsMap) {\n        _XMLMultiPartUploadHelper_instances.add(this);\n        this.authClient = bucket.storage.authClient || new google_auth_library__WEBPACK_IMPORTED_MODULE_5__.GoogleAuth();\n        this.uploadId = uploadId || '';\n        this.bucket = bucket;\n        this.fileName = fileName;\n        this.baseUrl = `https://${bucket.name}.${new URL(this.bucket.storage.apiEndpoint).hostname}/${fileName}`;\n        this.xmlBuilder = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_6__.XMLBuilder({ arrayNodeName: 'Part' });\n        this.xmlParser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_6__.XMLParser();\n        this.partsMap = partsMap || new Map();\n        this.retryOptions = {\n            retries: this.bucket.storage.retryOptions.maxRetries,\n            factor: this.bucket.storage.retryOptions.retryDelayMultiplier,\n            maxTimeout: this.bucket.storage.retryOptions.maxRetryDelay * 1000,\n            maxRetryTime: this.bucket.storage.retryOptions.totalTimeout * 1000,\n        };\n    }\n    /**\n     * Initiates a multipart upload (MPU) to the XML API and stores the resultant upload id.\n     *\n     * @returns {Promise<void>}\n     */\n    async initiateUpload(headers = {}) {\n        const url = `${this.baseUrl}?uploads`;\n        return async_retry__WEBPACK_IMPORTED_MODULE_7__(async (bail) => {\n            try {\n                const res = await this.authClient.request({\n                    headers: __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_setGoogApiClientHeaders).call(this, headers),\n                    method: 'POST',\n                    url,\n                });\n                if (res.data && res.data.error) {\n                    throw res.data.error;\n                }\n                const parsedXML = this.xmlParser.parse(res.data);\n                this.uploadId = parsedXML.InitiateMultipartUploadResult.UploadId;\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_handleErrorResponse).call(this, e, bail);\n            }\n        }, this.retryOptions);\n    }\n    /**\n     * Uploads the provided chunk of data to the XML API using the previously created upload id.\n     *\n     * @param {number} partNumber the sequence number of this chunk.\n     * @param {Buffer} chunk the chunk of data to be uploaded.\n     * @param {string | false} validation whether or not to include the md5 hash in the headers to cause the server\n     * to validate the chunk was not corrupted.\n     * @returns {Promise<void>}\n     */\n    async uploadPart(partNumber, chunk, validation) {\n        const url = `${this.baseUrl}?partNumber=${partNumber}&uploadId=${this.uploadId}`;\n        let headers = __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_setGoogApiClientHeaders).call(this);\n        if (validation === 'md5') {\n            const hash = (0,crypto__WEBPACK_IMPORTED_MODULE_8__.createHash)('md5').update(chunk).digest('base64');\n            headers = {\n                'Content-MD5': hash,\n            };\n        }\n        return async_retry__WEBPACK_IMPORTED_MODULE_7__(async (bail) => {\n            try {\n                const res = await this.authClient.request({\n                    url,\n                    method: 'PUT',\n                    body: chunk,\n                    headers,\n                });\n                if (res.data && res.data.error) {\n                    throw res.data.error;\n                }\n                this.partsMap.set(partNumber, res.headers['etag']);\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_handleErrorResponse).call(this, e, bail);\n            }\n        }, this.retryOptions);\n    }\n    /**\n     * Sends the final request of the MPU to tell GCS the upload is now complete.\n     *\n     * @returns {Promise<void>}\n     */\n    async completeUpload() {\n        const url = `${this.baseUrl}?uploadId=${this.uploadId}`;\n        const sortedMap = new Map([...this.partsMap.entries()].sort((a, b) => a[0] - b[0]));\n        const parts = [];\n        for (const entry of sortedMap.entries()) {\n            parts.push({ PartNumber: entry[0], ETag: entry[1] });\n        }\n        const body = `<CompleteMultipartUpload>${this.xmlBuilder.build(parts)}</CompleteMultipartUpload>`;\n        return async_retry__WEBPACK_IMPORTED_MODULE_7__(async (bail) => {\n            try {\n                const res = await this.authClient.request({\n                    headers: __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_setGoogApiClientHeaders).call(this),\n                    url,\n                    method: 'POST',\n                    body,\n                });\n                if (res.data && res.data.error) {\n                    throw res.data.error;\n                }\n                return res;\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_handleErrorResponse).call(this, e, bail);\n                return;\n            }\n        }, this.retryOptions);\n    }\n    /**\n     * Aborts an multipart upload that is in progress. Once aborted, any parts in the process of being uploaded fail,\n     * and future requests using the upload ID fail.\n     *\n     * @returns {Promise<void>}\n     */\n    async abortUpload() {\n        const url = `${this.baseUrl}?uploadId=${this.uploadId}`;\n        return async_retry__WEBPACK_IMPORTED_MODULE_7__(async (bail) => {\n            try {\n                const res = await this.authClient.request({\n                    url,\n                    method: 'DELETE',\n                });\n                if (res.data && res.data.error) {\n                    throw res.data.error;\n                }\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_handleErrorResponse).call(this, e, bail);\n                return;\n            }\n        }, this.retryOptions);\n    }\n}\n_XMLMultiPartUploadHelper_instances = new WeakSet(), _XMLMultiPartUploadHelper_setGoogApiClientHeaders = function _XMLMultiPartUploadHelper_setGoogApiClientHeaders(headers = {}) {\n    let headerFound = false;\n    let userAgentFound = false;\n    for (const [key, value] of Object.entries(headers)) {\n        if (key.toLocaleLowerCase().trim() === 'x-goog-api-client') {\n            headerFound = true;\n            // Prepend command feature to value, if not already there\n            if (!value.includes(GCCL_GCS_CMD_FEATURE.UPLOAD_SHARDED)) {\n                headers[key] =\n                    `${value} gccl-gcs-cmd/${GCCL_GCS_CMD_FEATURE.UPLOAD_SHARDED}`;\n            }\n        }\n        else if (key.toLocaleLowerCase().trim() === 'user-agent') {\n            userAgentFound = true;\n        }\n    }\n    // If the header isn't present, add it\n    if (!headerFound) {\n        headers['x-goog-api-client'] = `${(0,_util_js__WEBPACK_IMPORTED_MODULE_10__.getRuntimeTrackingString)()} gccl/${packageJson.version} gccl-gcs-cmd/${GCCL_GCS_CMD_FEATURE.UPLOAD_SHARDED}`;\n    }\n    // If the User-Agent isn't present, add it\n    if (!userAgentFound) {\n        headers['User-Agent'] = (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.getUserAgentString)();\n    }\n    return headers;\n}, _XMLMultiPartUploadHelper_handleErrorResponse = function _XMLMultiPartUploadHelper_handleErrorResponse(err, bail) {\n    if (this.bucket.storage.retryOptions.autoRetry &&\n        this.bucket.storage.retryOptions.retryableErrorFn(err)) {\n        throw err;\n    }\n    else {\n        bail(err);\n    }\n};\n/**\n * Create a TransferManager object to perform parallel transfer operations on a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket A {@link Bucket} instance\n *\n */\nclass TransferManager {\n    constructor(bucket) {\n        this.bucket = bucket;\n    }\n    /**\n     * @typedef {object} UploadManyFilesOptions\n     * @property {number} [concurrencyLimit] The number of concurrently executing promises\n     * to use when uploading the files.\n     * @property {Function} [customDestinationBuilder] A fuction that will take the current path of a local file\n     * and return a string representing a custom path to be used to upload the file to GCS.\n     * @property {boolean} [skipIfExists] Do not upload the file if it already exists in\n     * the bucket. This will set the precondition ifGenerationMatch = 0.\n     * @property {string} [prefix] A prefix to append to all of the uploaded files.\n     * @property {object} [passthroughOptions] {@link UploadOptions} Options to be passed through\n     * to each individual upload operation.\n     *\n     */\n    /**\n     * Upload multiple files in parallel to the bucket. This is a convenience method\n     * that utilizes {@link Bucket#upload} to perform the upload.\n     *\n     * @param {array | string} [filePathsOrDirectory] An array of fully qualified paths to the files or a directory name.\n     * If a directory name is provided, the directory will be recursively walked and all files will be added to the upload list.\n     * to be uploaded to the bucket\n     * @param {UploadManyFilesOptions} [options] Configuration options.\n     * @returns {Promise<UploadResponse[]>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const transferManager = new TransferManager(bucket);\n     *\n     * //-\n     * // Upload multiple files in parallel.\n     * //-\n     * const response = await transferManager.uploadManyFiles(['/local/path/file1.txt, 'local/path/file2.txt']);\n     * // Your bucket now contains:\n     * // - \"local/path/file1.txt\" (with the contents of '/local/path/file1.txt')\n     * // - \"local/path/file2.txt\" (with the contents of '/local/path/file2.txt')\n     * const response = await transferManager.uploadManyFiles('/local/directory');\n     * // Your bucket will now contain all files contained in '/local/directory' maintaining the subdirectory structure.\n     * ```\n     *\n     */\n    async uploadManyFiles(filePathsOrDirectory, options = {}) {\n        var _a;\n        if (options.skipIfExists && ((_a = options.passthroughOptions) === null || _a === void 0 ? void 0 : _a.preconditionOpts)) {\n            options.passthroughOptions.preconditionOpts.ifGenerationMatch = 0;\n        }\n        else if (options.skipIfExists &&\n            options.passthroughOptions === undefined) {\n            options.passthroughOptions = {\n                preconditionOpts: {\n                    ifGenerationMatch: 0,\n                },\n            };\n        }\n        const limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(options.concurrencyLimit || DEFAULT_PARALLEL_UPLOAD_LIMIT);\n        const promises = [];\n        let allPaths = [];\n        if (!Array.isArray(filePathsOrDirectory)) {\n            for await (const curPath of this.getPathsFromDirectory(filePathsOrDirectory)) {\n                allPaths.push(curPath);\n            }\n        }\n        else {\n            allPaths = filePathsOrDirectory;\n        }\n        for (const filePath of allPaths) {\n            const stat = await fs__WEBPACK_IMPORTED_MODULE_3__.promises.lstat(filePath);\n            if (stat.isDirectory()) {\n                continue;\n            }\n            const passThroughOptionsCopy = {\n                ...options.passthroughOptions,\n                [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_9__.GCCL_GCS_CMD_KEY]: GCCL_GCS_CMD_FEATURE.UPLOAD_MANY,\n            };\n            passThroughOptionsCopy.destination = options.customDestinationBuilder\n                ? options.customDestinationBuilder(filePath, options)\n                : filePath.split(path__WEBPACK_IMPORTED_MODULE_2__.sep).join(path__WEBPACK_IMPORTED_MODULE_2__.posix.sep);\n            if (options.prefix) {\n                passThroughOptionsCopy.destination = path__WEBPACK_IMPORTED_MODULE_2__.posix.join(...options.prefix.split(path__WEBPACK_IMPORTED_MODULE_2__.sep), passThroughOptionsCopy.destination);\n            }\n            promises.push(limit(() => this.bucket.upload(filePath, passThroughOptionsCopy)));\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * @typedef {object} DownloadManyFilesOptions\n     * @property {number} [concurrencyLimit] The number of concurrently executing promises\n     * to use when downloading the files.\n     * @property {string} [prefix] A prefix to append to all of the downloaded files.\n     * @property {string} [stripPrefix] A prefix to remove from all of the downloaded files.\n     * @property {object} [passthroughOptions] {@link DownloadOptions} Options to be passed through\n     * to each individual download operation.\n     * @property {boolean} [skipIfExists] Do not download the file if it already exists in\n     * the destination.\n     *\n     */\n    /**\n     * Download multiple files in parallel to the local filesystem. This is a convenience method\n     * that utilizes {@link File#download} to perform the download.\n     *\n     * @param {array | string} [filesOrFolder] An array of file name strings or file objects to be downloaded. If\n     * a string is provided this will be treated as a GCS prefix and all files with that prefix will be downloaded.\n     * @param {DownloadManyFilesOptions} [options] Configuration options. Setting options.prefix or options.stripPrefix\n     * or options.passthroughOptions.destination will cause the downloaded files to be written to the file system\n     * instead of being returned as a buffer.\n     * @returns {Promise<DownloadResponse[]>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const transferManager = new TransferManager(bucket);\n     *\n     * //-\n     * // Download multiple files in parallel.\n     * //-\n     * const response = await transferManager.downloadManyFiles(['file1.txt', 'file2.txt']);\n     * // The following files have been downloaded:\n     * // - \"file1.txt\" (with the contents from my-bucket.file1.txt)\n     * // - \"file2.txt\" (with the contents from my-bucket.file2.txt)\n     * const response = await transferManager.downloadManyFiles([bucket.File('file1.txt'), bucket.File('file2.txt')]);\n     * // The following files have been downloaded:\n     * // - \"file1.txt\" (with the contents from my-bucket.file1.txt)\n     * // - \"file2.txt\" (with the contents from my-bucket.file2.txt)\n     * const response = await transferManager.downloadManyFiles('test-folder');\n     * // All files with GCS prefix of 'test-folder' have been downloaded.\n     * ```\n     *\n     */\n    async downloadManyFiles(filesOrFolder, options = {}) {\n        const limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(options.concurrencyLimit || DEFAULT_PARALLEL_DOWNLOAD_LIMIT);\n        const promises = [];\n        let files = [];\n        if (!Array.isArray(filesOrFolder)) {\n            const directoryFiles = await this.bucket.getFiles({\n                prefix: filesOrFolder,\n            });\n            files = directoryFiles[0];\n        }\n        else {\n            files = filesOrFolder.map(curFile => {\n                if (typeof curFile === 'string') {\n                    return this.bucket.file(curFile);\n                }\n                return curFile;\n            });\n        }\n        const stripRegexString = options.stripPrefix\n            ? `^${options.stripPrefix}`\n            : EMPTY_REGEX;\n        const regex = new RegExp(stripRegexString, 'g');\n        for (const file of files) {\n            const passThroughOptionsCopy = {\n                ...options.passthroughOptions,\n                [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_9__.GCCL_GCS_CMD_KEY]: GCCL_GCS_CMD_FEATURE.DOWNLOAD_MANY,\n            };\n            if (options.prefix || passThroughOptionsCopy.destination) {\n                passThroughOptionsCopy.destination = path__WEBPACK_IMPORTED_MODULE_2__.join(options.prefix || '', passThroughOptionsCopy.destination || '', file.name);\n            }\n            if (options.stripPrefix) {\n                passThroughOptionsCopy.destination = file.name.replace(regex, '');\n            }\n            if (options.skipIfExists &&\n                (0,fs__WEBPACK_IMPORTED_MODULE_3__.existsSync)(passThroughOptionsCopy.destination || '')) {\n                continue;\n            }\n            promises.push(limit(async () => {\n                const destination = passThroughOptionsCopy.destination;\n                if (destination && destination.endsWith(path__WEBPACK_IMPORTED_MODULE_2__.sep)) {\n                    await fs__WEBPACK_IMPORTED_MODULE_3__.promises.mkdir(destination, { recursive: true });\n                    return Promise.resolve([\n                        Buffer.alloc(0),\n                    ]);\n                }\n                return file.download(passThroughOptionsCopy);\n            }));\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * @typedef {object} DownloadFileInChunksOptions\n     * @property {number} [concurrencyLimit] The number of concurrently executing promises\n     * to use when downloading the file.\n     * @property {number} [chunkSizeBytes] The size in bytes of each chunk to be downloaded.\n     * @property {string | boolean} [validation] Whether or not to perform a CRC32C validation check when download is complete.\n     * @property {boolean} [noReturnData] Whether or not to return the downloaded data. A `true` value here would be useful for files with a size that will not fit into memory.\n     *\n     */\n    /**\n     * Download a large file in chunks utilizing parallel download operations. This is a convenience method\n     * that utilizes {@link File#download} to perform the download.\n     *\n     * @param {File | string} fileOrName {@link File} to download.\n     * @param {DownloadFileInChunksOptions} [options] Configuration options.\n     * @returns {Promise<void | DownloadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const transferManager = new TransferManager(bucket);\n     *\n     * //-\n     * // Download a large file in chunks utilizing parallel operations.\n     * //-\n     * const response = await transferManager.downloadFileInChunks(bucket.file('large-file.txt');\n     * // Your local directory now contains:\n     * // - \"large-file.txt\" (with the contents from my-bucket.large-file.txt)\n     * ```\n     *\n     */\n    async downloadFileInChunks(fileOrName, options = {}) {\n        let chunkSize = options.chunkSizeBytes || DOWNLOAD_IN_CHUNKS_DEFAULT_CHUNK_SIZE;\n        let limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(options.concurrencyLimit || DEFAULT_PARALLEL_CHUNKED_DOWNLOAD_LIMIT);\n        const noReturnData = Boolean(options.noReturnData);\n        const promises = [];\n        const file = typeof fileOrName === 'string'\n            ? this.bucket.file(fileOrName)\n            : fileOrName;\n        const fileInfo = await file.get();\n        const size = parseInt(fileInfo[0].metadata.size.toString());\n        // If the file size does not meet the threshold download it as a single chunk.\n        if (size < DOWNLOAD_IN_CHUNKS_FILE_SIZE_THRESHOLD) {\n            limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(1);\n            chunkSize = size;\n        }\n        let start = 0;\n        const filePath = options.destination || path__WEBPACK_IMPORTED_MODULE_2__.basename(file.name);\n        const fileToWrite = await fs__WEBPACK_IMPORTED_MODULE_3__.promises.open(filePath, 'w');\n        while (start < size) {\n            const chunkStart = start;\n            let chunkEnd = start + chunkSize - 1;\n            chunkEnd = chunkEnd > size ? size : chunkEnd;\n            promises.push(limit(async () => {\n                const resp = await file.download({\n                    start: chunkStart,\n                    end: chunkEnd,\n                    [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_9__.GCCL_GCS_CMD_KEY]: GCCL_GCS_CMD_FEATURE.DOWNLOAD_SHARDED,\n                });\n                const result = await fileToWrite.write(resp[0], 0, resp[0].length, chunkStart);\n                if (noReturnData)\n                    return;\n                return result.buffer;\n            }));\n            start += chunkSize;\n        }\n        let chunks;\n        try {\n            chunks = await Promise.all(promises);\n        }\n        finally {\n            await fileToWrite.close();\n        }\n        if (options.validation === 'crc32c' && fileInfo[0].metadata.crc32c) {\n            const downloadedCrc32C = await _crc32c_js__WEBPACK_IMPORTED_MODULE_4__.CRC32C.fromFile(filePath);\n            if (!downloadedCrc32C.validate(fileInfo[0].metadata.crc32c)) {\n                const mismatchError = new _file_js__WEBPACK_IMPORTED_MODULE_0__.RequestError(_file_js__WEBPACK_IMPORTED_MODULE_0__.FileExceptionMessages.DOWNLOAD_MISMATCH);\n                mismatchError.code = 'CONTENT_DOWNLOAD_MISMATCH';\n                throw mismatchError;\n            }\n        }\n        if (noReturnData)\n            return;\n        return [Buffer.concat(chunks, size)];\n    }\n    /**\n     * @typedef {object} UploadFileInChunksOptions\n     * @property {number} [concurrencyLimit] The number of concurrently executing promises\n     * to use when uploading the file.\n     * @property {number} [chunkSizeBytes] The size in bytes of each chunk to be uploaded.\n     * @property {string} [uploadName] Name of the file when saving to GCS. If ommitted the name is taken from the file path.\n     * @property {number} [maxQueueSize] The number of chunks to be uploaded to hold in memory concurrently. If not specified\n     * defaults to the specified concurrency limit.\n     * @property {string} [uploadId] If specified attempts to resume a previous upload.\n     * @property {Map} [partsMap] If specified alongside uploadId, attempts to resume a previous upload from the last chunk\n     * specified in partsMap\n     * @property {object} [headers] headers to be sent when initiating the multipart upload.\n     * See {@link https://cloud.google.com/storage/docs/xml-api/post-object-multipart#request_headers| Request Headers: Initiate a Multipart Upload}\n     * @property {boolean} [autoAbortFailure] boolean to indicate if an in progress upload session will be automatically aborted upon failure. If not set,\n     * failures will be automatically aborted.\n     *\n     */\n    /**\n     * Upload a large file in chunks utilizing parallel upload opertions. If the upload fails, an uploadId and\n     * map containing all the successfully uploaded parts will be returned to the caller. These arguments can be used to\n     * resume the upload.\n     *\n     * @param {string} [filePath] The path of the file to be uploaded\n     * @param {UploadFileInChunksOptions} [options] Configuration options.\n     * @param {MultiPartHelperGenerator} [generator] A function that will return a type that implements the MPU interface. Most users will not need to use this.\n     * @returns {Promise<void>} If successful a promise resolving to void, otherwise a error containing the message, uploadid, and parts map.\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const transferManager = new TransferManager(bucket);\n     *\n     * //-\n     * // Upload a large file in chunks utilizing parallel operations.\n     * //-\n     * const response = await transferManager.uploadFileInChunks('large-file.txt');\n     * // Your bucket now contains:\n     * // - \"large-file.txt\"\n     * ```\n     *\n     *\n     */\n    async uploadFileInChunks(filePath, options = {}, generator = defaultMultiPartGenerator) {\n        const chunkSize = options.chunkSizeBytes || UPLOAD_IN_CHUNKS_DEFAULT_CHUNK_SIZE;\n        const limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(options.concurrencyLimit || DEFAULT_PARALLEL_CHUNKED_UPLOAD_LIMIT);\n        const maxQueueSize = options.maxQueueSize ||\n            options.concurrencyLimit ||\n            DEFAULT_PARALLEL_CHUNKED_UPLOAD_LIMIT;\n        const fileName = options.uploadName || path__WEBPACK_IMPORTED_MODULE_2__.basename(filePath);\n        const mpuHelper = generator(this.bucket, fileName, options.uploadId, options.partsMap);\n        let partNumber = 1;\n        let promises = [];\n        try {\n            if (options.uploadId === undefined) {\n                await mpuHelper.initiateUpload(options.headers);\n            }\n            const startOrResumptionByte = mpuHelper.partsMap.size * chunkSize;\n            const readStream = (0,fs__WEBPACK_IMPORTED_MODULE_3__.createReadStream)(filePath, {\n                highWaterMark: chunkSize,\n                start: startOrResumptionByte,\n            });\n            // p-limit only limits the number of running promises. We do not want to hold an entire\n            // large file in memory at once so promises acts a queue that will hold only maxQueueSize in memory.\n            for await (const curChunk of readStream) {\n                if (promises.length >= maxQueueSize) {\n                    await Promise.all(promises);\n                    promises = [];\n                }\n                promises.push(limit(() => mpuHelper.uploadPart(partNumber++, curChunk, options.validation)));\n            }\n            await Promise.all(promises);\n            return await mpuHelper.completeUpload();\n        }\n        catch (e) {\n            if ((options.autoAbortFailure === undefined || options.autoAbortFailure) &&\n                mpuHelper.uploadId) {\n                try {\n                    await mpuHelper.abortUpload();\n                    return;\n                }\n                catch (e) {\n                    throw new MultiPartUploadError(e.message, mpuHelper.uploadId, mpuHelper.partsMap);\n                }\n            }\n            throw new MultiPartUploadError(e.message, mpuHelper.uploadId, mpuHelper.partsMap);\n        }\n    }\n    async *getPathsFromDirectory(directory) {\n        const filesAndSubdirectories = await fs__WEBPACK_IMPORTED_MODULE_3__.promises.readdir(directory, {\n            withFileTypes: true,\n        });\n        for (const curFileOrDirectory of filesAndSubdirectories) {\n            const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.join(directory, curFileOrDirectory.name);\n            curFileOrDirectory.isDirectory()\n                ? yield* this.getPathsFromDirectory(fullPath)\n                : yield fullPath;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/transfer-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PassThroughShim: () => (/* binding */ PassThroughShim),\n/* harmony export */   convertObjKeysToSnakeCase: () => (/* binding */ convertObjKeysToSnakeCase),\n/* harmony export */   encodeURI: () => (/* binding */ encodeURI),\n/* harmony export */   fixedEncodeURIComponent: () => (/* binding */ fixedEncodeURIComponent),\n/* harmony export */   formatAsUTCISO: () => (/* binding */ formatAsUTCISO),\n/* harmony export */   getDirName: () => (/* binding */ getDirName),\n/* harmony export */   getModuleFormat: () => (/* binding */ getModuleFormat),\n/* harmony export */   getRuntimeTrackingString: () => (/* binding */ getRuntimeTrackingString),\n/* harmony export */   getUserAgentString: () => (/* binding */ getUserAgentString),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   objectEntries: () => (/* binding */ objectEntries),\n/* harmony export */   objectKeyToLowercase: () => (/* binding */ objectKeyToLowercase),\n/* harmony export */   qsStringify: () => (/* binding */ qsStringify),\n/* harmony export */   unicodeJSONStringify: () => (/* binding */ unicodeJSONStringify)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var querystring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! querystring */ \"querystring\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\n// Done to avoid a problem with mangling of identifiers when using esModuleInterop\nconst fileURLToPath = url__WEBPACK_IMPORTED_MODULE_3__.fileURLToPath;\nconst isEsm = true;\nfunction normalize(optionsOrCallback, cb) {\n    const options = (typeof optionsOrCallback === 'object' ? optionsOrCallback : {});\n    const callback = (typeof optionsOrCallback === 'function' ? optionsOrCallback : cb);\n    return { options, callback };\n}\n/**\n * Flatten an object into an Array of arrays, [[key, value], ..].\n * Implements Object.entries() for Node.js <8\n * @internal\n */\nfunction objectEntries(obj) {\n    return Object.keys(obj).map(key => [key, obj[key]]);\n}\n/**\n * Encode `str` with encodeURIComponent, plus these\n * reserved characters: `! * ' ( )`.\n *\n * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent| MDN: fixedEncodeURIComponent}\n *\n * @param {string} str The URI component to encode.\n * @return {string} The encoded string.\n */\nfunction fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, c => '%' + c.charCodeAt(0).toString(16).toUpperCase());\n}\n/**\n * URI encode `uri` for generating signed URLs, using fixedEncodeURIComponent.\n *\n * Encode every byte except `A-Z a-Z 0-9 ~ - . _`.\n *\n * @param {string} uri The URI to encode.\n * @param [boolean=false] encodeSlash If `true`, the \"/\" character is not encoded.\n * @return {string} The encoded string.\n */\nfunction encodeURI(uri, encodeSlash) {\n    // Split the string by `/`, and conditionally rejoin them with either\n    // %2F if encodeSlash is `true`, or '/' if `false`.\n    return uri\n        .split('/')\n        .map(fixedEncodeURIComponent)\n        .join(encodeSlash ? '%2F' : '/');\n}\n/**\n * Serialize an object to a URL query string using util.encodeURI(uri, true).\n * @param {string} url The object to serialize.\n * @return {string} Serialized string.\n */\nfunction qsStringify(qs) {\n    return querystring__WEBPACK_IMPORTED_MODULE_1__.stringify(qs, '&', '=', {\n        encodeURIComponent: (component) => encodeURI(component, true),\n    });\n}\nfunction objectKeyToLowercase(object) {\n    const newObj = {};\n    for (let key of Object.keys(object)) {\n        const value = object[key];\n        key = key.toLowerCase();\n        newObj[key] = value;\n    }\n    return newObj;\n}\n/**\n * JSON encode str, with unicode \\u+ representation.\n * @param {object} obj The object to encode.\n * @return {string} Serialized string.\n */\nfunction unicodeJSONStringify(obj) {\n    return JSON.stringify(obj).replace(/[\\u0080-\\uFFFF]/g, (char) => '\\\\u' + ('0000' + char.charCodeAt(0).toString(16)).slice(-4));\n}\n/**\n * Converts the given objects keys to snake_case\n * @param {object} obj object to convert keys to snake case.\n * @returns {object} object with keys converted to snake case.\n */\nfunction convertObjKeysToSnakeCase(obj) {\n    if (obj instanceof Date || obj instanceof RegExp) {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(convertObjKeysToSnakeCase);\n    }\n    if (obj instanceof Object) {\n        return Object.keys(obj).reduce((acc, cur) => {\n            const s = cur[0].toLocaleLowerCase() +\n                cur.slice(1).replace(/([A-Z]+)/g, (match, p1) => {\n                    return `_${p1.toLowerCase()}`;\n                });\n            acc[s] = convertObjKeysToSnakeCase(obj[cur]);\n            return acc;\n        }, Object());\n    }\n    return obj;\n}\n/**\n * Formats the provided date object as a UTC ISO string.\n * @param {Date} dateTimeToFormat date object to be formatted.\n * @param {boolean} includeTime flag to include hours, minutes, seconds in output.\n * @param {string} dateDelimiter delimiter between date components.\n * @param {string} timeDelimiter delimiter between time components.\n * @returns {string} UTC ISO format of provided date obect.\n */\nfunction formatAsUTCISO(dateTimeToFormat, includeTime = false, dateDelimiter = '', timeDelimiter = '') {\n    const year = dateTimeToFormat.getUTCFullYear();\n    const month = dateTimeToFormat.getUTCMonth() + 1;\n    const day = dateTimeToFormat.getUTCDate();\n    const hour = dateTimeToFormat.getUTCHours();\n    const minute = dateTimeToFormat.getUTCMinutes();\n    const second = dateTimeToFormat.getUTCSeconds();\n    let resultString = `${year.toString().padStart(4, '0')}${dateDelimiter}${month\n        .toString()\n        .padStart(2, '0')}${dateDelimiter}${day.toString().padStart(2, '0')}`;\n    if (includeTime) {\n        resultString = `${resultString}T${hour\n            .toString()\n            .padStart(2, '0')}${timeDelimiter}${minute\n            .toString()\n            .padStart(2, '0')}${timeDelimiter}${second.toString().padStart(2, '0')}Z`;\n    }\n    return resultString;\n}\n/**\n * Examines the runtime environment and returns the appropriate tracking string.\n * @returns {string} metrics tracking string based on the current runtime environment.\n */\nfunction getRuntimeTrackingString() {\n    if (\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    globalThis.Deno &&\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        globalThis.Deno.version &&\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        globalThis.Deno.version.deno) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return `gl-deno/${globalThis.Deno.version.deno}`;\n    }\n    else {\n        return `gl-node/${process.versions.node}`;\n    }\n}\n/**\n * Looks at package.json and creates the user-agent string to be applied to request headers.\n * @returns {string} user agent string.\n */\nfunction getUserAgentString() {\n    const pkg = (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_4__.getPackageJSON)();\n    const hyphenatedPackageName = pkg.name\n        .replace('@google-cloud', 'gcloud-node') // For legacy purposes.\n        .replace('/', '-'); // For UA spec-compliance purposes.\n    return hyphenatedPackageName + '/' + pkg.version;\n}\nfunction getDirName() {\n    let dirToUse = '';\n    try {\n        dirToUse = __dirname;\n    }\n    catch (e) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        dirToUse = path__WEBPACK_IMPORTED_MODULE_0__.dirname(fileURLToPath(\"file:///home/runner/workspace/node_modules/@google-cloud/storage/build/esm/src/util.js\"));\n    }\n    return dirToUse;\n}\nfunction getModuleFormat() {\n    return isEsm ? 'ESM' : 'CJS';\n}\nclass PassThroughShim extends stream__WEBPACK_IMPORTED_MODULE_2__.PassThrough {\n    constructor() {\n        super(...arguments);\n        this.shouldEmitReading = true;\n        this.shouldEmitWriting = true;\n    }\n    _read(size) {\n        if (this.shouldEmitReading) {\n            this.emit('reading');\n            this.shouldEmitReading = false;\n        }\n        super._read(size);\n    }\n    _write(chunk, encoding, callback) {\n        if (this.shouldEmitWriting) {\n            this.emit('writing');\n            this.shouldEmitWriting = false;\n        }\n        // Per the nodejs documention, callback must be invoked on the next tick\n        process.nextTick(() => {\n            super._write(chunk, encoding, callback);\n        });\n    }\n    _final(callback) {\n        // If the stream is empty (i.e. empty file) final will be invoked before _read / _write\n        // and we should still emit the proper events.\n        if (this.shouldEmitReading) {\n            this.emit('reading');\n            this.shouldEmitReading = false;\n        }\n        if (this.shouldEmitWriting) {\n            this.emit('writing');\n            this.shouldEmitWriting = false;\n        }\n        callback(null);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/gcp-residency.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/gcp-residency.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GCE_LINUX_BIOS_PATHS = void 0;\nexports.isGoogleCloudServerless = isGoogleCloudServerless;\nexports.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;\nexports.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;\nexports.isGoogleComputeEngine = isGoogleComputeEngine;\nexports.detectGCPResidency = detectGCPResidency;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst os_1 = __webpack_require__(/*! os */ \"os\");\n/**\n * Known paths unique to Google Compute Engine Linux instances\n */\nexports.GCE_LINUX_BIOS_PATHS = {\n    BIOS_DATE: '/sys/class/dmi/id/bios_date',\n    BIOS_VENDOR: '/sys/class/dmi/id/bios_vendor',\n};\nconst GCE_MAC_ADDRESS_REGEX = /^42:01/;\n/**\n * Determines if the process is running on a Google Cloud Serverless environment (Cloud Run or Cloud Functions instance).\n *\n * Uses the:\n * - {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n * - {@link https://cloud.google.com/functions/docs/env-var Cloud Functions environment variables}.\n *\n * @returns {boolean} `true` if the process is running on GCP serverless, `false` otherwise.\n */\nfunction isGoogleCloudServerless() {\n    /**\n     * `CLOUD_RUN_JOB` is used for Cloud Run Jobs\n     * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n     *\n     * `FUNCTION_NAME` is used in older Cloud Functions environments:\n     * - See {@link https://cloud.google.com/functions/docs/env-var Python 3.7 and Go 1.11}.\n     *\n     * `K_SERVICE` is used in Cloud Run and newer Cloud Functions environments:\n     * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n     * - See {@link https://cloud.google.com/functions/docs/env-var Cloud Functions newer runtimes}.\n     */\n    const isGFEnvironment = process.env.CLOUD_RUN_JOB ||\n        process.env.FUNCTION_NAME ||\n        process.env.K_SERVICE;\n    return !!isGFEnvironment;\n}\n/**\n * Determines if the process is running on a Linux Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on Linux GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngineLinux() {\n    if ((0, os_1.platform)() !== 'linux')\n        return false;\n    try {\n        // ensure this file exist\n        (0, fs_1.statSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_DATE);\n        // ensure this file exist and matches\n        const biosVendor = (0, fs_1.readFileSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, 'utf8');\n        return /Google/.test(biosVendor);\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Determines if the process is running on a Google Compute Engine instance with a known\n * MAC address.\n *\n * @returns {boolean} `true` if the process is running on GCE (as determined by MAC address), `false` otherwise.\n */\nfunction isGoogleComputeEngineMACAddress() {\n    const interfaces = (0, os_1.networkInterfaces)();\n    for (const item of Object.values(interfaces)) {\n        if (!item)\n            continue;\n        for (const { mac } of item) {\n            if (GCE_MAC_ADDRESS_REGEX.test(mac)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Determines if the process is running on a Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngine() {\n    return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();\n}\n/**\n * Determines if the process is running on Google Cloud Platform.\n *\n * @returns {boolean} `true` if the process is running on GCP, `false` otherwise.\n */\nfunction detectGCPResidency() {\n    return isGoogleCloudServerless() || isGoogleComputeEngine();\n}\n//# sourceMappingURL=gcp-residency.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nY3AtbWV0YWRhdGEvYnVpbGQvc3JjL2djcC1yZXNpZGVuY3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLCtCQUErQjtBQUMvQixrQ0FBa0M7QUFDbEMsdUNBQXVDO0FBQ3ZDLDZCQUE2QjtBQUM3QiwwQkFBMEI7QUFDMUIsYUFBYSxtQkFBTyxDQUFDLGNBQUk7QUFDekIsYUFBYSxtQkFBTyxDQUFDLGNBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLG9HQUFvRztBQUMxRyxNQUFNLDRGQUE0RjtBQUNsRztBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0dBQW9HO0FBQ2xIO0FBQ0E7QUFDQSxjQUFjLDZFQUE2RTtBQUMzRjtBQUNBO0FBQ0EsY0FBYyxvR0FBb0c7QUFDbEgsY0FBYyxxRkFBcUY7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUFNO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZ2NwLW1ldGFkYXRhL2J1aWxkL3NyYy9nY3AtcmVzaWRlbmN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HQ0VfTElOVVhfQklPU19QQVRIUyA9IHZvaWQgMDtcbmV4cG9ydHMuaXNHb29nbGVDbG91ZFNlcnZlcmxlc3MgPSBpc0dvb2dsZUNsb3VkU2VydmVybGVzcztcbmV4cG9ydHMuaXNHb29nbGVDb21wdXRlRW5naW5lTGludXggPSBpc0dvb2dsZUNvbXB1dGVFbmdpbmVMaW51eDtcbmV4cG9ydHMuaXNHb29nbGVDb21wdXRlRW5naW5lTUFDQWRkcmVzcyA9IGlzR29vZ2xlQ29tcHV0ZUVuZ2luZU1BQ0FkZHJlc3M7XG5leHBvcnRzLmlzR29vZ2xlQ29tcHV0ZUVuZ2luZSA9IGlzR29vZ2xlQ29tcHV0ZUVuZ2luZTtcbmV4cG9ydHMuZGV0ZWN0R0NQUmVzaWRlbmN5ID0gZGV0ZWN0R0NQUmVzaWRlbmN5O1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IG9zXzEgPSByZXF1aXJlKFwib3NcIik7XG4vKipcbiAqIEtub3duIHBhdGhzIHVuaXF1ZSB0byBHb29nbGUgQ29tcHV0ZSBFbmdpbmUgTGludXggaW5zdGFuY2VzXG4gKi9cbmV4cG9ydHMuR0NFX0xJTlVYX0JJT1NfUEFUSFMgPSB7XG4gICAgQklPU19EQVRFOiAnL3N5cy9jbGFzcy9kbWkvaWQvYmlvc19kYXRlJyxcbiAgICBCSU9TX1ZFTkRPUjogJy9zeXMvY2xhc3MvZG1pL2lkL2Jpb3NfdmVuZG9yJyxcbn07XG5jb25zdCBHQ0VfTUFDX0FERFJFU1NfUkVHRVggPSAvXjQyOjAxLztcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgcHJvY2VzcyBpcyBydW5uaW5nIG9uIGEgR29vZ2xlIENsb3VkIFNlcnZlcmxlc3MgZW52aXJvbm1lbnQgKENsb3VkIFJ1biBvciBDbG91ZCBGdW5jdGlvbnMgaW5zdGFuY2UpLlxuICpcbiAqIFVzZXMgdGhlOlxuICogLSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3J1bi9kb2NzL2NvbnRhaW5lci1jb250cmFjdCNlbnYtdmFycyBDbG91ZCBSdW4gZW52aXJvbm1lbnQgdmFyaWFibGVzfS5cbiAqIC0ge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9mdW5jdGlvbnMvZG9jcy9lbnYtdmFyIENsb3VkIEZ1bmN0aW9ucyBlbnZpcm9ubWVudCB2YXJpYWJsZXN9LlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHByb2Nlc3MgaXMgcnVubmluZyBvbiBHQ1Agc2VydmVybGVzcywgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzR29vZ2xlQ2xvdWRTZXJ2ZXJsZXNzKCkge1xuICAgIC8qKlxuICAgICAqIGBDTE9VRF9SVU5fSk9CYCBpcyB1c2VkIGZvciBDbG91ZCBSdW4gSm9ic1xuICAgICAqIC0gU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vcnVuL2RvY3MvY29udGFpbmVyLWNvbnRyYWN0I2Vudi12YXJzIENsb3VkIFJ1biBlbnZpcm9ubWVudCB2YXJpYWJsZXN9LlxuICAgICAqXG4gICAgICogYEZVTkNUSU9OX05BTUVgIGlzIHVzZWQgaW4gb2xkZXIgQ2xvdWQgRnVuY3Rpb25zIGVudmlyb25tZW50czpcbiAgICAgKiAtIFNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2Z1bmN0aW9ucy9kb2NzL2Vudi12YXIgUHl0aG9uIDMuNyBhbmQgR28gMS4xMX0uXG4gICAgICpcbiAgICAgKiBgS19TRVJWSUNFYCBpcyB1c2VkIGluIENsb3VkIFJ1biBhbmQgbmV3ZXIgQ2xvdWQgRnVuY3Rpb25zIGVudmlyb25tZW50czpcbiAgICAgKiAtIFNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL3J1bi9kb2NzL2NvbnRhaW5lci1jb250cmFjdCNlbnYtdmFycyBDbG91ZCBSdW4gZW52aXJvbm1lbnQgdmFyaWFibGVzfS5cbiAgICAgKiAtIFNlZSB7QGxpbmsgaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2Z1bmN0aW9ucy9kb2NzL2Vudi12YXIgQ2xvdWQgRnVuY3Rpb25zIG5ld2VyIHJ1bnRpbWVzfS5cbiAgICAgKi9cbiAgICBjb25zdCBpc0dGRW52aXJvbm1lbnQgPSBwcm9jZXNzLmVudi5DTE9VRF9SVU5fSk9CIHx8XG4gICAgICAgIHByb2Nlc3MuZW52LkZVTkNUSU9OX05BTUUgfHxcbiAgICAgICAgcHJvY2Vzcy5lbnYuS19TRVJWSUNFO1xuICAgIHJldHVybiAhIWlzR0ZFbnZpcm9ubWVudDtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgcHJvY2VzcyBpcyBydW5uaW5nIG9uIGEgTGludXggR29vZ2xlIENvbXB1dGUgRW5naW5lIGluc3RhbmNlLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHByb2Nlc3MgaXMgcnVubmluZyBvbiBMaW51eCBHQ0UsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc0dvb2dsZUNvbXB1dGVFbmdpbmVMaW51eCgpIHtcbiAgICBpZiAoKDAsIG9zXzEucGxhdGZvcm0pKCkgIT09ICdsaW51eCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICAvLyBlbnN1cmUgdGhpcyBmaWxlIGV4aXN0XG4gICAgICAgICgwLCBmc18xLnN0YXRTeW5jKShleHBvcnRzLkdDRV9MSU5VWF9CSU9TX1BBVEhTLkJJT1NfREFURSk7XG4gICAgICAgIC8vIGVuc3VyZSB0aGlzIGZpbGUgZXhpc3QgYW5kIG1hdGNoZXNcbiAgICAgICAgY29uc3QgYmlvc1ZlbmRvciA9ICgwLCBmc18xLnJlYWRGaWxlU3luYykoZXhwb3J0cy5HQ0VfTElOVVhfQklPU19QQVRIUy5CSU9TX1ZFTkRPUiwgJ3V0ZjgnKTtcbiAgICAgICAgcmV0dXJuIC9Hb29nbGUvLnRlc3QoYmlvc1ZlbmRvcik7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBwcm9jZXNzIGlzIHJ1bm5pbmcgb24gYSBHb29nbGUgQ29tcHV0ZSBFbmdpbmUgaW5zdGFuY2Ugd2l0aCBhIGtub3duXG4gKiBNQUMgYWRkcmVzcy5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBwcm9jZXNzIGlzIHJ1bm5pbmcgb24gR0NFIChhcyBkZXRlcm1pbmVkIGJ5IE1BQyBhZGRyZXNzKSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzR29vZ2xlQ29tcHV0ZUVuZ2luZU1BQ0FkZHJlc3MoKSB7XG4gICAgY29uc3QgaW50ZXJmYWNlcyA9ICgwLCBvc18xLm5ldHdvcmtJbnRlcmZhY2VzKSgpO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBPYmplY3QudmFsdWVzKGludGVyZmFjZXMpKSB7XG4gICAgICAgIGlmICghaXRlbSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBmb3IgKGNvbnN0IHsgbWFjIH0gb2YgaXRlbSkge1xuICAgICAgICAgICAgaWYgKEdDRV9NQUNfQUREUkVTU19SRUdFWC50ZXN0KG1hYykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHByb2Nlc3MgaXMgcnVubmluZyBvbiBhIEdvb2dsZSBDb21wdXRlIEVuZ2luZSBpbnN0YW5jZS5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBwcm9jZXNzIGlzIHJ1bm5pbmcgb24gR0NFLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNHb29nbGVDb21wdXRlRW5naW5lKCkge1xuICAgIHJldHVybiBpc0dvb2dsZUNvbXB1dGVFbmdpbmVMaW51eCgpIHx8IGlzR29vZ2xlQ29tcHV0ZUVuZ2luZU1BQ0FkZHJlc3MoKTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgcHJvY2VzcyBpcyBydW5uaW5nIG9uIEdvb2dsZSBDbG91ZCBQbGF0Zm9ybS5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBwcm9jZXNzIGlzIHJ1bm5pbmcgb24gR0NQLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0R0NQUmVzaWRlbmN5KCkge1xuICAgIHJldHVybiBpc0dvb2dsZUNsb3VkU2VydmVybGVzcygpIHx8IGlzR29vZ2xlQ29tcHV0ZUVuZ2luZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2NwLXJlc2lkZW5jeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/gcp-residency.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/index.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.gcpResidencyCache = exports.METADATA_SERVER_DETECTION = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\nexports.instance = instance;\nexports.project = project;\nexports.universe = universe;\nexports.bulk = bulk;\nexports.isAvailable = isAvailable;\nexports.resetIsAvailableCache = resetIsAvailableCache;\nexports.getGCPResidency = getGCPResidency;\nexports.setGCPResidency = setGCPResidency;\nexports.requestTimeout = requestTimeout;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst jsonBigint = __webpack_require__(/*! json-bigint */ \"(rsc)/./node_modules/json-bigint/index.js\");\nconst gcp_residency_1 = __webpack_require__(/*! ./gcp-residency */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/gcp-residency.js\");\nconst logger = __webpack_require__(/*! google-logging-utils */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/index.js\");\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({ [exports.HEADER_NAME]: exports.HEADER_VALUE });\nconst log = logger.log('gcp metadata');\n/**\n * Metadata server detection override options.\n *\n * Available via `process.env.METADATA_SERVER_DETECTION`.\n */\nexports.METADATA_SERVER_DETECTION = Object.freeze({\n    'assume-present': \"don't try to ping the metadata server, but assume it's present\",\n    none: \"don't try to ping the metadata server, but don't try to use it either\",\n    'bios-only': \"treat the result of a BIOS probe as canonical (don't fall back to pinging)\",\n    'ping-only': 'skip the BIOS probe, and go straight to pinging',\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\nfunction getBaseUrl(baseUrl) {\n    if (!baseUrl) {\n        baseUrl =\n            process.env.GCE_METADATA_IP ||\n                process.env.GCE_METADATA_HOST ||\n                exports.HOST_ADDRESS;\n    }\n    // If no scheme is provided default to HTTP:\n    if (!/^https?:\\/\\//.test(baseUrl)) {\n        baseUrl = `http://${baseUrl}`;\n    }\n    return new URL(exports.BASE_PATH, baseUrl).href;\n}\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n    Object.keys(options).forEach(key => {\n        switch (key) {\n            case 'params':\n            case 'property':\n            case 'headers':\n                break;\n            case 'qs':\n                throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n            default:\n                throw new Error(`'${key}' is not a valid configuration option.`);\n        }\n    });\n}\nasync function metadataAccessor(type, options = {}, noResponseRetries = 3, fastFail = false) {\n    let metadataKey = '';\n    let params = {};\n    let headers = {};\n    if (typeof type === 'object') {\n        const metadataAccessor = type;\n        metadataKey = metadataAccessor.metadataKey;\n        params = metadataAccessor.params || params;\n        headers = metadataAccessor.headers || headers;\n        noResponseRetries = metadataAccessor.noResponseRetries || noResponseRetries;\n        fastFail = metadataAccessor.fastFail || fastFail;\n    }\n    else {\n        metadataKey = type;\n    }\n    if (typeof options === 'string') {\n        metadataKey += `/${options}`;\n    }\n    else {\n        validate(options);\n        if (options.property) {\n            metadataKey += `/${options.property}`;\n        }\n        headers = options.headers || headers;\n        params = options.params || params;\n    }\n    const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n    const req = {\n        url: `${getBaseUrl()}/${metadataKey}`,\n        headers: { ...exports.HEADERS, ...headers },\n        retryConfig: { noResponseRetries },\n        params,\n        responseType: 'text',\n        timeout: requestTimeout(),\n    };\n    log.info('instance request %j', req);\n    const res = await requestMethod(req);\n    log.info('instance metadata is %s', res.data);\n    // NOTE: node.js converts all incoming headers to lower case.\n    if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n        throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header. Expected '${exports.HEADER_VALUE}', got ${res.headers[exports.HEADER_NAME.toLowerCase()] ? `'${res.headers[exports.HEADER_NAME.toLowerCase()]}'` : 'no header'}`);\n    }\n    if (typeof res.data === 'string') {\n        try {\n            return jsonBigint.parse(res.data);\n        }\n        catch (_a) {\n            /* ignore */\n        }\n    }\n    return res.data;\n}\nasync function fastFailMetadataRequest(options) {\n    var _a;\n    const secondaryOptions = {\n        ...options,\n        url: (_a = options.url) === null || _a === void 0 ? void 0 : _a.toString().replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS)),\n    };\n    // We race a connection between DNS/IP to metadata server. There are a couple\n    // reasons for this:\n    //\n    // 1. the DNS is slow in some GCP environments; by checking both, we might\n    //    detect the runtime environment signficantly faster.\n    // 2. we can't just check the IP, which is tarpitted and slow to respond\n    //    on a user's local machine.\n    //\n    // Additional logic has been added to make sure that we don't create an\n    // unhandled rejection in scenarios where a failure happens sometime\n    // after a success.\n    //\n    // Note, however, if a failure happens prior to a success, a rejection should\n    // occur, this is for folks running locally.\n    //\n    let responded = false;\n    const r1 = (0, gaxios_1.request)(options)\n        .then(res => {\n        responded = true;\n        return res;\n    })\n        .catch(err => {\n        if (responded) {\n            return r2;\n        }\n        else {\n            responded = true;\n            throw err;\n        }\n    });\n    const r2 = (0, gaxios_1.request)(secondaryOptions)\n        .then(res => {\n        responded = true;\n        return res;\n    })\n        .catch(err => {\n        if (responded) {\n            return r1;\n        }\n        else {\n            responded = true;\n            throw err;\n        }\n    });\n    return Promise.race([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const serviceAccount: {} = await instance('service-accounts/');\n * const serviceAccountEmail: string = await instance('service-accounts/default/email');\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instance(options) {\n    return metadataAccessor('instance', options);\n}\n/**\n * Obtain metadata for the current GCP project.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const projectId: string = await project('project-id');\n * const numericProjectId: number = await project('numeric-project-id');\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction project(options) {\n    return metadataAccessor('project', options);\n}\n/**\n * Obtain metadata for the current universe.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const universeDomain: string = await universe('universe-domain');\n * ```\n */\nfunction universe(options) {\n    return metadataAccessor('universe', options);\n}\n/**\n * Retrieve metadata items in parallel.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const data = await bulk([\n *   {\n *     metadataKey: 'instance',\n *   },\n *   {\n *     metadataKey: 'project/project-id',\n *   },\n * ] as const);\n *\n * // data.instance;\n * // data['project/project-id'];\n * ```\n *\n * @param properties The metadata properties to retrieve\n * @returns The metadata in `metadatakey:value` format\n */\nasync function bulk(properties) {\n    const r = {};\n    await Promise.all(properties.map(item => {\n        return (async () => {\n            const res = await metadataAccessor(item);\n            const key = item.metadataKey;\n            r[key] = res;\n        })();\n    }));\n    return r;\n}\n/*\n * How many times should we retry detecting GCP environment.\n */\nfunction detectGCPAvailableRetries() {\n    return process.env.DETECT_GCP_RETRIES\n        ? Number(process.env.DETECT_GCP_RETRIES)\n        : 0;\n}\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\nasync function isAvailable() {\n    if (process.env.METADATA_SERVER_DETECTION) {\n        const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();\n        if (!(value in exports.METADATA_SERVER_DETECTION)) {\n            throw new RangeError(`Unknown \\`METADATA_SERVER_DETECTION\\` env variable. Got \\`${value}\\`, but it should be \\`${Object.keys(exports.METADATA_SERVER_DETECTION).join('`, `')}\\`, or unset`);\n        }\n        switch (value) {\n            case 'assume-present':\n                return true;\n            case 'none':\n                return false;\n            case 'bios-only':\n                return getGCPResidency();\n            case 'ping-only':\n            // continue, we want to ping the server\n        }\n    }\n    try {\n        // If a user is instantiating several GCP libraries at the same time,\n        // this may result in multiple calls to isAvailable(), to detect the\n        // runtime environment. We use the same promise for each of these calls\n        // to reduce the network load.\n        if (cachedIsAvailableResponse === undefined) {\n            cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(), \n            // If the default HOST_ADDRESS has been overridden, we should not\n            // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n            // a non-GCP environment):\n            !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n        }\n        await cachedIsAvailableResponse;\n        return true;\n    }\n    catch (e) {\n        const err = e;\n        if (process.env.DEBUG_AUTH) {\n            console.info(err);\n        }\n        if (err.type === 'request-timeout') {\n            // If running in a GCP environment, metadata endpoint should return\n            // within ms.\n            return false;\n        }\n        if (err.response && err.response.status === 404) {\n            return false;\n        }\n        else {\n            if (!(err.response && err.response.status === 404) &&\n                // A warning is emitted if we see an unexpected err.code, or err.code\n                // is not populated:\n                (!err.code ||\n                    ![\n                        'EHOSTDOWN',\n                        'EHOSTUNREACH',\n                        'ENETUNREACH',\n                        'ENOENT',\n                        'ENOTFOUND',\n                        'ECONNREFUSED',\n                    ].includes(err.code))) {\n                let code = 'UNKNOWN';\n                if (err.code)\n                    code = err.code;\n                process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n            }\n            // Failure to resolve the metadata service means that it is not available.\n            return false;\n        }\n    }\n}\n/**\n * reset the memoized isAvailable() lookup.\n */\nfunction resetIsAvailableCache() {\n    cachedIsAvailableResponse = undefined;\n}\n/**\n * A cache for the detected GCP Residency.\n */\nexports.gcpResidencyCache = null;\n/**\n * Detects GCP Residency.\n * Caches results to reduce costs for subsequent calls.\n *\n * @see setGCPResidency for setting\n */\nfunction getGCPResidency() {\n    if (exports.gcpResidencyCache === null) {\n        setGCPResidency();\n    }\n    return exports.gcpResidencyCache;\n}\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n * @see getGCPResidency for getting\n */\nfunction setGCPResidency(value = null) {\n    exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\nfunction requestTimeout() {\n    return getGCPResidency() ? 0 : 3000;\n}\n__exportStar(__webpack_require__(/*! ./gcp-residency */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/gcp-residency.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/transporters.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */\nexports.DEFAULT_UNIVERSE = 'googleapis.com';\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */\nexports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\nclass AuthClient extends events_1.EventEmitter {\n    constructor(opts = {}) {\n        var _a, _b, _c, _d, _e;\n        super();\n        this.credentials = {};\n        this.eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n        this.forceRefreshOnFailure = false;\n        this.universeDomain = exports.DEFAULT_UNIVERSE;\n        const options = (0, util_1.originalOrCamelOptions)(opts);\n        // Shared auth options\n        this.apiKey = opts.apiKey;\n        this.projectId = (_a = options.get('project_id')) !== null && _a !== void 0 ? _a : null;\n        this.quotaProjectId = options.get('quota_project_id');\n        this.credentials = (_b = options.get('credentials')) !== null && _b !== void 0 ? _b : {};\n        this.universeDomain = (_c = options.get('universe_domain')) !== null && _c !== void 0 ? _c : exports.DEFAULT_UNIVERSE;\n        // Shared client options\n        this.transporter = (_d = opts.transporter) !== null && _d !== void 0 ? _d : new transporters_1.DefaultTransporter();\n        if (opts.transporterOptions) {\n            this.transporter.defaults = opts.transporterOptions;\n        }\n        if (opts.eagerRefreshThresholdMillis) {\n            this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = (_e = opts.forceRefreshOnFailure) !== null && _e !== void 0 ? _e : false;\n    }\n    /**\n     * Return the {@link Gaxios `Gaxios`} instance from the {@link AuthClient.transporter}.\n     *\n     * @expiremental\n     */\n    get gaxios() {\n        if (this.transporter instanceof gaxios_1.Gaxios) {\n            return this.transporter;\n        }\n        else if (this.transporter instanceof transporters_1.DefaultTransporter) {\n            return this.transporter.instance;\n        }\n        else if ('instance' in this.transporter &&\n            this.transporter.instance instanceof gaxios_1.Gaxios) {\n            return this.transporter.instance;\n        }\n        return null;\n    }\n    /**\n     * Sets the auth credentials.\n     */\n    setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers object to append additional headers to.\n     */\n    addSharedMetadataHeaders(headers) {\n        // quota_project_id, stored in application_default_credentials.json, is set in\n        // the x-goog-user-project header, to indicate an alternate account for\n        // billing and quota:\n        if (!headers['x-goog-user-project'] && // don't override a value the user sets.\n            this.quotaProjectId) {\n            headers['x-goog-user-project'] = this.quotaProjectId;\n        }\n        return headers;\n    }\n    /**\n     * Retry config for Auth-related requests.\n     *\n     * @remarks\n     *\n     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n     * config as some downstream APIs would prefer if customers explicitly enable retries,\n     * such as GCS.\n     */\n    static get RETRY_CONFIG() {\n        return {\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE'],\n            },\n        };\n    }\n}\nexports.AuthClient = AuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsclient.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsclient.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = __webpack_require__(/*! ./awsrequestsigner */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst defaultawssecuritycredentialssupplier_1 = __webpack_require__(/*! ./defaultawssecuritycredentialssupplier */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get('credential_source');\n        const awsSecurityCredentialsSupplier = opts.get('aws_security_credentials_supplier');\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !awsSecurityCredentialsSupplier) {\n            throw new Error('A credential source or AWS security credentials supplier must be specified.');\n        }\n        if (credentialSource && awsSecurityCredentialsSupplier) {\n            throw new Error('Only one of credential source or AWS security credentials supplier can be specified.');\n        }\n        if (awsSecurityCredentialsSupplier) {\n            this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;\n            this.regionalCredVerificationUrl =\n                __classPrivateFieldGet(_a, _a, \"f\", _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL);\n            this.credentialSourceType = 'programmatic';\n        }\n        else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            this.environmentId = credentialSourceOpts.get('environment_id');\n            // This is only required if the AWS region is not available in the\n            // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n            const regionUrl = credentialSourceOpts.get('region_url');\n            // This is only required if AWS security credentials are not available in\n            // environment variables.\n            const securityCredentialsUrl = credentialSourceOpts.get('url');\n            const imdsV2SessionTokenUrl = credentialSourceOpts.get('imdsv2_session_token_url');\n            this.awsSecurityCredentialsSupplier =\n                new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({\n                    regionUrl: regionUrl,\n                    securityCredentialsUrl: securityCredentialsUrl,\n                    imdsV2SessionTokenUrl: imdsV2SessionTokenUrl,\n                });\n            this.regionalCredVerificationUrl = credentialSourceOpts.get('regional_cred_verification_url');\n            this.credentialSourceType = 'aws';\n            // Data validators.\n            this.validateEnvironmentId();\n        }\n        this.awsRequestSigner = null;\n        this.region = '';\n    }\n    validateEnvironmentId() {\n        var _b;\n        const match = (_b = this.environmentId) === null || _b === void 0 ? void 0 : _b.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        }\n        else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint. This will call the\n     * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS\n     * Security Credentials, then use them to create a signed AWS STS request that\n     * can be exchanged for a GCP access token.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n                return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            ..._a.RETRY_CONFIG,\n            url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n            method: 'POST',\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'Authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = Object.assign({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            'x-goog-cloud-target-resource': this.audience,\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        for (const key in extendedHeaders) {\n            reformattedHeader.push({\n                key,\n                value: extendedHeaders[key],\n            });\n        }\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader,\n        }));\n    }\n}\nexports.AwsClient = AwsClient;\n_a = AwsClient;\n_AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = { value: 'https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15' };\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\nAwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/\nAwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsRequestSigner = void 0;\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/crypto.js\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */\nconst AWS_REQUEST_TYPE = 'aws4_request';\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nclass AwsRequestSigner {\n    /**\n     * Instantiates an AWS API request signer used to send authenticated signed\n     * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n     * This also provides a mechanism to generate the signed request without\n     * sending it.\n     * @param getCredentials A mechanism to retrieve AWS security credentials\n     *   when needed.\n     * @param region The AWS region to use.\n     */\n    constructor(getCredentials, region) {\n        this.getCredentials = getCredentials;\n        this.region = region;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Generates the signed request for the provided HTTP request for calling\n     * an AWS API. This follows the steps described at:\n     * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n     * @param amzOptions The AWS request options that need to be signed.\n     * @return A promise that resolves with the GaxiosOptions containing the\n     *   signed HTTP request parameters.\n     */\n    async getRequestOptions(amzOptions) {\n        if (!amzOptions.url) {\n            throw new Error('\"url\" is required in \"amzOptions\"');\n        }\n        // Stringify JSON requests. This will be set in the request body of the\n        // generated signed request.\n        const requestPayloadData = typeof amzOptions.data === 'object'\n            ? JSON.stringify(amzOptions.data)\n            : amzOptions.data;\n        const url = amzOptions.url;\n        const method = amzOptions.method || 'GET';\n        const requestPayload = amzOptions.body || requestPayloadData;\n        const additionalAmzHeaders = amzOptions.headers;\n        const awsSecurityCredentials = await this.getCredentials();\n        const uri = new URL(url);\n        const headerMap = await generateAuthenticationHeaderMap({\n            crypto: this.crypto,\n            host: uri.host,\n            canonicalUri: uri.pathname,\n            canonicalQuerystring: uri.search.substr(1),\n            method,\n            region: this.region,\n            securityCredentials: awsSecurityCredentials,\n            requestPayload,\n            additionalAmzHeaders,\n        });\n        // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n        const headers = Object.assign(\n        // Add x-amz-date if available.\n        headerMap.amzDate ? { 'x-amz-date': headerMap.amzDate } : {}, {\n            Authorization: headerMap.authorizationHeader,\n            host: uri.host,\n        }, additionalAmzHeaders || {});\n        if (awsSecurityCredentials.token) {\n            Object.assign(headers, {\n                'x-amz-security-token': awsSecurityCredentials.token,\n            });\n        }\n        const awsSignedReq = {\n            url,\n            method: method,\n            headers,\n        };\n        if (typeof requestPayload !== 'undefined') {\n            awsSignedReq.body = requestPayload;\n        }\n        return awsSignedReq;\n    }\n}\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */\nasync function sign(crypto, key, msg) {\n    return await crypto.signWithHmacSha256(key, msg);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */\nasync function getSigningKey(crypto, key, dateStamp, region, serviceName) {\n    const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\n    const kRegion = await sign(crypto, kDate, region);\n    const kService = await sign(crypto, kRegion, serviceName);\n    const kSigning = await sign(crypto, kService, 'aws4_request');\n    return kSigning;\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */\nasync function generateAuthenticationHeaderMap(options) {\n    const additionalAmzHeaders = options.additionalAmzHeaders || {};\n    const requestPayload = options.requestPayload || '';\n    // iam.amazonaws.com host => iam service.\n    // sts.us-east-2.amazonaws.com => sts service.\n    const serviceName = options.host.split('.')[0];\n    const now = new Date();\n    // Format: '%Y%m%dT%H%M%SZ'.\n    const amzDate = now\n        .toISOString()\n        .replace(/[-:]/g, '')\n        .replace(/\\.[0-9]+/, '');\n    // Format: '%Y%m%d'.\n    const dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, '');\n    // Change all additional headers to be lower case.\n    const reformattedAdditionalAmzHeaders = {};\n    Object.keys(additionalAmzHeaders).forEach(key => {\n        reformattedAdditionalAmzHeaders[key.toLowerCase()] =\n            additionalAmzHeaders[key];\n    });\n    // Add AWS token if available.\n    if (options.securityCredentials.token) {\n        reformattedAdditionalAmzHeaders['x-amz-security-token'] =\n            options.securityCredentials.token;\n    }\n    // Header keys need to be sorted alphabetically.\n    const amzHeaders = Object.assign({\n        host: options.host,\n    }, \n    // Previously the date was not fixed with x-amz- and could be provided manually.\n    // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n    reformattedAdditionalAmzHeaders.date ? {} : { 'x-amz-date': amzDate }, reformattedAdditionalAmzHeaders);\n    let canonicalHeaders = '';\n    const signedHeadersList = Object.keys(amzHeaders).sort();\n    signedHeadersList.forEach(key => {\n        canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n    });\n    const signedHeaders = signedHeadersList.join(';');\n    const payloadHash = await options.crypto.sha256DigestHex(requestPayload);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n    const canonicalRequest = `${options.method}\\n` +\n        `${options.canonicalUri}\\n` +\n        `${options.canonicalQuerystring}\\n` +\n        `${canonicalHeaders}\\n` +\n        `${signedHeaders}\\n` +\n        `${payloadHash}`;\n    const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n    const stringToSign = `${AWS_ALGORITHM}\\n` +\n        `${amzDate}\\n` +\n        `${credentialScope}\\n` +\n        (await options.crypto.sha256DigestHex(canonicalRequest));\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n    const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n    const signature = await sign(options.crypto, signingKey, stringToSign);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` +\n        `${credentialScope}, SignedHeaders=${signedHeaders}, ` +\n        `Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;\n    return {\n        // Do not return x-amz-date if date is available.\n        amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n        authorizationHeader,\n        canonicalQuerystring: options.canonicalQuerystring,\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _BaseExternalAccountClient_instances, _BaseExternalAccountClient_pendingAccessToken, _BaseExternalAccountClient_internalRefreshAccessTokenAsync;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseExternalAccountClient = exports.DEFAULT_UNIVERSE = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst sts = __webpack_require__(/*! ./stscredentials */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/stscredentials.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** Default impersonated token lifespan in seconds.*/\nconst DEFAULT_TOKEN_LIFESPAN = 3600;\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/**\n * Cloud resource manager URL used to retrieve project information.\n *\n * @deprecated use {@link BaseExternalAccountClient.cloudResourceManagerURL} instead\n **/\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\nconst WORKFORCE_AUDIENCE_PATTERN = '//iam\\\\.googleapis\\\\.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/token';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/package.json\");\n/**\n * For backwards compatibility.\n */\nvar authclient_2 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", ({ enumerable: true, get: function () { return authclient_2.DEFAULT_UNIVERSE; } }));\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\n    /**\n     * Instantiate a BaseExternalAccountClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        var _a;\n        super({ ...options, ...additionalOptions });\n        _BaseExternalAccountClient_instances.add(this);\n        /**\n         * A pending access token request. Used for concurrent calls.\n         */\n        _BaseExternalAccountClient_pendingAccessToken.set(this, null);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const type = opts.get('type');\n        if (type && type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n            throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` +\n                `received \"${options.type}\"`);\n        }\n        const clientId = opts.get('client_id');\n        const clientSecret = opts.get('client_secret');\n        const tokenUrl = (_a = opts.get('token_url')) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain);\n        const subjectTokenType = opts.get('subject_token_type');\n        const workforcePoolUserProject = opts.get('workforce_pool_user_project');\n        const serviceAccountImpersonationUrl = opts.get('service_account_impersonation_url');\n        const serviceAccountImpersonation = opts.get('service_account_impersonation');\n        const serviceAccountImpersonationLifetime = (0, util_1.originalOrCamelOptions)(serviceAccountImpersonation).get('token_lifetime_seconds');\n        this.cloudResourceManagerURL = new URL(opts.get('cloud_resource_manager_url') ||\n            `https://cloudresourcemanager.${this.universeDomain}/v1/projects/`);\n        if (clientId) {\n            this.clientAuth = {\n                confidentialClientType: 'basic',\n                clientId,\n                clientSecret,\n            };\n        }\n        this.stsCredential = new sts.StsCredentials(tokenUrl, this.clientAuth);\n        this.scopes = opts.get('scopes') || [DEFAULT_OAUTH_SCOPE];\n        this.cachedAccessToken = null;\n        this.audience = opts.get('audience');\n        this.subjectTokenType = subjectTokenType;\n        this.workforcePoolUserProject = workforcePoolUserProject;\n        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n        if (this.workforcePoolUserProject &&\n            !this.audience.match(workforceAudiencePattern)) {\n            throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' +\n                'credentials.');\n        }\n        this.serviceAccountImpersonationUrl = serviceAccountImpersonationUrl;\n        this.serviceAccountImpersonationLifetime =\n            serviceAccountImpersonationLifetime;\n        if (this.serviceAccountImpersonationLifetime) {\n            this.configLifetimeRequested = true;\n        }\n        else {\n            this.configLifetimeRequested = false;\n            this.serviceAccountImpersonationLifetime = DEFAULT_TOKEN_LIFESPAN;\n        }\n        this.projectNumber = this.getProjectNumber(this.audience);\n        this.supplierContext = {\n            audience: this.audience,\n            subjectTokenType: this.subjectTokenType,\n            transporter: this.transporter,\n        };\n    }\n    /** The service account email to be impersonated, if available. */\n    getServiceAccountEmail() {\n        var _a;\n        if (this.serviceAccountImpersonationUrl) {\n            if (this.serviceAccountImpersonationUrl.length > 256) {\n                /**\n                 * Prevents DOS attacks.\n                 * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/84}\n                 **/\n                throw new RangeError(`URL is too long: ${this.serviceAccountImpersonationUrl}`);\n            }\n            // Parse email from URL. The formal looks as follows:\n            // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n            const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n            const result = re.exec(this.serviceAccountImpersonationUrl);\n            return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n        }\n        return null;\n    }\n    /**\n     * Provides a mechanism to inject GCP access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options, is retrieved.\n     * @param credentials The Credentials object to set on the current client.\n     */\n    setCredentials(credentials) {\n        super.setCredentials(credentials);\n        this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool or current workforce pool if\n     *   determinable. For workforce pool credential, it returns the project ID\n     *   corresponding to the workforcePoolUserProject.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */\n    async getProjectId() {\n        const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n        if (this.projectId) {\n            // Return previously determined project ID.\n            return this.projectId;\n        }\n        else if (projectNumber) {\n            // Preferable not to use request() to avoid retrial policies.\n            const headers = await this.getRequestHeaders();\n            const response = await this.transporter.request({\n                ...BaseExternalAccountClient.RETRY_CONFIG,\n                headers,\n                url: `${this.cloudResourceManagerURL.toString()}${projectNumber}`,\n                responseType: 'json',\n            });\n            this.projectId = response.data.projectId;\n            return this.projectId;\n        }\n        return null;\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */\n    async refreshAccessTokenAsync() {\n        // Use an existing access token request, or cache a new one\n        __classPrivateFieldSet(this, _BaseExternalAccountClient_pendingAccessToken, __classPrivateFieldGet(this, _BaseExternalAccountClient_pendingAccessToken, \"f\") || __classPrivateFieldGet(this, _BaseExternalAccountClient_instances, \"m\", _BaseExternalAccountClient_internalRefreshAccessTokenAsync).call(this), \"f\");\n        try {\n            return await __classPrivateFieldGet(this, _BaseExternalAccountClient_pendingAccessToken, \"f\");\n        }\n        finally {\n            // clear pending access token for future requests\n            __classPrivateFieldSet(this, _BaseExternalAccountClient_pendingAccessToken, null, \"f\");\n        }\n    }\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */\n    getProjectNumber(audience) {\n        // STS audience pattern:\n        // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n        const match = audience.match(/\\/projects\\/([^/]+)/);\n        if (!match) {\n            return null;\n        }\n        return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */\n    async getImpersonatedAccessToken(token) {\n        const opts = {\n            ...BaseExternalAccountClient.RETRY_CONFIG,\n            url: this.serviceAccountImpersonationUrl,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n            data: {\n                scope: this.getScopesArray(),\n                lifetime: this.serviceAccountImpersonationLifetime + 's',\n            },\n            responseType: 'json',\n        };\n        const response = await this.transporter.request(opts);\n        const successResponse = response.data;\n        return {\n            access_token: successResponse.accessToken,\n            // Convert from ISO format to timestamp.\n            expiry_date: new Date(successResponse.expireTime).getTime(),\n            res: response,\n        };\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(accessToken) {\n        const now = new Date().getTime();\n        return accessToken.expiry_date\n            ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */\n    getScopesArray() {\n        // Since scopes can be provided as string or array, the type should\n        // be normalized.\n        if (typeof this.scopes === 'string') {\n            return [this.scopes];\n        }\n        return this.scopes || [DEFAULT_OAUTH_SCOPE];\n    }\n    getMetricsHeaderValue() {\n        const nodeVersion = process.version.replace(/^v/, '');\n        const saImpersonation = this.serviceAccountImpersonationUrl !== undefined;\n        const credentialSourceType = this.credentialSourceType\n            ? this.credentialSourceType\n            : 'unknown';\n        return `gl-node/${nodeVersion} auth/${pkg.version} google-byoid-sdk source/${credentialSourceType} sa-impersonation/${saImpersonation} config-lifetime/${this.configLifetimeRequested}`;\n    }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\n_BaseExternalAccountClient_pendingAccessToken = new WeakMap(), _BaseExternalAccountClient_instances = new WeakSet(), _BaseExternalAccountClient_internalRefreshAccessTokenAsync = async function _BaseExternalAccountClient_internalRefreshAccessTokenAsync() {\n    // Retrieve the external credential.\n    const subjectToken = await this.retrieveSubjectToken();\n    // Construct the STS credentials options.\n    const stsCredentialsOptions = {\n        grantType: STS_GRANT_TYPE,\n        audience: this.audience,\n        requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n        subjectToken,\n        subjectTokenType: this.subjectTokenType,\n        // generateAccessToken requires the provided access token to have\n        // scopes:\n        // https://www.googleapis.com/auth/iam or\n        // https://www.googleapis.com/auth/cloud-platform\n        // The new service account access token scopes will match the user\n        // provided ones.\n        scope: this.serviceAccountImpersonationUrl\n            ? [DEFAULT_OAUTH_SCOPE]\n            : this.getScopesArray(),\n    };\n    // Exchange the external credentials for a GCP access token.\n    // Client auth is prioritized over passing the workforcePoolUserProject\n    // parameter for STS token exchange.\n    const additionalOptions = !this.clientAuth && this.workforcePoolUserProject\n        ? { userProject: this.workforcePoolUserProject }\n        : undefined;\n    const additionalHeaders = {\n        'x-goog-api-client': this.getMetricsHeaderValue(),\n    };\n    const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, additionalHeaders, additionalOptions);\n    if (this.serviceAccountImpersonationUrl) {\n        this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n    }\n    else if (stsResponse.expires_in) {\n        // Save response in cached access token.\n        this.cachedAccessToken = {\n            access_token: stsResponse.access_token,\n            expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n            res: stsResponse.res,\n        };\n    }\n    else {\n        // Save response in cached access token.\n        this.cachedAccessToken = {\n            access_token: stsResponse.access_token,\n            res: stsResponse.res,\n        };\n    }\n    // Save credentials.\n    this.credentials = {};\n    Object.assign(this.credentials, this.cachedAccessToken);\n    delete this.credentials.res;\n    // Trigger tokens event to notify external listeners.\n    this.emit('tokens', {\n        refresh_token: null,\n        expiry_date: this.cachedAccessToken.expiry_date,\n        access_token: this.cachedAccessToken.access_token,\n        token_type: 'Bearer',\n        id_token: null,\n    });\n    // Return the cached access token.\n    return this.cachedAccessToken;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/computeclient.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/computeclient.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Compute = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/index.js\");\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://cloud.google.com/compute/docs/access/authenticate-workloads#applications\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n        this.scopes = Array.isArray(options.scopes)\n            ? options.scopes\n            : options.scopes\n                ? [options.scopes]\n                : [];\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n        let data;\n        try {\n            const instanceOptions = {\n                property: tokenPath,\n            };\n            if (this.scopes.length > 0) {\n                instanceOptions.params = {\n                    scopes: this.scopes.join(','),\n                };\n            }\n            data = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            if (e instanceof gaxios_1.GaxiosError) {\n                e.message = `Could not refresh access token: ${e.message}`;\n                this.wrapError(e);\n            }\n            throw e;\n        }\n        const tokens = data;\n        if (data && data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res: null };\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` +\n            `?format=full&audience=${targetAudience}`;\n        let idToken;\n        try {\n            const instanceOptions = {\n                property: idTokenPath,\n            };\n            idToken = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Could not fetch ID token: ${e.message}`;\n            }\n            throw e;\n        }\n        return idToken;\n    }\n    wrapError(e) {\n        const res = e.response;\n        if (res && res.status) {\n            e.status = res.status;\n            if (res.status === 403) {\n                e.message =\n                    'A Forbidden error was returned while attempting to retrieve an access ' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have the correct permission scopes specified: ' +\n                        e.message;\n            }\n            else if (res.status === 404) {\n                e.message =\n                    'A Not Found error was returned while attempting to retrieve an access' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have any permission scopes specified: ' +\n                        e.message;\n            }\n        }\n    }\n}\nexports.Compute = Compute;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2NvbXB1dGVjbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2YsaUJBQWlCLG1CQUFPLENBQUMsOERBQVE7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsNkdBQWM7QUFDMUMsdUJBQXVCLG1CQUFPLENBQUMsa0lBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHlCQUF5QjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELFVBQVU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELHlCQUF5QjtBQUN6RSxxQ0FBcUMsZUFBZTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsVUFBVTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2NvbXB1dGVjbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxMyBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tcHV0ZSA9IHZvaWQgMDtcbmNvbnN0IGdheGlvc18xID0gcmVxdWlyZShcImdheGlvc1wiKTtcbmNvbnN0IGdjcE1ldGFkYXRhID0gcmVxdWlyZShcImdjcC1tZXRhZGF0YVwiKTtcbmNvbnN0IG9hdXRoMmNsaWVudF8xID0gcmVxdWlyZShcIi4vb2F1dGgyY2xpZW50XCIpO1xuY2xhc3MgQ29tcHV0ZSBleHRlbmRzIG9hdXRoMmNsaWVudF8xLk9BdXRoMkNsaWVudCB7XG4gICAgLyoqXG4gICAgICogR29vZ2xlIENvbXB1dGUgRW5naW5lIHNlcnZpY2UgYWNjb3VudCBjcmVkZW50aWFscy5cbiAgICAgKlxuICAgICAqIFJldHJpZXZlIGFjY2VzcyB0b2tlbiBmcm9tIHRoZSBtZXRhZGF0YSBzZXJ2ZXIuXG4gICAgICogU2VlOiBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vY29tcHV0ZS9kb2NzL2FjY2Vzcy9hdXRoZW50aWNhdGUtd29ya2xvYWRzI2FwcGxpY2F0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgLy8gU3RhcnQgd2l0aCBhbiBleHBpcmVkIHJlZnJlc2ggdG9rZW4sIHdoaWNoIHdpbGwgYXV0b21hdGljYWxseSBiZVxuICAgICAgICAvLyByZWZyZXNoZWQgYmVmb3JlIHRoZSBmaXJzdCBBUEkgY2FsbCBpcyBtYWRlLlxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID0geyBleHBpcnlfZGF0ZTogMSwgcmVmcmVzaF90b2tlbjogJ2NvbXB1dGUtcGxhY2Vob2xkZXInIH07XG4gICAgICAgIHRoaXMuc2VydmljZUFjY291bnRFbWFpbCA9IG9wdGlvbnMuc2VydmljZUFjY291bnRFbWFpbCB8fCAnZGVmYXVsdCc7XG4gICAgICAgIHRoaXMuc2NvcGVzID0gQXJyYXkuaXNBcnJheShvcHRpb25zLnNjb3BlcylcbiAgICAgICAgICAgID8gb3B0aW9ucy5zY29wZXNcbiAgICAgICAgICAgIDogb3B0aW9ucy5zY29wZXNcbiAgICAgICAgICAgICAgICA/IFtvcHRpb25zLnNjb3Blc11cbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoZXMgdGhlIGFjY2VzcyB0b2tlbi5cbiAgICAgKiBAcGFyYW0gcmVmcmVzaFRva2VuIFVudXNlZCBwYXJhbWV0ZXJcbiAgICAgKi9cbiAgICBhc3luYyByZWZyZXNoVG9rZW5Ob0NhY2hlKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICByZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgY29uc3QgdG9rZW5QYXRoID0gYHNlcnZpY2UtYWNjb3VudHMvJHt0aGlzLnNlcnZpY2VBY2NvdW50RW1haWx9L3Rva2VuYDtcbiAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IHRva2VuUGF0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy5zY29wZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlT3B0aW9ucy5wYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlczogdGhpcy5zY29wZXMuam9pbignLCcpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhID0gYXdhaXQgZ2NwTWV0YWRhdGEuaW5zdGFuY2UoaW5zdGFuY2VPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBnYXhpb3NfMS5HYXhpb3NFcnJvcikge1xuICAgICAgICAgICAgICAgIGUubWVzc2FnZSA9IGBDb3VsZCBub3QgcmVmcmVzaCBhY2Nlc3MgdG9rZW46ICR7ZS5tZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgdGhpcy53cmFwRXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRva2VucyA9IGRhdGE7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEuZXhwaXJlc19pbikge1xuICAgICAgICAgICAgdG9rZW5zLmV4cGlyeV9kYXRlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBkYXRhLmV4cGlyZXNfaW4gKiAxMDAwO1xuICAgICAgICAgICAgZGVsZXRlIHRva2Vucy5leHBpcmVzX2luO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgndG9rZW5zJywgdG9rZW5zKTtcbiAgICAgICAgcmV0dXJuIHsgdG9rZW5zLCByZXM6IG51bGwgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyBhbiBJRCB0b2tlbi5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0QXVkaWVuY2UgdGhlIGF1ZGllbmNlIGZvciB0aGUgZmV0Y2hlZCBJRCB0b2tlbi5cbiAgICAgKi9cbiAgICBhc3luYyBmZXRjaElkVG9rZW4odGFyZ2V0QXVkaWVuY2UpIHtcbiAgICAgICAgY29uc3QgaWRUb2tlblBhdGggPSBgc2VydmljZS1hY2NvdW50cy8ke3RoaXMuc2VydmljZUFjY291bnRFbWFpbH0vaWRlbnRpdHlgICtcbiAgICAgICAgICAgIGA/Zm9ybWF0PWZ1bGwmYXVkaWVuY2U9JHt0YXJnZXRBdWRpZW5jZX1gO1xuICAgICAgICBsZXQgaWRUb2tlbjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogaWRUb2tlblBhdGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWRUb2tlbiA9IGF3YWl0IGdjcE1ldGFkYXRhLmluc3RhbmNlKGluc3RhbmNlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlLm1lc3NhZ2UgPSBgQ291bGQgbm90IGZldGNoIElEIHRva2VuOiAke2UubWVzc2FnZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWRUb2tlbjtcbiAgICB9XG4gICAgd3JhcEVycm9yKGUpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZS5yZXNwb25zZTtcbiAgICAgICAgaWYgKHJlcyAmJiByZXMuc3RhdHVzKSB7XG4gICAgICAgICAgICBlLnN0YXR1cyA9IHJlcy5zdGF0dXM7XG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgICAgICAgICAgZS5tZXNzYWdlID1cbiAgICAgICAgICAgICAgICAgICAgJ0EgRm9yYmlkZGVuIGVycm9yIHdhcyByZXR1cm5lZCB3aGlsZSBhdHRlbXB0aW5nIHRvIHJldHJpZXZlIGFuIGFjY2VzcyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0b2tlbiBmb3IgdGhlIENvbXB1dGUgRW5naW5lIGJ1aWx0LWluIHNlcnZpY2UgYWNjb3VudC4gVGhpcyBtYXkgYmUgYmVjYXVzZSB0aGUgQ29tcHV0ZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdFbmdpbmUgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSB0aGUgY29ycmVjdCBwZXJtaXNzaW9uIHNjb3BlcyBzcGVjaWZpZWQ6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgZS5tZXNzYWdlID1cbiAgICAgICAgICAgICAgICAgICAgJ0EgTm90IEZvdW5kIGVycm9yIHdhcyByZXR1cm5lZCB3aGlsZSBhdHRlbXB0aW5nIHRvIHJldHJpZXZlIGFuIGFjY2VzcycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Rva2VuIGZvciB0aGUgQ29tcHV0ZSBFbmdpbmUgYnVpbHQtaW4gc2VydmljZSBhY2NvdW50LiBUaGlzIG1heSBiZSBiZWNhdXNlIHRoZSBDb21wdXRlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0VuZ2luZSBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIGFueSBwZXJtaXNzaW9uIHNjb3BlcyBzcGVjaWZpZWQ6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5tZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Db21wdXRlID0gQ29tcHV0ZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/computeclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DefaultAwsSecurityCredentialsSupplier_instances, _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultAwsSecurityCredentialsSupplier = void 0;\n/**\n * Internal AWS security credentials supplier implementation used by {@link AwsClient}\n * when a credential source is provided instead of a user defined supplier.\n * The logic is summarized as:\n * 1. If imdsv2_session_token_url is provided in the credential source, then\n *    fetch the aws session token and include it in the headers of the\n *    metadata requests. This is a requirement for IDMSv2 but optional\n *    for IDMSv1.\n * 2. Retrieve AWS region from availability-zone.\n * 3a. Check AWS credentials in environment variables. If not found, get\n *     from security-credentials endpoint.\n * 3b. Get AWS credentials from security-credentials endpoint. In order\n *     to retrieve this, the AWS role needs to be determined by calling\n *     security-credentials endpoint without any argument. Then the\n *     credentials can be retrieved via: security-credentials/role_name\n * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n * 5. Inject x-goog-cloud-target-resource into header and serialize the\n *    signed request. This will be the subject-token to pass to GCP STS.\n */\nclass DefaultAwsSecurityCredentialsSupplier {\n    /**\n     * Instantiates a new DefaultAwsSecurityCredentialsSupplier using information\n     * from the credential_source stored in the ADC file.\n     * @param opts The default aws security credentials supplier options object to\n     *   build the supplier with.\n     */\n    constructor(opts) {\n        _DefaultAwsSecurityCredentialsSupplier_instances.add(this);\n        this.regionUrl = opts.regionUrl;\n        this.securityCredentialsUrl = opts.securityCredentialsUrl;\n        this.imdsV2SessionTokenUrl = opts.imdsV2SessionTokenUrl;\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n    }\n    /**\n     * Returns the active AWS region. This first checks to see if the region\n     * is available as an environment variable. If it is not, then the supplier\n     * will call the region URL.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link AwsClient}, contains the requested audience and subject token type\n     *   for the external account identity.\n     * @return A promise that resolves with the AWS region string.\n     */\n    async getAwsRegion(context) {\n        // Priority order for region determination:\n        // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n        if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get)) {\n            return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get);\n        }\n        const metadataHeaders = {};\n        if (!__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get) && this.imdsV2SessionTokenUrl) {\n            metadataHeaders['x-aws-ec2-metadata-token'] =\n                await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n        }\n        if (!this.regionUrl) {\n            throw new Error('Unable to determine AWS region due to missing ' +\n                '\"options.credential_source.region_url\"');\n        }\n        const opts = {\n            ...this.additionalGaxiosOptions,\n            url: this.regionUrl,\n            method: 'GET',\n            responseType: 'text',\n            headers: metadataHeaders,\n        };\n        const response = await context.transporter.request(opts);\n        // Remove last character. For example, if us-east-2b is returned,\n        // the region would be us-east-2.\n        return response.data.substr(0, response.data.length - 1);\n    }\n    /**\n     * Returns AWS security credentials. This first checks to see if the credentials\n     * is available as environment variables. If it is not, then the supplier\n     * will call the security credentials URL.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link AwsClient}, contains the requested audience and subject token type\n     *   for the external account identity.\n     * @return A promise that resolves with the AWS security credentials.\n     */\n    async getAwsSecurityCredentials(context) {\n        // Check environment variables for permanent credentials first.\n        // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n        if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get)) {\n            return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get);\n        }\n        const metadataHeaders = {};\n        if (this.imdsV2SessionTokenUrl) {\n            metadataHeaders['x-aws-ec2-metadata-token'] =\n                await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n        }\n        // Since the role on a VM can change, we don't need to cache it.\n        const roleName = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName).call(this, metadataHeaders, context.transporter);\n        // Temporary credentials typically last for several hours.\n        // Expiration is returned in response.\n        // Consider future optimization of this logic to cache AWS tokens\n        // until their natural expiration.\n        const awsCreds = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials).call(this, roleName, metadataHeaders, context.transporter);\n        return {\n            accessKeyId: awsCreds.AccessKeyId,\n            secretAccessKey: awsCreds.SecretAccessKey,\n            token: awsCreds.Token,\n        };\n    }\n}\nexports.DefaultAwsSecurityCredentialsSupplier = DefaultAwsSecurityCredentialsSupplier;\n_DefaultAwsSecurityCredentialsSupplier_instances = new WeakSet(), _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken = \n/**\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the IMDSv2 Session Token.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken(transporter) {\n    const opts = {\n        ...this.additionalGaxiosOptions,\n        url: this.imdsV2SessionTokenUrl,\n        method: 'PUT',\n        responseType: 'text',\n        headers: { 'x-aws-ec2-metadata-token-ttl-seconds': '300' },\n    };\n    const response = await transporter.request(opts);\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName = \n/**\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the assigned role to the current\n *   AWS VM. This is needed for calling the security-credentials endpoint.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName(headers, transporter) {\n    if (!this.securityCredentialsUrl) {\n        throw new Error('Unable to determine AWS role name due to missing ' +\n            '\"options.credential_source.url\"');\n    }\n    const opts = {\n        ...this.additionalGaxiosOptions,\n        url: this.securityCredentialsUrl,\n        method: 'GET',\n        responseType: 'text',\n        headers: headers,\n    };\n    const response = await transporter.request(opts);\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials = \n/**\n * Retrieves the temporary AWS credentials by calling the security-credentials\n * endpoint as specified in the `credential_source` object.\n * @param roleName The role attached to the current VM.\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the temporary AWS credentials\n *   needed for creating the GetCallerIdentity signed request.\n */\nasync function _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials(roleName, headers, transporter) {\n    const response = await transporter.request({\n        ...this.additionalGaxiosOptions,\n        url: `${this.securityCredentialsUrl}/${roleName}`,\n        responseType: 'json',\n        headers: headers,\n    });\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get() {\n    // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n    // Only one is required.\n    return (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'] || null);\n}, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get() {\n    // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n    if (process.env['AWS_ACCESS_KEY_ID'] &&\n        process.env['AWS_SECRET_ACCESS_KEY']) {\n        return {\n            accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n            secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n            token: process.env['AWS_SESSION_TOKEN'],\n        };\n    }\n    return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2RlZmF1bHRhd3NzZWN1cml0eWNyZWRlbnRpYWxzc3VwcGxpZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2Q0FBNkM7QUFDN0M7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQ0FBc0M7QUFDN0QsVUFBVSxnQkFBZ0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0NBQXNDO0FBQzdELFVBQVUsZ0JBQWdCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsK0NBQStDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw0QkFBNEIsR0FBRyxTQUFTO0FBQ3hEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9kZWZhdWx0YXdzc2VjdXJpdHljcmVkZW50aWFsc3N1cHBsaWVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9pbnN0YW5jZXMsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2dldEltZHNWMlNlc3Npb25Ub2tlbiwgX0RlZmF1bHRBd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXJfZ2V0QXdzUm9sZU5hbWUsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX3JldHJpZXZlQXdzU2VjdXJpdHlDcmVkZW50aWFscywgX0RlZmF1bHRBd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXJfcmVnaW9uRnJvbUVudl9nZXQsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX3NlY3VyaXR5Q3JlZGVudGlhbHNGcm9tRW52X2dldDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllciA9IHZvaWQgMDtcbi8qKlxuICogSW50ZXJuYWwgQVdTIHNlY3VyaXR5IGNyZWRlbnRpYWxzIHN1cHBsaWVyIGltcGxlbWVudGF0aW9uIHVzZWQgYnkge0BsaW5rIEF3c0NsaWVudH1cbiAqIHdoZW4gYSBjcmVkZW50aWFsIHNvdXJjZSBpcyBwcm92aWRlZCBpbnN0ZWFkIG9mIGEgdXNlciBkZWZpbmVkIHN1cHBsaWVyLlxuICogVGhlIGxvZ2ljIGlzIHN1bW1hcml6ZWQgYXM6XG4gKiAxLiBJZiBpbWRzdjJfc2Vzc2lvbl90b2tlbl91cmwgaXMgcHJvdmlkZWQgaW4gdGhlIGNyZWRlbnRpYWwgc291cmNlLCB0aGVuXG4gKiAgICBmZXRjaCB0aGUgYXdzIHNlc3Npb24gdG9rZW4gYW5kIGluY2x1ZGUgaXQgaW4gdGhlIGhlYWRlcnMgb2YgdGhlXG4gKiAgICBtZXRhZGF0YSByZXF1ZXN0cy4gVGhpcyBpcyBhIHJlcXVpcmVtZW50IGZvciBJRE1TdjIgYnV0IG9wdGlvbmFsXG4gKiAgICBmb3IgSURNU3YxLlxuICogMi4gUmV0cmlldmUgQVdTIHJlZ2lvbiBmcm9tIGF2YWlsYWJpbGl0eS16b25lLlxuICogM2EuIENoZWNrIEFXUyBjcmVkZW50aWFscyBpbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIElmIG5vdCBmb3VuZCwgZ2V0XG4gKiAgICAgZnJvbSBzZWN1cml0eS1jcmVkZW50aWFscyBlbmRwb2ludC5cbiAqIDNiLiBHZXQgQVdTIGNyZWRlbnRpYWxzIGZyb20gc2VjdXJpdHktY3JlZGVudGlhbHMgZW5kcG9pbnQuIEluIG9yZGVyXG4gKiAgICAgdG8gcmV0cmlldmUgdGhpcywgdGhlIEFXUyByb2xlIG5lZWRzIHRvIGJlIGRldGVybWluZWQgYnkgY2FsbGluZ1xuICogICAgIHNlY3VyaXR5LWNyZWRlbnRpYWxzIGVuZHBvaW50IHdpdGhvdXQgYW55IGFyZ3VtZW50LiBUaGVuIHRoZVxuICogICAgIGNyZWRlbnRpYWxzIGNhbiBiZSByZXRyaWV2ZWQgdmlhOiBzZWN1cml0eS1jcmVkZW50aWFscy9yb2xlX25hbWVcbiAqIDQuIEdlbmVyYXRlIHRoZSBzaWduZWQgcmVxdWVzdCB0byBBV1MgU1RTIEdldENhbGxlcklkZW50aXR5IGFjdGlvbi5cbiAqIDUuIEluamVjdCB4LWdvb2ctY2xvdWQtdGFyZ2V0LXJlc291cmNlIGludG8gaGVhZGVyIGFuZCBzZXJpYWxpemUgdGhlXG4gKiAgICBzaWduZWQgcmVxdWVzdC4gVGhpcyB3aWxsIGJlIHRoZSBzdWJqZWN0LXRva2VuIHRvIHBhc3MgdG8gR0NQIFNUUy5cbiAqL1xuY2xhc3MgRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllciB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGVzIGEgbmV3IERlZmF1bHRBd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXIgdXNpbmcgaW5mb3JtYXRpb25cbiAgICAgKiBmcm9tIHRoZSBjcmVkZW50aWFsX3NvdXJjZSBzdG9yZWQgaW4gdGhlIEFEQyBmaWxlLlxuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBkZWZhdWx0IGF3cyBzZWN1cml0eSBjcmVkZW50aWFscyBzdXBwbGllciBvcHRpb25zIG9iamVjdCB0b1xuICAgICAqICAgYnVpbGQgdGhlIHN1cHBsaWVyIHdpdGguXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICB0aGlzLnJlZ2lvblVybCA9IG9wdHMucmVnaW9uVXJsO1xuICAgICAgICB0aGlzLnNlY3VyaXR5Q3JlZGVudGlhbHNVcmwgPSBvcHRzLnNlY3VyaXR5Q3JlZGVudGlhbHNVcmw7XG4gICAgICAgIHRoaXMuaW1kc1YyU2Vzc2lvblRva2VuVXJsID0gb3B0cy5pbWRzVjJTZXNzaW9uVG9rZW5Vcmw7XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbEdheGlvc09wdGlvbnMgPSBvcHRzLmFkZGl0aW9uYWxHYXhpb3NPcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhY3RpdmUgQVdTIHJlZ2lvbi4gVGhpcyBmaXJzdCBjaGVja3MgdG8gc2VlIGlmIHRoZSByZWdpb25cbiAgICAgKiBpcyBhdmFpbGFibGUgYXMgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUuIElmIGl0IGlzIG5vdCwgdGhlbiB0aGUgc3VwcGxpZXJcbiAgICAgKiB3aWxsIGNhbGwgdGhlIHJlZ2lvbiBVUkwuXG4gICAgICogQHBhcmFtIGNvbnRleHQge0BsaW5rIEV4dGVybmFsQWNjb3VudFN1cHBsaWVyQ29udGV4dH0gZnJvbSB0aGUgY2FsbGluZ1xuICAgICAqICAge0BsaW5rIEF3c0NsaWVudH0sIGNvbnRhaW5zIHRoZSByZXF1ZXN0ZWQgYXVkaWVuY2UgYW5kIHN1YmplY3QgdG9rZW4gdHlwZVxuICAgICAqICAgZm9yIHRoZSBleHRlcm5hbCBhY2NvdW50IGlkZW50aXR5LlxuICAgICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgQVdTIHJlZ2lvbiBzdHJpbmcuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QXdzUmVnaW9uKGNvbnRleHQpIHtcbiAgICAgICAgLy8gUHJpb3JpdHkgb3JkZXIgZm9yIHJlZ2lvbiBkZXRlcm1pbmF0aW9uOlxuICAgICAgICAvLyBBV1NfUkVHSU9OID4gQVdTX0RFRkFVTFRfUkVHSU9OID4gbWV0YWRhdGEgc2VydmVyLlxuICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9pbnN0YW5jZXMsIFwiYVwiLCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9yZWdpb25Gcm9tRW52X2dldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2luc3RhbmNlcywgXCJhXCIsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX3JlZ2lvbkZyb21FbnZfZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhZGF0YUhlYWRlcnMgPSB7fTtcbiAgICAgICAgaWYgKCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2luc3RhbmNlcywgXCJhXCIsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX3JlZ2lvbkZyb21FbnZfZ2V0KSAmJiB0aGlzLmltZHNWMlNlc3Npb25Ub2tlblVybCkge1xuICAgICAgICAgICAgbWV0YWRhdGFIZWFkZXJzWyd4LWF3cy1lYzItbWV0YWRhdGEtdG9rZW4nXSA9XG4gICAgICAgICAgICAgICAgYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9pbnN0YW5jZXMsIFwibVwiLCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9nZXRJbWRzVjJTZXNzaW9uVG9rZW4pLmNhbGwodGhpcywgY29udGV4dC50cmFuc3BvcnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnJlZ2lvblVybCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZGV0ZXJtaW5lIEFXUyByZWdpb24gZHVlIHRvIG1pc3NpbmcgJyArXG4gICAgICAgICAgICAgICAgJ1wib3B0aW9ucy5jcmVkZW50aWFsX3NvdXJjZS5yZWdpb25fdXJsXCInKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgLi4udGhpcy5hZGRpdGlvbmFsR2F4aW9zT3B0aW9ucyxcbiAgICAgICAgICAgIHVybDogdGhpcy5yZWdpb25VcmwsXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAndGV4dCcsXG4gICAgICAgICAgICBoZWFkZXJzOiBtZXRhZGF0YUhlYWRlcnMsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29udGV4dC50cmFuc3BvcnRlci5yZXF1ZXN0KG9wdHMpO1xuICAgICAgICAvLyBSZW1vdmUgbGFzdCBjaGFyYWN0ZXIuIEZvciBleGFtcGxlLCBpZiB1cy1lYXN0LTJiIGlzIHJldHVybmVkLFxuICAgICAgICAvLyB0aGUgcmVnaW9uIHdvdWxkIGJlIHVzLWVhc3QtMi5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuc3Vic3RyKDAsIHJlc3BvbnNlLmRhdGEubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgQVdTIHNlY3VyaXR5IGNyZWRlbnRpYWxzLiBUaGlzIGZpcnN0IGNoZWNrcyB0byBzZWUgaWYgdGhlIGNyZWRlbnRpYWxzXG4gICAgICogaXMgYXZhaWxhYmxlIGFzIGVudmlyb25tZW50IHZhcmlhYmxlcy4gSWYgaXQgaXMgbm90LCB0aGVuIHRoZSBzdXBwbGllclxuICAgICAqIHdpbGwgY2FsbCB0aGUgc2VjdXJpdHkgY3JlZGVudGlhbHMgVVJMLlxuICAgICAqIEBwYXJhbSBjb250ZXh0IHtAbGluayBFeHRlcm5hbEFjY291bnRTdXBwbGllckNvbnRleHR9IGZyb20gdGhlIGNhbGxpbmdcbiAgICAgKiAgIHtAbGluayBBd3NDbGllbnR9LCBjb250YWlucyB0aGUgcmVxdWVzdGVkIGF1ZGllbmNlIGFuZCBzdWJqZWN0IHRva2VuIHR5cGVcbiAgICAgKiAgIGZvciB0aGUgZXh0ZXJuYWwgYWNjb3VudCBpZGVudGl0eS5cbiAgICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIEFXUyBzZWN1cml0eSBjcmVkZW50aWFscy5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRBd3NTZWN1cml0eUNyZWRlbnRpYWxzKGNvbnRleHQpIHtcbiAgICAgICAgLy8gQ2hlY2sgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBwZXJtYW5lbnQgY3JlZGVudGlhbHMgZmlyc3QuXG4gICAgICAgIC8vIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9nZW5lcmFsL2xhdGVzdC9nci9hd3Mtc2VjLWNyZWQtdHlwZXMuaHRtbFxuICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9pbnN0YW5jZXMsIFwiYVwiLCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9zZWN1cml0eUNyZWRlbnRpYWxzRnJvbUVudl9nZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9pbnN0YW5jZXMsIFwiYVwiLCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9zZWN1cml0eUNyZWRlbnRpYWxzRnJvbUVudl9nZXQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhSGVhZGVycyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5pbWRzVjJTZXNzaW9uVG9rZW5VcmwpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhSGVhZGVyc1sneC1hd3MtZWMyLW1ldGFkYXRhLXRva2VuJ10gPVxuICAgICAgICAgICAgICAgIGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0RlZmF1bHRBd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXJfaW5zdGFuY2VzLCBcIm1cIiwgX0RlZmF1bHRBd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXJfZ2V0SW1kc1YyU2Vzc2lvblRva2VuKS5jYWxsKHRoaXMsIGNvbnRleHQudHJhbnNwb3J0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNpbmNlIHRoZSByb2xlIG9uIGEgVk0gY2FuIGNoYW5nZSwgd2UgZG9uJ3QgbmVlZCB0byBjYWNoZSBpdC5cbiAgICAgICAgY29uc3Qgcm9sZU5hbWUgPSBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2luc3RhbmNlcywgXCJtXCIsIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2dldEF3c1JvbGVOYW1lKS5jYWxsKHRoaXMsIG1ldGFkYXRhSGVhZGVycywgY29udGV4dC50cmFuc3BvcnRlcik7XG4gICAgICAgIC8vIFRlbXBvcmFyeSBjcmVkZW50aWFscyB0eXBpY2FsbHkgbGFzdCBmb3Igc2V2ZXJhbCBob3Vycy5cbiAgICAgICAgLy8gRXhwaXJhdGlvbiBpcyByZXR1cm5lZCBpbiByZXNwb25zZS5cbiAgICAgICAgLy8gQ29uc2lkZXIgZnV0dXJlIG9wdGltaXphdGlvbiBvZiB0aGlzIGxvZ2ljIHRvIGNhY2hlIEFXUyB0b2tlbnNcbiAgICAgICAgLy8gdW50aWwgdGhlaXIgbmF0dXJhbCBleHBpcmF0aW9uLlxuICAgICAgICBjb25zdCBhd3NDcmVkcyA9IGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0RlZmF1bHRBd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXJfaW5zdGFuY2VzLCBcIm1cIiwgX0RlZmF1bHRBd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXJfcmV0cmlldmVBd3NTZWN1cml0eUNyZWRlbnRpYWxzKS5jYWxsKHRoaXMsIHJvbGVOYW1lLCBtZXRhZGF0YUhlYWRlcnMsIGNvbnRleHQudHJhbnNwb3J0ZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNjZXNzS2V5SWQ6IGF3c0NyZWRzLkFjY2Vzc0tleUlkLFxuICAgICAgICAgICAgc2VjcmV0QWNjZXNzS2V5OiBhd3NDcmVkcy5TZWNyZXRBY2Nlc3NLZXksXG4gICAgICAgICAgICB0b2tlbjogYXdzQ3JlZHMuVG9rZW4sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyID0gRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcjtcbl9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2dldEltZHNWMlNlc3Npb25Ub2tlbiA9IFxuLyoqXG4gKiBAcGFyYW0gdHJhbnNwb3J0ZXIgVGhlIHRyYW5zcG9ydGVyIHRvIHVzZSBmb3IgcmVxdWVzdHMuXG4gKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIElNRFN2MiBTZXNzaW9uIFRva2VuLlxuICovXG5hc3luYyBmdW5jdGlvbiBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9nZXRJbWRzVjJTZXNzaW9uVG9rZW4odHJhbnNwb3J0ZXIpIHtcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAuLi50aGlzLmFkZGl0aW9uYWxHYXhpb3NPcHRpb25zLFxuICAgICAgICB1cmw6IHRoaXMuaW1kc1YyU2Vzc2lvblRva2VuVXJsLFxuICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgaGVhZGVyczogeyAneC1hd3MtZWMyLW1ldGFkYXRhLXRva2VuLXR0bC1zZWNvbmRzJzogJzMwMCcgfSxcbiAgICB9O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdHJhbnNwb3J0ZXIucmVxdWVzdChvcHRzKTtcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbn0sIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2dldEF3c1JvbGVOYW1lID0gXG4vKipcbiAqIEBwYXJhbSBoZWFkZXJzIFRoZSBoZWFkZXJzIHRvIGJlIHVzZWQgaW4gdGhlIG1ldGFkYXRhIHJlcXVlc3QuXG4gKiBAcGFyYW0gdHJhbnNwb3J0ZXIgVGhlIHRyYW5zcG9ydGVyIHRvIHVzZSBmb3IgcmVxdWVzdHMuXG4gKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGFzc2lnbmVkIHJvbGUgdG8gdGhlIGN1cnJlbnRcbiAqICAgQVdTIFZNLiBUaGlzIGlzIG5lZWRlZCBmb3IgY2FsbGluZyB0aGUgc2VjdXJpdHktY3JlZGVudGlhbHMgZW5kcG9pbnQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX2dldEF3c1JvbGVOYW1lKGhlYWRlcnMsIHRyYW5zcG9ydGVyKSB7XG4gICAgaWYgKCF0aGlzLnNlY3VyaXR5Q3JlZGVudGlhbHNVcmwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZGV0ZXJtaW5lIEFXUyByb2xlIG5hbWUgZHVlIHRvIG1pc3NpbmcgJyArXG4gICAgICAgICAgICAnXCJvcHRpb25zLmNyZWRlbnRpYWxfc291cmNlLnVybFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgIC4uLnRoaXMuYWRkaXRpb25hbEdheGlvc09wdGlvbnMsXG4gICAgICAgIHVybDogdGhpcy5zZWN1cml0eUNyZWRlbnRpYWxzVXJsLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcbiAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICB9O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdHJhbnNwb3J0ZXIucmVxdWVzdChvcHRzKTtcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbn0sIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX3JldHJpZXZlQXdzU2VjdXJpdHlDcmVkZW50aWFscyA9IFxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIHRlbXBvcmFyeSBBV1MgY3JlZGVudGlhbHMgYnkgY2FsbGluZyB0aGUgc2VjdXJpdHktY3JlZGVudGlhbHNcbiAqIGVuZHBvaW50IGFzIHNwZWNpZmllZCBpbiB0aGUgYGNyZWRlbnRpYWxfc291cmNlYCBvYmplY3QuXG4gKiBAcGFyYW0gcm9sZU5hbWUgVGhlIHJvbGUgYXR0YWNoZWQgdG8gdGhlIGN1cnJlbnQgVk0uXG4gKiBAcGFyYW0gaGVhZGVycyBUaGUgaGVhZGVycyB0byBiZSB1c2VkIGluIHRoZSBtZXRhZGF0YSByZXF1ZXN0LlxuICogQHBhcmFtIHRyYW5zcG9ydGVyIFRoZSB0cmFuc3BvcnRlciB0byB1c2UgZm9yIHJlcXVlc3RzLlxuICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0ZW1wb3JhcnkgQVdTIGNyZWRlbnRpYWxzXG4gKiAgIG5lZWRlZCBmb3IgY3JlYXRpbmcgdGhlIEdldENhbGxlcklkZW50aXR5IHNpZ25lZCByZXF1ZXN0LlxuICovXG5hc3luYyBmdW5jdGlvbiBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9yZXRyaWV2ZUF3c1NlY3VyaXR5Q3JlZGVudGlhbHMocm9sZU5hbWUsIGhlYWRlcnMsIHRyYW5zcG9ydGVyKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0cmFuc3BvcnRlci5yZXF1ZXN0KHtcbiAgICAgICAgLi4udGhpcy5hZGRpdGlvbmFsR2F4aW9zT3B0aW9ucyxcbiAgICAgICAgdXJsOiBgJHt0aGlzLnNlY3VyaXR5Q3JlZGVudGlhbHNVcmx9LyR7cm9sZU5hbWV9YCxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG59LCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9yZWdpb25Gcm9tRW52X2dldCA9IGZ1bmN0aW9uIF9EZWZhdWx0QXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyX3JlZ2lvbkZyb21FbnZfZ2V0KCkge1xuICAgIC8vIFRoZSBBV1MgcmVnaW9uIGNhbiBiZSBwcm92aWRlZCB0aHJvdWdoIEFXU19SRUdJT04gb3IgQVdTX0RFRkFVTFRfUkVHSU9OLlxuICAgIC8vIE9ubHkgb25lIGlzIHJlcXVpcmVkLlxuICAgIHJldHVybiAocHJvY2Vzcy5lbnZbJ0FXU19SRUdJT04nXSB8fCBwcm9jZXNzLmVudlsnQVdTX0RFRkFVTFRfUkVHSU9OJ10gfHwgbnVsbCk7XG59LCBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9zZWN1cml0eUNyZWRlbnRpYWxzRnJvbUVudl9nZXQgPSBmdW5jdGlvbiBfRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcl9zZWN1cml0eUNyZWRlbnRpYWxzRnJvbUVudl9nZXQoKSB7XG4gICAgLy8gQm90aCBBV1NfQUNDRVNTX0tFWV9JRCBhbmQgQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZIGFyZSByZXF1aXJlZC5cbiAgICBpZiAocHJvY2Vzcy5lbnZbJ0FXU19BQ0NFU1NfS0VZX0lEJ10gJiZcbiAgICAgICAgcHJvY2Vzcy5lbnZbJ0FXU19TRUNSRVRfQUNDRVNTX0tFWSddKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2Nlc3NLZXlJZDogcHJvY2Vzcy5lbnZbJ0FXU19BQ0NFU1NfS0VZX0lEJ10sXG4gICAgICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6IHByb2Nlc3MuZW52WydBV1NfU0VDUkVUX0FDQ0VTU19LRVknXSxcbiAgICAgICAgICAgIHRva2VuOiBwcm9jZXNzLmVudlsnQVdTX1NFU1NJT05fVE9LRU4nXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/downscopedclient.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/downscopedclient.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DownscopedClient = exports.EXPIRATION_TIME_OFFSET = exports.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst sts = __webpack_require__(/*! ./stscredentials */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/stscredentials.js\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/**\n * The requested token exchange subject_token_type: rfc8693#section-2.1\n */\nconst STS_SUBJECT_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/**\n * The maximum number of access boundary rules a Credential Access Boundary\n * can contain.\n */\nexports.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * Defines a set of Google credentials that are downscoped from an existing set\n * of Google OAuth2 credentials. This is useful to restrict the Identity and\n * Access Management (IAM) permissions that a short-lived credential can use.\n * The common pattern of usage is to have a token broker with elevated access\n * generate these downscoped credentials from higher access source credentials\n * and pass the downscoped short-lived access tokens to a token consumer via\n * some secure authenticated channel for limited access to Google Cloud Storage\n * resources.\n */\nclass DownscopedClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates a downscoped client object using the provided source\n     * AuthClient and credential access boundary rules.\n     * To downscope permissions of a source AuthClient, a Credential Access\n     * Boundary that specifies which resources the new credential can access, as\n     * well as an upper bound on the permissions that are available on each\n     * resource, has to be defined. A downscoped client can then be instantiated\n     * using the source AuthClient and the Credential Access Boundary.\n     * @param authClient The source AuthClient to be downscoped based on the\n     *   provided Credential Access Boundary rules.\n     * @param credentialAccessBoundary The Credential Access Boundary which\n     *   contains a list of access boundary rules. Each rule contains information\n     *   on the resource that the rule applies to, the upper bound of the\n     *   permissions that are available on that resource and an optional\n     *   condition to further restrict permissions.\n     * @param additionalOptions **DEPRECATED, set this in the provided `authClient`.**\n     *   Optional additional behavior customization options.\n     * @param quotaProjectId **DEPRECATED, set this in the provided `authClient`.**\n     *   Optional quota project id for setting up in the x-goog-user-project header.\n     */\n    constructor(authClient, credentialAccessBoundary, additionalOptions, quotaProjectId) {\n        super({ ...additionalOptions, quotaProjectId });\n        this.authClient = authClient;\n        this.credentialAccessBoundary = credentialAccessBoundary;\n        // Check 1-10 Access Boundary Rules are defined within Credential Access\n        // Boundary.\n        if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {\n            throw new Error('At least one access boundary rule needs to be defined.');\n        }\n        else if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length >\n            exports.MAX_ACCESS_BOUNDARY_RULES_COUNT) {\n            throw new Error('The provided access boundary has more than ' +\n                `${exports.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);\n        }\n        // Check at least one permission should be defined in each Access Boundary\n        // Rule.\n        for (const rule of credentialAccessBoundary.accessBoundary\n            .accessBoundaryRules) {\n            if (rule.availablePermissions.length === 0) {\n                throw new Error('At least one permission should be defined in access boundary rules.');\n            }\n        }\n        this.stsCredential = new sts.StsCredentials(`https://sts.${this.universeDomain}/v1/token`);\n        this.cachedDownscopedAccessToken = null;\n    }\n    /**\n     * Provides a mechanism to inject Downscoped access tokens directly.\n     * The expiry_date field is required to facilitate determination of the token\n     * expiration which would make it easier for the token consumer to handle.\n     * @param credentials The Credentials object to set on the current client.\n     */\n    setCredentials(credentials) {\n        if (!credentials.expiry_date) {\n            throw new Error('The access token expiry_date field is missing in the provided ' +\n                'credentials.');\n        }\n        super.setCredentials(credentials);\n        this.cachedDownscopedAccessToken = credentials;\n    }\n    async getAccessToken() {\n        // If the cached access token is unavailable or expired, force refresh.\n        // The Downscoped access token will be returned in\n        // DownscopedAccessTokenResponse format.\n        if (!this.cachedDownscopedAccessToken ||\n            this.isExpired(this.cachedDownscopedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return Downscoped access token in DownscopedAccessTokenResponse format.\n        return {\n            token: this.cachedDownscopedAccessToken.access_token,\n            expirationTime: this.cachedDownscopedAccessToken.expiry_date,\n            res: this.cachedDownscopedAccessToken.res,\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * GCP access tokens are retrieved from authclient object/source credential.\n     * Then GCP access tokens are exchanged for downscoped access tokens via the\n     * token exchange endpoint.\n     * @return A promise that resolves with the fresh downscoped access token.\n     */\n    async refreshAccessTokenAsync() {\n        var _a;\n        // Retrieve GCP access token from source credential.\n        const subjectToken = (await this.authClient.getAccessToken()).token;\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken: subjectToken,\n            subjectTokenType: STS_SUBJECT_TOKEN_TYPE,\n        };\n        // Exchange the source AuthClient access token for a Downscoped access\n        // token.\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, this.credentialAccessBoundary);\n        /**\n         * The STS endpoint will only return the expiration time for the downscoped\n         * access token if the original access token represents a service account.\n         * The downscoped token's expiration time will always match the source\n         * credential expiration. When no expires_in is returned, we can copy the\n         * source credential's expiration time.\n         */\n        const sourceCredExpireDate = ((_a = this.authClient.credentials) === null || _a === void 0 ? void 0 : _a.expiry_date) || null;\n        const expiryDate = stsResponse.expires_in\n            ? new Date().getTime() + stsResponse.expires_in * 1000\n            : sourceCredExpireDate;\n        // Save response in cached access token.\n        this.cachedDownscopedAccessToken = {\n            access_token: stsResponse.access_token,\n            expiry_date: expiryDate,\n            res: stsResponse.res,\n        };\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedDownscopedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit('tokens', {\n            refresh_token: null,\n            expiry_date: this.cachedDownscopedAccessToken.expiry_date,\n            access_token: this.cachedDownscopedAccessToken.access_token,\n            token_type: 'Bearer',\n            id_token: null,\n        });\n        // Return the cached access token.\n        return this.cachedDownscopedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param downscopedAccessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(downscopedAccessToken) {\n        const now = new Date().getTime();\n        return downscopedAccessToken.expiry_date\n            ? now >=\n                downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.DownscopedClient = DownscopedClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/downscopedclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/envDetect.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/envDetect.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GCPEnv = void 0;\nexports.clear = clear;\nexports.getEnv = getEnv;\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/index.js\");\nvar GCPEnv;\n(function (GCPEnv) {\n    GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n    GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n    GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n    GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n    GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\n    GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv || (exports.GCPEnv = GCPEnv = {}));\nlet envPromise;\nfunction clear() {\n    envPromise = undefined;\n}\nasync function getEnv() {\n    if (envPromise) {\n        return envPromise;\n    }\n    envPromise = getEnvMemoized();\n    return envPromise;\n}\nasync function getEnvMemoized() {\n    let env = GCPEnv.NONE;\n    if (isAppEngine()) {\n        env = GCPEnv.APP_ENGINE;\n    }\n    else if (isCloudFunction()) {\n        env = GCPEnv.CLOUD_FUNCTIONS;\n    }\n    else if (await isComputeEngine()) {\n        if (await isKubernetesEngine()) {\n            env = GCPEnv.KUBERNETES_ENGINE;\n        }\n        else if (isCloudRun()) {\n            env = GCPEnv.CLOUD_RUN;\n        }\n        else {\n            env = GCPEnv.COMPUTE_ENGINE;\n        }\n    }\n    else {\n        env = GCPEnv.NONE;\n    }\n    return env;\n}\nfunction isAppEngine() {\n    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\nfunction isCloudFunction() {\n    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n/**\n * This check only verifies that the environment is running knative.\n * This must be run *after* checking for Kubernetes, otherwise it will\n * return a false positive.\n */\nfunction isCloudRun() {\n    return !!process.env.K_CONFIGURATION;\n}\nasync function isKubernetesEngine() {\n    try {\n        await gcpMetadata.instance('attributes/cluster-name');\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nasync function isComputeEngine() {\n    return gcpMetadata.isAvailable();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2VudkRldGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxhQUFhO0FBQ2IsY0FBYztBQUNkLG9CQUFvQixtQkFBTyxDQUFDLDZHQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGFBQWEsY0FBYyxjQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvZW52RGV0ZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdDUEVudiA9IHZvaWQgMDtcbmV4cG9ydHMuY2xlYXIgPSBjbGVhcjtcbmV4cG9ydHMuZ2V0RW52ID0gZ2V0RW52O1xuY29uc3QgZ2NwTWV0YWRhdGEgPSByZXF1aXJlKFwiZ2NwLW1ldGFkYXRhXCIpO1xudmFyIEdDUEVudjtcbihmdW5jdGlvbiAoR0NQRW52KSB7XG4gICAgR0NQRW52W1wiQVBQX0VOR0lORVwiXSA9IFwiQVBQX0VOR0lORVwiO1xuICAgIEdDUEVudltcIktVQkVSTkVURVNfRU5HSU5FXCJdID0gXCJLVUJFUk5FVEVTX0VOR0lORVwiO1xuICAgIEdDUEVudltcIkNMT1VEX0ZVTkNUSU9OU1wiXSA9IFwiQ0xPVURfRlVOQ1RJT05TXCI7XG4gICAgR0NQRW52W1wiQ09NUFVURV9FTkdJTkVcIl0gPSBcIkNPTVBVVEVfRU5HSU5FXCI7XG4gICAgR0NQRW52W1wiQ0xPVURfUlVOXCJdID0gXCJDTE9VRF9SVU5cIjtcbiAgICBHQ1BFbnZbXCJOT05FXCJdID0gXCJOT05FXCI7XG59KShHQ1BFbnYgfHwgKGV4cG9ydHMuR0NQRW52ID0gR0NQRW52ID0ge30pKTtcbmxldCBlbnZQcm9taXNlO1xuZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgZW52UHJvbWlzZSA9IHVuZGVmaW5lZDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldEVudigpIHtcbiAgICBpZiAoZW52UHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gZW52UHJvbWlzZTtcbiAgICB9XG4gICAgZW52UHJvbWlzZSA9IGdldEVudk1lbW9pemVkKCk7XG4gICAgcmV0dXJuIGVudlByb21pc2U7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRFbnZNZW1vaXplZCgpIHtcbiAgICBsZXQgZW52ID0gR0NQRW52Lk5PTkU7XG4gICAgaWYgKGlzQXBwRW5naW5lKCkpIHtcbiAgICAgICAgZW52ID0gR0NQRW52LkFQUF9FTkdJTkU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQ2xvdWRGdW5jdGlvbigpKSB7XG4gICAgICAgIGVudiA9IEdDUEVudi5DTE9VRF9GVU5DVElPTlM7XG4gICAgfVxuICAgIGVsc2UgaWYgKGF3YWl0IGlzQ29tcHV0ZUVuZ2luZSgpKSB7XG4gICAgICAgIGlmIChhd2FpdCBpc0t1YmVybmV0ZXNFbmdpbmUoKSkge1xuICAgICAgICAgICAgZW52ID0gR0NQRW52LktVQkVSTkVURVNfRU5HSU5FO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQ2xvdWRSdW4oKSkge1xuICAgICAgICAgICAgZW52ID0gR0NQRW52LkNMT1VEX1JVTjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVudiA9IEdDUEVudi5DT01QVVRFX0VOR0lORTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZW52ID0gR0NQRW52Lk5PTkU7XG4gICAgfVxuICAgIHJldHVybiBlbnY7XG59XG5mdW5jdGlvbiBpc0FwcEVuZ2luZSgpIHtcbiAgICByZXR1cm4gISEocHJvY2Vzcy5lbnYuR0FFX1NFUlZJQ0UgfHwgcHJvY2Vzcy5lbnYuR0FFX01PRFVMRV9OQU1FKTtcbn1cbmZ1bmN0aW9uIGlzQ2xvdWRGdW5jdGlvbigpIHtcbiAgICByZXR1cm4gISEocHJvY2Vzcy5lbnYuRlVOQ1RJT05fTkFNRSB8fCBwcm9jZXNzLmVudi5GVU5DVElPTl9UQVJHRVQpO1xufVxuLyoqXG4gKiBUaGlzIGNoZWNrIG9ubHkgdmVyaWZpZXMgdGhhdCB0aGUgZW52aXJvbm1lbnQgaXMgcnVubmluZyBrbmF0aXZlLlxuICogVGhpcyBtdXN0IGJlIHJ1biAqYWZ0ZXIqIGNoZWNraW5nIGZvciBLdWJlcm5ldGVzLCBvdGhlcndpc2UgaXQgd2lsbFxuICogcmV0dXJuIGEgZmFsc2UgcG9zaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzQ2xvdWRSdW4oKSB7XG4gICAgcmV0dXJuICEhcHJvY2Vzcy5lbnYuS19DT05GSUdVUkFUSU9OO1xufVxuYXN5bmMgZnVuY3Rpb24gaXNLdWJlcm5ldGVzRW5naW5lKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGdjcE1ldGFkYXRhLmluc3RhbmNlKCdhdHRyaWJ1dGVzL2NsdXN0ZXItbmFtZScpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGlzQ29tcHV0ZUVuZ2luZSgpIHtcbiAgICByZXR1cm4gZ2NwTWV0YWRhdGEuaXNBdmFpbGFibGUoKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/envDetect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/executable-response.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/executable-response.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InvalidSubjectTokenError = exports.InvalidMessageFieldError = exports.InvalidCodeFieldError = exports.InvalidTokenTypeFieldError = exports.InvalidExpirationTimeFieldError = exports.InvalidSuccessFieldError = exports.InvalidVersionFieldError = exports.ExecutableResponseError = exports.ExecutableResponse = void 0;\nconst SAML_SUBJECT_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:saml2';\nconst OIDC_SUBJECT_TOKEN_TYPE1 = 'urn:ietf:params:oauth:token-type:id_token';\nconst OIDC_SUBJECT_TOKEN_TYPE2 = 'urn:ietf:params:oauth:token-type:jwt';\n/**\n * Defines the response of a 3rd party executable run by the pluggable auth client.\n */\nclass ExecutableResponse {\n    /**\n     * Instantiates an ExecutableResponse instance using the provided JSON object\n     * from the output of the executable.\n     * @param responseJson Response from a 3rd party executable, loaded from a\n     * run of the executable or a cached output file.\n     */\n    constructor(responseJson) {\n        // Check that the required fields exist in the json response.\n        if (!responseJson.version) {\n            throw new InvalidVersionFieldError(\"Executable response must contain a 'version' field.\");\n        }\n        if (responseJson.success === undefined) {\n            throw new InvalidSuccessFieldError(\"Executable response must contain a 'success' field.\");\n        }\n        this.version = responseJson.version;\n        this.success = responseJson.success;\n        // Validate required fields for a successful response.\n        if (this.success) {\n            this.expirationTime = responseJson.expiration_time;\n            this.tokenType = responseJson.token_type;\n            // Validate token type field.\n            if (this.tokenType !== SAML_SUBJECT_TOKEN_TYPE &&\n                this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE1 &&\n                this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE2) {\n                throw new InvalidTokenTypeFieldError(\"Executable response must contain a 'token_type' field when successful \" +\n                    `and it must be one of ${OIDC_SUBJECT_TOKEN_TYPE1}, ${OIDC_SUBJECT_TOKEN_TYPE2}, or ${SAML_SUBJECT_TOKEN_TYPE}.`);\n            }\n            // Validate subject token.\n            if (this.tokenType === SAML_SUBJECT_TOKEN_TYPE) {\n                if (!responseJson.saml_response) {\n                    throw new InvalidSubjectTokenError(`Executable response must contain a 'saml_response' field when token_type=${SAML_SUBJECT_TOKEN_TYPE}.`);\n                }\n                this.subjectToken = responseJson.saml_response;\n            }\n            else {\n                if (!responseJson.id_token) {\n                    throw new InvalidSubjectTokenError(\"Executable response must contain a 'id_token' field when \" +\n                        `token_type=${OIDC_SUBJECT_TOKEN_TYPE1} or ${OIDC_SUBJECT_TOKEN_TYPE2}.`);\n                }\n                this.subjectToken = responseJson.id_token;\n            }\n        }\n        else {\n            // Both code and message must be provided for unsuccessful responses.\n            if (!responseJson.code) {\n                throw new InvalidCodeFieldError(\"Executable response must contain a 'code' field when unsuccessful.\");\n            }\n            if (!responseJson.message) {\n                throw new InvalidMessageFieldError(\"Executable response must contain a 'message' field when unsuccessful.\");\n            }\n            this.errorCode = responseJson.code;\n            this.errorMessage = responseJson.message;\n        }\n    }\n    /**\n     * @return A boolean representing if the response has a valid token. Returns\n     * true when the response was successful and the token is not expired.\n     */\n    isValid() {\n        return !this.isExpired() && this.success;\n    }\n    /**\n     * @return A boolean representing if the response is expired. Returns true if the\n     * provided timeout has passed.\n     */\n    isExpired() {\n        return (this.expirationTime !== undefined &&\n            this.expirationTime < Math.round(Date.now() / 1000));\n    }\n}\nexports.ExecutableResponse = ExecutableResponse;\n/**\n * An error thrown by the ExecutableResponse class.\n */\nclass ExecutableResponseError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.ExecutableResponseError = ExecutableResponseError;\n/**\n * An error thrown when the 'version' field in an executable response is missing or invalid.\n */\nclass InvalidVersionFieldError extends ExecutableResponseError {\n}\nexports.InvalidVersionFieldError = InvalidVersionFieldError;\n/**\n * An error thrown when the 'success' field in an executable response is missing or invalid.\n */\nclass InvalidSuccessFieldError extends ExecutableResponseError {\n}\nexports.InvalidSuccessFieldError = InvalidSuccessFieldError;\n/**\n * An error thrown when the 'expiration_time' field in an executable response is missing or invalid.\n */\nclass InvalidExpirationTimeFieldError extends ExecutableResponseError {\n}\nexports.InvalidExpirationTimeFieldError = InvalidExpirationTimeFieldError;\n/**\n * An error thrown when the 'token_type' field in an executable response is missing or invalid.\n */\nclass InvalidTokenTypeFieldError extends ExecutableResponseError {\n}\nexports.InvalidTokenTypeFieldError = InvalidTokenTypeFieldError;\n/**\n * An error thrown when the 'code' field in an executable response is missing or invalid.\n */\nclass InvalidCodeFieldError extends ExecutableResponseError {\n}\nexports.InvalidCodeFieldError = InvalidCodeFieldError;\n/**\n * An error thrown when the 'message' field in an executable response is missing or invalid.\n */\nclass InvalidMessageFieldError extends ExecutableResponseError {\n}\nexports.InvalidMessageFieldError = InvalidMessageFieldError;\n/**\n * An error thrown when the subject token in an executable response is missing or invalid.\n */\nclass InvalidSubjectTokenError extends ExecutableResponseError {\n}\nexports.InvalidSubjectTokenError = InvalidSubjectTokenError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/executable-response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst oauth2common_1 = __webpack_require__(/*! ./oauth2common */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2common.js\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/oauthtoken';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an ExternalAccountAuthorizedUserHandler instance.\n     * @param url The URL of the token refresh endpoint.\n     * @param transporter The transporter to use for the refresh request.\n     * @param clientAuthentication The client authentication credentials to use\n     *   for the refresh request.\n     */\n    constructor(url, transporter, clientAuthentication) {\n        super(clientAuthentication);\n        this.url = url;\n        this.transporter = transporter;\n    }\n    /**\n     * Requests a new access token from the token_url endpoint using the provided\n     *   refresh token.\n     * @param refreshToken The refresh token to use to generate a new access token.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @return A promise that resolves with the token refresh response containing\n     *   the requested access token and its expiration time.\n     */\n    async refreshToken(refreshToken, additionalHeaders) {\n        const values = new URLSearchParams({\n            grant_type: 'refresh_token',\n            refresh_token: refreshToken,\n        });\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            ...additionalHeaders,\n        };\n        const opts = {\n            ...ExternalAccountAuthorizedUserHandler.RETRY_CONFIG,\n            url: this.url,\n            method: 'POST',\n            headers,\n            data: values.toString(),\n            responseType: 'json',\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const tokenRefreshResponse = response.data;\n            tokenRefreshResponse.res = response;\n            return tokenRefreshResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n     * provided JSON object loaded from a credentials files.\n     * An error is throws if the credential is not valid.\n     * @param options The external account authorized user option object typically\n     *   from the external accoutn authorized user JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        var _a;\n        super({ ...options, ...additionalOptions });\n        if (options.universe_domain) {\n            this.universeDomain = options.universe_domain;\n        }\n        this.refreshToken = options.refresh_token;\n        const clientAuth = {\n            confidentialClientType: 'basic',\n            clientId: options.client_id,\n            clientSecret: options.client_secret,\n        };\n        this.externalAccountAuthorizedUserHandler =\n            new ExternalAccountAuthorizedUserHandler((_a = options.token_url) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain), this.transporter, clientAuth);\n        this.cachedAccessToken = null;\n        this.quotaProjectId = options.quota_project_id;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n            this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n        }\n        else {\n            this.eagerRefreshThresholdMillis = additionalOptions\n                .eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    }\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * @return A promise that resolves with the refreshed credential.\n     */\n    async refreshAccessTokenAsync() {\n        // Refresh the access token using the refresh token.\n        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n        this.cachedAccessToken = {\n            access_token: refreshResponse.access_token,\n            expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n            res: refreshResponse.res,\n        };\n        if (refreshResponse.refresh_token !== undefined) {\n            this.refreshToken = refreshResponse.refresh_token;\n        }\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param credentials The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(credentials) {\n        const now = new Date().getTime();\n        return credentials.expiry_date\n            ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalclient.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalclient.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExternalAccountClient = void 0;\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst identitypoolclient_1 = __webpack_require__(/*! ./identitypoolclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/identitypoolclient.js\");\nconst awsclient_1 = __webpack_require__(/*! ./awsclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsclient.js\");\nconst pluggable_auth_client_1 = __webpack_require__(/*! ./pluggable-auth-client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\n/**\n * Dummy class with no constructor. Developers are expected to use fromJSON.\n */\nclass ExternalAccountClient {\n    constructor() {\n        throw new Error('ExternalAccountClients should be initialized via: ' +\n            'ExternalAccountClient.fromJSON(), ' +\n            'directly via explicit constructors, eg. ' +\n            'new AwsClient(options), new IdentityPoolClient(options), new' +\n            'PluggableAuthClientOptions, or via ' +\n            'new GoogleAuth(options).getClient()');\n    }\n    /**\n     * This static method will instantiate the\n     * corresponding type of external account credential depending on the\n     * underlying credential source.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     * @return A BaseExternalAccountClient instance or null if the options\n     *   provided do not correspond to an external account credential.\n     */\n    static fromJSON(options, additionalOptions) {\n        var _a, _b;\n        if (options && options.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            if ((_a = options.credential_source) === null || _a === void 0 ? void 0 : _a.environment_id) {\n                return new awsclient_1.AwsClient(options, additionalOptions);\n            }\n            else if ((_b = options.credential_source) === null || _b === void 0 ? void 0 : _b.executable) {\n                return new pluggable_auth_client_1.PluggableAuthClient(options, additionalOptions);\n            }\n            else {\n                return new identitypoolclient_1.IdentityPoolClient(options, additionalOptions);\n            }\n        }\n        else {\n            return null;\n        }\n    }\n}\nexports.ExternalAccountClient = ExternalAccountClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2V4dGVybmFsY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDZCQUE2QixtQkFBTyxDQUFDLDhJQUFzQjtBQUMzRCw2QkFBNkIsbUJBQU8sQ0FBQyw4SUFBc0I7QUFDM0Qsb0JBQW9CLG1CQUFPLENBQUMsNEhBQWE7QUFDekMsZ0NBQWdDLG1CQUFPLENBQUMsb0pBQXlCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvZXh0ZXJuYWxjbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXh0ZXJuYWxBY2NvdW50Q2xpZW50ID0gdm9pZCAwO1xuY29uc3QgYmFzZWV4dGVybmFsY2xpZW50XzEgPSByZXF1aXJlKFwiLi9iYXNlZXh0ZXJuYWxjbGllbnRcIik7XG5jb25zdCBpZGVudGl0eXBvb2xjbGllbnRfMSA9IHJlcXVpcmUoXCIuL2lkZW50aXR5cG9vbGNsaWVudFwiKTtcbmNvbnN0IGF3c2NsaWVudF8xID0gcmVxdWlyZShcIi4vYXdzY2xpZW50XCIpO1xuY29uc3QgcGx1Z2dhYmxlX2F1dGhfY2xpZW50XzEgPSByZXF1aXJlKFwiLi9wbHVnZ2FibGUtYXV0aC1jbGllbnRcIik7XG4vKipcbiAqIER1bW15IGNsYXNzIHdpdGggbm8gY29uc3RydWN0b3IuIERldmVsb3BlcnMgYXJlIGV4cGVjdGVkIHRvIHVzZSBmcm9tSlNPTi5cbiAqL1xuY2xhc3MgRXh0ZXJuYWxBY2NvdW50Q2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHRlcm5hbEFjY291bnRDbGllbnRzIHNob3VsZCBiZSBpbml0aWFsaXplZCB2aWE6ICcgK1xuICAgICAgICAgICAgJ0V4dGVybmFsQWNjb3VudENsaWVudC5mcm9tSlNPTigpLCAnICtcbiAgICAgICAgICAgICdkaXJlY3RseSB2aWEgZXhwbGljaXQgY29uc3RydWN0b3JzLCBlZy4gJyArXG4gICAgICAgICAgICAnbmV3IEF3c0NsaWVudChvcHRpb25zKSwgbmV3IElkZW50aXR5UG9vbENsaWVudChvcHRpb25zKSwgbmV3JyArXG4gICAgICAgICAgICAnUGx1Z2dhYmxlQXV0aENsaWVudE9wdGlvbnMsIG9yIHZpYSAnICtcbiAgICAgICAgICAgICduZXcgR29vZ2xlQXV0aChvcHRpb25zKS5nZXRDbGllbnQoKScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIHN0YXRpYyBtZXRob2Qgd2lsbCBpbnN0YW50aWF0ZSB0aGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIHR5cGUgb2YgZXh0ZXJuYWwgYWNjb3VudCBjcmVkZW50aWFsIGRlcGVuZGluZyBvbiB0aGVcbiAgICAgKiB1bmRlcmx5aW5nIGNyZWRlbnRpYWwgc291cmNlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBleHRlcm5hbCBhY2NvdW50IG9wdGlvbnMgb2JqZWN0IHR5cGljYWxseSBsb2FkZWRcbiAgICAgKiAgIGZyb20gdGhlIGV4dGVybmFsIGFjY291bnQgSlNPTiBjcmVkZW50aWFsIGZpbGUuXG4gICAgICogQHBhcmFtIGFkZGl0aW9uYWxPcHRpb25zICoqREVQUkVDQVRFRCwgYWxsIG9wdGlvbnMgYXJlIGF2YWlsYWJsZSBpbiB0aGVcbiAgICAgKiAgIGBvcHRpb25zYCBwYXJhbWV0ZXIuKiogT3B0aW9uYWwgYWRkaXRpb25hbCBiZWhhdmlvciBjdXN0b21pemF0aW9uIG9wdGlvbnMuXG4gICAgICogICBUaGVzZSBjdXJyZW50bHkgY3VzdG9taXplIGV4cGlyYXRpb24gdGhyZXNob2xkIHRpbWUgYW5kIHdoZXRoZXIgdG8gcmV0cnlcbiAgICAgKiAgIG9uIDQwMS80MDMgQVBJIHJlcXVlc3QgZXJyb3JzLlxuICAgICAqIEByZXR1cm4gQSBCYXNlRXh0ZXJuYWxBY2NvdW50Q2xpZW50IGluc3RhbmNlIG9yIG51bGwgaWYgdGhlIG9wdGlvbnNcbiAgICAgKiAgIHByb3ZpZGVkIGRvIG5vdCBjb3JyZXNwb25kIHRvIGFuIGV4dGVybmFsIGFjY291bnQgY3JlZGVudGlhbC5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04ob3B0aW9ucywgYWRkaXRpb25hbE9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlID09PSBiYXNlZXh0ZXJuYWxjbGllbnRfMS5FWFRFUk5BTF9BQ0NPVU5UX1RZUEUpIHtcbiAgICAgICAgICAgIGlmICgoX2EgPSBvcHRpb25zLmNyZWRlbnRpYWxfc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW52aXJvbm1lbnRfaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGF3c2NsaWVudF8xLkF3c0NsaWVudChvcHRpb25zLCBhZGRpdGlvbmFsT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoX2IgPSBvcHRpb25zLmNyZWRlbnRpYWxfc291cmNlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZXhlY3V0YWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgcGx1Z2dhYmxlX2F1dGhfY2xpZW50XzEuUGx1Z2dhYmxlQXV0aENsaWVudChvcHRpb25zLCBhZGRpdGlvbmFsT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGlkZW50aXR5cG9vbGNsaWVudF8xLklkZW50aXR5UG9vbENsaWVudChvcHRpb25zLCBhZGRpdGlvbmFsT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRXh0ZXJuYWxBY2NvdW50Q2xpZW50ID0gRXh0ZXJuYWxBY2NvdW50Q2xpZW50O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FileSubjectTokenSupplier = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : (() => { }));\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : (() => { }));\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : (() => { }));\n/**\n * Internal subject token supplier implementation used when a file location\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\nclass FileSubjectTokenSupplier {\n    /**\n     * Instantiates a new file based subject token supplier.\n     * @param opts The file subject token supplier options to build the supplier\n     *   with.\n     */\n    constructor(opts) {\n        this.filePath = opts.filePath;\n        this.formatType = opts.formatType;\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\n    }\n    /**\n     * Returns the subject token stored at the file specified in the constructor.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\n     *   token type for the external account identity. Not used.\n     */\n    async getSubjectToken(context) {\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        let parsedFilePath = this.filePath;\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            parsedFilePath = await realpath(parsedFilePath);\n            if (!(await lstat(parsedFilePath)).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${parsedFilePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        let subjectToken;\n        const rawText = await readFile(parsedFilePath, { encoding: 'utf8' });\n        if (this.formatType === 'text') {\n            subjectToken = rawText;\n        }\n        else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n            const json = JSON.parse(rawText);\n            subjectToken = json[this.subjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source file');\n        }\n        return subjectToken;\n    }\n}\nexports.FileSubjectTokenSupplier = FileSubjectTokenSupplier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2ZpbGVzdWJqZWN0dG9rZW5zdXBwbGllci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3QixXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFHQUFxRztBQUNyRyxxR0FBcUc7QUFDckcsK0ZBQStGO0FBQy9GO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQ0FBc0M7QUFDN0QsVUFBVSx5QkFBeUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsZ0JBQWdCLHVDQUF1QyxZQUFZO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELGtCQUFrQjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2ZpbGVzdWJqZWN0dG9rZW5zdXBwbGllci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9hLCBfYiwgX2M7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbGVTdWJqZWN0VG9rZW5TdXBwbGllciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG4vLyBmcy5yZWFkZmlsZSBpcyB1bmRlZmluZWQgaW4gYnJvd3NlciBrYXJtYSB0ZXN0cyBjYXVzaW5nXG4vLyBgbnBtIHJ1biBicm93c2VyLXRlc3RgIHRvIGZhaWwgYXMgdGVzdC5vYXV0aDIudHMgaW1wb3J0cyB0aGlzIGZpbGUgdmlhXG4vLyBzcmMvaW5kZXgudHMuXG4vLyBGYWxsYmFjayB0byB2b2lkIGZ1bmN0aW9uIHRvIGF2b2lkIHByb21pc2lmeSB0aHJvd2luZyBhIFR5cGVFcnJvci5cbmNvbnN0IHJlYWRGaWxlID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKChfYSA9IGZzLnJlYWRGaWxlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoKCkgPT4geyB9KSk7XG5jb25zdCByZWFscGF0aCA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSgoX2IgPSBmcy5yZWFscGF0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKCgpID0+IHsgfSkpO1xuY29uc3QgbHN0YXQgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoKF9jID0gZnMubHN0YXQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICgoKSA9PiB7IH0pKTtcbi8qKlxuICogSW50ZXJuYWwgc3ViamVjdCB0b2tlbiBzdXBwbGllciBpbXBsZW1lbnRhdGlvbiB1c2VkIHdoZW4gYSBmaWxlIGxvY2F0aW9uXG4gKiBpcyBjb25maWd1cmVkIGluIHRoZSBjcmVkZW50aWFsIGNvbmZpZ3VyYXRpb24gdXNlZCB0byBidWlsZCBhbiB7QGxpbmsgSWRlbnRpdHlQb29sQ2xpZW50fVxuICovXG5jbGFzcyBGaWxlU3ViamVjdFRva2VuU3VwcGxpZXIge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlcyBhIG5ldyBmaWxlIGJhc2VkIHN1YmplY3QgdG9rZW4gc3VwcGxpZXIuXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIGZpbGUgc3ViamVjdCB0b2tlbiBzdXBwbGllciBvcHRpb25zIHRvIGJ1aWxkIHRoZSBzdXBwbGllclxuICAgICAqICAgd2l0aC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHRoaXMuZmlsZVBhdGggPSBvcHRzLmZpbGVQYXRoO1xuICAgICAgICB0aGlzLmZvcm1hdFR5cGUgPSBvcHRzLmZvcm1hdFR5cGU7XG4gICAgICAgIHRoaXMuc3ViamVjdFRva2VuRmllbGROYW1lID0gb3B0cy5zdWJqZWN0VG9rZW5GaWVsZE5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN1YmplY3QgdG9rZW4gc3RvcmVkIGF0IHRoZSBmaWxlIHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIGNvbnRleHQge0BsaW5rIEV4dGVybmFsQWNjb3VudFN1cHBsaWVyQ29udGV4dH0gZnJvbSB0aGUgY2FsbGluZ1xuICAgICAqICAge0BsaW5rIElkZW50aXR5UG9vbENsaWVudH0sIGNvbnRhaW5zIHRoZSByZXF1ZXN0ZWQgYXVkaWVuY2UgYW5kIHN1YmplY3RcbiAgICAgKiAgIHRva2VuIHR5cGUgZm9yIHRoZSBleHRlcm5hbCBhY2NvdW50IGlkZW50aXR5LiBOb3QgdXNlZC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRTdWJqZWN0VG9rZW4oY29udGV4dCkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlcmUgaXMgYSBmaWxlIGF0IHRoZSBwYXRoLiBsc3RhdFN5bmMgd2lsbCB0aHJvdyBpZiB0aGVyZSBpc1xuICAgICAgICAvLyBub3RoaW5nIHRoZXJlLlxuICAgICAgICBsZXQgcGFyc2VkRmlsZVBhdGggPSB0aGlzLmZpbGVQYXRoO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gUmVzb2x2ZSBwYXRoIHRvIGFjdHVhbCBmaWxlIGluIGNhc2Ugb2Ygc3ltbGluay4gRXhwZWN0IGEgdGhyb3duIGVycm9yXG4gICAgICAgICAgICAvLyBpZiBub3QgcmVzb2x2YWJsZS5cbiAgICAgICAgICAgIHBhcnNlZEZpbGVQYXRoID0gYXdhaXQgcmVhbHBhdGgocGFyc2VkRmlsZVBhdGgpO1xuICAgICAgICAgICAgaWYgKCEoYXdhaXQgbHN0YXQocGFyc2VkRmlsZVBhdGgpKS5pc0ZpbGUoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlID0gYFRoZSBmaWxlIGF0ICR7cGFyc2VkRmlsZVBhdGh9IGRvZXMgbm90IGV4aXN0LCBvciBpdCBpcyBub3QgYSBmaWxlLiAke2Vyci5tZXNzYWdlfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN1YmplY3RUb2tlbjtcbiAgICAgICAgY29uc3QgcmF3VGV4dCA9IGF3YWl0IHJlYWRGaWxlKHBhcnNlZEZpbGVQYXRoLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdFR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgc3ViamVjdFRva2VuID0gcmF3VGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmZvcm1hdFR5cGUgPT09ICdqc29uJyAmJiB0aGlzLnN1YmplY3RUb2tlbkZpZWxkTmFtZSkge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UocmF3VGV4dCk7XG4gICAgICAgICAgICBzdWJqZWN0VG9rZW4gPSBqc29uW3RoaXMuc3ViamVjdFRva2VuRmllbGROYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN1YmplY3RUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcGFyc2UgdGhlIHN1YmplY3RfdG9rZW4gZnJvbSB0aGUgY3JlZGVudGlhbF9zb3VyY2UgZmlsZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJqZWN0VG9rZW47XG4gICAgfVxufVxuZXhwb3J0cy5GaWxlU3ViamVjdFRva2VuU3VwcGxpZXIgPSBGaWxlU3ViamVjdFRva2VuU3VwcGxpZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/googleauth.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/googleauth.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _GoogleAuth_instances, _GoogleAuth_pendingAuthClient, _GoogleAuth_prepareAndCacheClient, _GoogleAuth_determineClient;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleAuth = exports.GoogleAuthExceptionMessages = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/index.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/crypto.js\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/transporters.js\");\nconst computeclient_1 = __webpack_require__(/*! ./computeclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/computeclient.js\");\nconst idtokenclient_1 = __webpack_require__(/*! ./idtokenclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/idtokenclient.js\");\nconst envDetect_1 = __webpack_require__(/*! ./envDetect */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/envDetect.js\");\nconst jwtclient_1 = __webpack_require__(/*! ./jwtclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtclient.js\");\nconst refreshclient_1 = __webpack_require__(/*! ./refreshclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/refreshclient.js\");\nconst impersonated_1 = __webpack_require__(/*! ./impersonated */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/impersonated.js\");\nconst externalclient_1 = __webpack_require__(/*! ./externalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalclient.js\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst externalAccountAuthorizedUserClient_1 = __webpack_require__(/*! ./externalAccountAuthorizedUserClient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nexports.GoogleAuthExceptionMessages = {\n    API_KEY_WITH_CREDENTIALS: 'API Keys and Credentials are mutually exclusive authentication methods and cannot be used together.',\n    NO_PROJECT_ID_FOUND: 'Unable to detect a Project Id in the current environment. \\n' +\n        'To learn more about authentication and Google APIs, visit: \\n' +\n        'https://cloud.google.com/docs/authentication/getting-started',\n    NO_CREDENTIALS_FOUND: 'Unable to find credentials in current environment. \\n' +\n        'To learn more about authentication and Google APIs, visit: \\n' +\n        'https://cloud.google.com/docs/authentication/getting-started',\n    NO_ADC_FOUND: 'Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.',\n    NO_UNIVERSE_DOMAIN_FOUND: 'Unable to detect a Universe Domain in the current environment.\\n' +\n        'To learn more about Universe Domain retrieval, visit: \\n' +\n        'https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys',\n};\nclass GoogleAuth {\n    // Note:  this properly is only public to satisfy unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    /**\n     * Configuration is resolved in the following order of precedence:\n     * - {@link GoogleAuthOptions.credentials `credentials`}\n     * - {@link GoogleAuthOptions.keyFilename `keyFilename`}\n     * - {@link GoogleAuthOptions.keyFile `keyFile`}\n     *\n     * {@link GoogleAuthOptions.clientOptions `clientOptions`} are passed to the\n     * {@link AuthClient `AuthClient`s}.\n     *\n     * @param opts\n     */\n    constructor(opts = {}) {\n        _GoogleAuth_instances.add(this);\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        /**\n         * A pending {@link AuthClient}. Used for concurrent {@link GoogleAuth.getClient} calls.\n         */\n        _GoogleAuth_pendingAuthClient.set(this, null);\n        this.clientOptions = {};\n        this._cachedProjectId = opts.projectId || null;\n        this.cachedCredential = opts.authClient || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.clientOptions = opts.clientOptions || {};\n        this.jsonContent = opts.credentials || null;\n        this.apiKey = opts.apiKey || this.clientOptions.apiKey || null;\n        // Cannot use both API Key + Credentials\n        if (this.apiKey && (this.jsonContent || this.clientOptions.credentials)) {\n            throw new RangeError(exports.GoogleAuthExceptionMessages.API_KEY_WITH_CREDENTIALS);\n        }\n        if (opts.universeDomain) {\n            this.clientOptions.universeDomain = opts.universeDomain;\n        }\n    }\n    // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n    setGapicJWTValues(client) {\n        client.defaultServicePath = this.defaultServicePath;\n        client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n        client.defaultScopes = this.defaultScopes;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    /**\n     * A temporary method for internal `getProjectId` usages where `null` is\n     * acceptable. In a future major release, `getProjectId` should return `null`\n     * (as the `Promise<string | null>` base signature describes) and this private\n     * method should be removed.\n     *\n     * @returns Promise that resolves with project id (or `null`)\n     */\n    async getProjectIdOptional() {\n        try {\n            return await this.getProjectId();\n        }\n        catch (e) {\n            if (e instanceof Error &&\n                e.message === exports.GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {\n                return null;\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /**\n     * A private method for finding and caching a projectId.\n     *\n     * Supports environments in order of precedence:\n     * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n     * - GOOGLE_APPLICATION_CREDENTIALS JSON file\n     * - Cloud SDK: `gcloud config config-helper --format json`\n     * - GCE project ID from metadata server\n     *\n     * @returns projectId\n     */\n    async findAndCacheProjectId() {\n        let projectId = null;\n        projectId || (projectId = await this.getProductionProjectId());\n        projectId || (projectId = await this.getFileProjectId());\n        projectId || (projectId = await this.getDefaultServiceProjectId());\n        projectId || (projectId = await this.getGCEProjectId());\n        projectId || (projectId = await this.getExternalAccountClientProjectId());\n        if (projectId) {\n            this._cachedProjectId = projectId;\n            return projectId;\n        }\n        else {\n            throw new Error(exports.GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);\n        }\n    }\n    async getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return this._cachedProjectId;\n        }\n        if (!this._findProjectIdPromise) {\n            this._findProjectIdPromise = this.findAndCacheProjectId();\n        }\n        return this._findProjectIdPromise;\n    }\n    /**\n     * Retrieves a universe domain from the metadata server via\n     * {@link gcpMetadata.universe}.\n     *\n     * @returns a universe domain\n     */\n    async getUniverseDomainFromMetadataServer() {\n        var _a;\n        let universeDomain;\n        try {\n            universeDomain = await gcpMetadata.universe('universe-domain');\n            universeDomain || (universeDomain = authclient_1.DEFAULT_UNIVERSE);\n        }\n        catch (e) {\n            if (e && ((_a = e === null || e === void 0 ? void 0 : e.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {\n                universeDomain = authclient_1.DEFAULT_UNIVERSE;\n            }\n            else {\n                throw e;\n            }\n        }\n        return universeDomain;\n    }\n    /**\n     * Retrieves, caches, and returns the universe domain in the following order\n     * of precedence:\n     * - The universe domain in {@link GoogleAuth.clientOptions}\n     * - An existing or ADC {@link AuthClient}'s universe domain\n     * - {@link gcpMetadata.universe}, if {@link Compute} client\n     *\n     * @returns The universe domain\n     */\n    async getUniverseDomain() {\n        let universeDomain = (0, util_1.originalOrCamelOptions)(this.clientOptions).get('universe_domain');\n        try {\n            universeDomain !== null && universeDomain !== void 0 ? universeDomain : (universeDomain = (await this.getClient()).universeDomain);\n        }\n        catch (_a) {\n            // client or ADC is not available\n            universeDomain !== null && universeDomain !== void 0 ? universeDomain : (universeDomain = authclient_1.DEFAULT_UNIVERSE);\n        }\n        return universeDomain;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */\n    getAnyScopes() {\n        return this.scopes || this.defaultScopes;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, return it.\n        // This will also preserve one's configured quota project, in case they\n        // set one directly on the credential previously.\n        if (this.cachedCredential) {\n            // cache, while preserving existing quota project preferences\n            return await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, this.cachedCredential, null);\n        }\n        let credential;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential =\n            await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, credential);\n        }\n        // Look in the well-known credential file location.\n        credential =\n            await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, credential);\n        }\n        // Determine if we're running on GCE.\n        if (await this._checkIsGCE()) {\n            options.scopes = this.getAnyScopes();\n            return await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, new computeclient_1.Compute(options));\n        }\n        throw new Error(exports.GoogleAuthExceptionMessages.NO_ADC_FOUND);\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * Checks for GCP Residency, then fallback to checking if metadata server\n     * is available.\n     *\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE =\n                gcpMetadata.getGCPResidency() || (await gcpMetadata.isAvailable());\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n            process.env['google_application_credentials'];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env['APPDATA'];\n        }\n        else {\n            // Linux or Mac\n            const home = process.env['HOME'];\n            if (home) {\n                location = path.join(home, '.config');\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error('The file path is invalid.');\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using a given impersonated input options.\n     * @param json The impersonated input object.\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromImpersonatedJSON(json) {\n        var _a, _b, _c, _d;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing an  impersonated refresh token');\n        }\n        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            throw new Error(`The incoming JSON object does not have the \"${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}\" type`);\n        }\n        if (!json.source_credentials) {\n            throw new Error('The incoming JSON object does not contain a source_credentials field');\n        }\n        if (!json.service_account_impersonation_url) {\n            throw new Error('The incoming JSON object does not contain a service_account_impersonation_url field');\n        }\n        const sourceClient = this.fromJSON(json.source_credentials);\n        if (((_a = json.service_account_impersonation_url) === null || _a === void 0 ? void 0 : _a.length) > 256) {\n            /**\n             * Prevents DOS attacks.\n             * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/85}\n             **/\n            throw new RangeError(`Target principal is too long: ${json.service_account_impersonation_url}`);\n        }\n        // Extract service account from service_account_impersonation_url\n        const targetPrincipal = (_c = (_b = /(?<target>[^/]+):(generateAccessToken|generateIdToken)$/.exec(json.service_account_impersonation_url)) === null || _b === void 0 ? void 0 : _b.groups) === null || _c === void 0 ? void 0 : _c.target;\n        if (!targetPrincipal) {\n            throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);\n        }\n        const targetScopes = (_d = this.getAnyScopes()) !== null && _d !== void 0 ? _d : [];\n        return new impersonated_1.Impersonated({\n            ...json,\n            sourceClient,\n            targetPrincipal,\n            targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes],\n        });\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * This client is not cached.\n     *\n     * **Important**: If you accept a credential configuration (credential JSON/File/Stream) from an external source for authentication to Google Cloud, you must validate it before providing it to any Google API or library. Providing an unvalidated credential configuration to Google APIs can compromise the security of your systems and data. For more information, refer to {@link https://cloud.google.com/docs/authentication/external/externally-sourced-credentials Validate credential configurations from external sources}.\n     *\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options = {}) {\n        let client;\n        // user's preferred universe domain\n        const preferredUniverseDomain = (0, util_1.originalOrCamelOptions)(options).get('universe_domain');\n        if (json.type === refreshclient_1.USER_REFRESH_ACCOUNT_TYPE) {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        }\n        else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            client = this.fromImpersonatedJSON(json);\n        }\n        else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        }\n        else if (json.type === externalAccountAuthorizedUserClient_1.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE) {\n            client = new externalAccountAuthorizedUserClient_1.ExternalAccountAuthorizedUserClient(json, options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            this.setGapicJWTValues(client);\n            client.fromJSON(json);\n        }\n        if (preferredUniverseDomain) {\n            client.universeDomain = preferredUniverseDomain;\n        }\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    _cacheClientFromJSON(json, options) {\n        const client = this.fromJSON(json, options);\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return client;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            const chunks = [];\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => chunks.push(chunk))\n                .on('end', () => {\n                try {\n                    try {\n                        const data = JSON.parse(chunks.join(''));\n                        const r = this._cacheClientFromJSON(data, options);\n                        return resolve(r);\n                    }\n                    catch (err) {\n                        // If we failed parsing this.keyFileName, assume that it\n                        // is a PEM or p12 certificate:\n                        if (!this.keyFilename)\n                            throw err;\n                        const client = new jwtclient_1.JWT({\n                            ...this.clientOptions,\n                            keyFile: this.keyFilename,\n                        });\n                        this.cachedCredential = client;\n                        this.setGapicJWTValues(client);\n                        return resolve(client);\n                    }\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * The created client is not cached. In order to create and cache it use the {@link GoogleAuth.getClient `getClient`} method after first providing an {@link GoogleAuth.apiKey `apiKey`}.\n     *\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options = {}) {\n        return new jwtclient_1.JWT({ ...options, apiKey });\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    async getDefaultServiceProjectId() {\n        return new Promise(resolve => {\n            (0, child_process_1.exec)('gcloud config config-helper --format json', (err, stdout) => {\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                    }\n                    catch (e) {\n                        // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return (process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\n            process.env['gcloud_project'] ||\n            process.env['google_cloud_project']);\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the project ID from external account client if available.\n     */\n    async getExternalAccountClientProjectId() {\n        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            return null;\n        }\n        const creds = await this.getClient();\n        // Do not suppress the underlying error, as the error could contain helpful\n        // information for debugging and fixing. This is especially true for\n        // external account creds as in order to get the project ID, the following\n        // operations have to succeed:\n        // 1. Valid credentials file should be supplied.\n        // 2. Ability to retrieve access tokens from STS token exchange API.\n        // 3. Ability to exchange for service account impersonated credentials (if\n        //    enabled).\n        // 4. Ability to get project info using the access token from step 2 or 3.\n        // Without surfacing the error, it is harder for developers to determine\n        // which step went wrong.\n        return await creds.getProjectId();\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project('project-id');\n            return r;\n        }\n        catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        const client = await this.getClient();\n        if (client instanceof impersonated_1.Impersonated) {\n            return { client_email: client.getTargetPrincipal() };\n        }\n        if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {\n            const serviceAccountEmail = client.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                return {\n                    client_email: serviceAccountEmail,\n                    universe_domain: client.universeDomain,\n                };\n            }\n        }\n        if (this.jsonContent) {\n            return {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n                universe_domain: this.jsonContent.universe_domain,\n            };\n        }\n        if (await this._checkIsGCE()) {\n            const [client_email, universe_domain] = await Promise.all([\n                gcpMetadata.instance('service-accounts/default/email'),\n                this.getUniverseDomain(),\n            ]);\n            return { client_email, universe_domain };\n        }\n        throw new Error(exports.GoogleAuthExceptionMessages.NO_CREDENTIALS_FOUND);\n    }\n    /**\n     * Automatically obtain an {@link AuthClient `AuthClient`} based on the\n     * provided configuration. If no options were passed, use Application\n     * Default Credentials.\n     */\n    async getClient() {\n        if (this.cachedCredential) {\n            return this.cachedCredential;\n        }\n        // Use an existing auth client request, or cache a new one\n        __classPrivateFieldSet(this, _GoogleAuth_pendingAuthClient, __classPrivateFieldGet(this, _GoogleAuth_pendingAuthClient, \"f\") || __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_determineClient).call(this), \"f\");\n        try {\n            return await __classPrivateFieldGet(this, _GoogleAuth_pendingAuthClient, \"f\");\n        }\n        finally {\n            // reset the pending auth client in case it is changed later\n            __classPrivateFieldSet(this, _GoogleAuth_pendingAuthClient, null, \"f\");\n        }\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n    async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!('fetchIdToken' in client)) {\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n        }\n        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return (0, envDetect_1.getEnv)();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     * @param endpoint A custom endpoint to use.\n     *\n     * @example\n     * ```\n     * sign('data', 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/');\n     * ```\n     */\n    async sign(data, endpoint) {\n        const client = await this.getClient();\n        const universe = await this.getUniverseDomain();\n        endpoint =\n            endpoint ||\n                `https://iamcredentials.${universe}/v1/projects/-/serviceAccounts/`;\n        if (client instanceof impersonated_1.Impersonated) {\n            const signed = await client.sign(data);\n            return signed.signedBlob;\n        }\n        const crypto = (0, crypto_1.createCrypto)();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error('Cannot sign data without `client_email`.');\n        }\n        return this.signBlob(crypto, creds.client_email, data, endpoint);\n    }\n    async signBlob(crypto, emailOrUniqueId, data, endpoint) {\n        const url = new URL(endpoint + `${emailOrUniqueId}:signBlob`);\n        const res = await this.request({\n            method: 'POST',\n            url: url.href,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data),\n            },\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: ['POST'],\n            },\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n_GoogleAuth_pendingAuthClient = new WeakMap(), _GoogleAuth_instances = new WeakSet(), _GoogleAuth_prepareAndCacheClient = async function _GoogleAuth_prepareAndCacheClient(credential, quotaProjectIdOverride = process.env['GOOGLE_CLOUD_QUOTA_PROJECT'] || null) {\n    const projectId = await this.getProjectIdOptional();\n    if (quotaProjectIdOverride) {\n        credential.quotaProjectId = quotaProjectIdOverride;\n    }\n    this.cachedCredential = credential;\n    return { credential, projectId };\n}, _GoogleAuth_determineClient = async function _GoogleAuth_determineClient() {\n    if (this.jsonContent) {\n        return this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n    }\n    else if (this.keyFilename) {\n        const filePath = path.resolve(this.keyFilename);\n        const stream = fs.createReadStream(filePath);\n        return await this.fromStreamAsync(stream, this.clientOptions);\n    }\n    else if (this.apiKey) {\n        const client = await this.fromAPIKey(this.apiKey, this.clientOptions);\n        client.scopes = this.scopes;\n        const { credential } = await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, client);\n        return credential;\n    }\n    else {\n        const { credential } = await this.getApplicationDefaultAsync(this.clientOptions);\n        return credential;\n    }\n};\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/googleauth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/iam.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/iam.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IAMAuth = void 0;\nclass IAMAuth {\n    /**\n     * IAM credentials.\n     *\n     * @param selector the iam authority selector\n     * @param token the token\n     * @constructor\n     */\n    constructor(selector, token) {\n        this.selector = selector;\n        this.token = token;\n        this.selector = selector;\n        this.token = token;\n    }\n    /**\n     * Acquire the HTTP headers required to make an authenticated request.\n     */\n    getRequestHeaders() {\n        return {\n            'x-goog-iam-authority-selector': this.selector,\n            'x-goog-iam-authorization-token': this.token,\n        };\n    }\n}\nexports.IAMAuth = IAMAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2lhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvaWFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMTQgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklBTUF1dGggPSB2b2lkIDA7XG5jbGFzcyBJQU1BdXRoIHtcbiAgICAvKipcbiAgICAgKiBJQU0gY3JlZGVudGlhbHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VsZWN0b3IgdGhlIGlhbSBhdXRob3JpdHkgc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0gdG9rZW4gdGhlIHRva2VuXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRva2VuKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWNxdWlyZSB0aGUgSFRUUCBoZWFkZXJzIHJlcXVpcmVkIHRvIG1ha2UgYW4gYXV0aGVudGljYXRlZCByZXF1ZXN0LlxuICAgICAqL1xuICAgIGdldFJlcXVlc3RIZWFkZXJzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3gtZ29vZy1pYW0tYXV0aG9yaXR5LXNlbGVjdG9yJzogdGhpcy5zZWxlY3RvcixcbiAgICAgICAgICAgICd4LWdvb2ctaWFtLWF1dGhvcml6YXRpb24tdG9rZW4nOiB0aGlzLnRva2VuLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuSUFNQXV0aCA9IElBTUF1dGg7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/iam.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/identitypoolclient.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/identitypoolclient.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdentityPoolClient = void 0;\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js\");\nconst filesubjecttokensupplier_1 = __webpack_require__(/*! ./filesubjecttokensupplier */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js\");\nconst urlsubjecttokensupplier_1 = __webpack_require__(/*! ./urlsubjecttokensupplier */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js\");\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiate an IdentityPoolClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid file-sourced or\n     * url-sourced credential or a workforce pool user project is provided\n     * with a non workforce audience.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get('credential_source');\n        const subjectTokenSupplier = opts.get('subject_token_supplier');\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !subjectTokenSupplier) {\n            throw new Error('A credential source or subject token supplier must be specified.');\n        }\n        if (credentialSource && subjectTokenSupplier) {\n            throw new Error('Only one of credential source or subject token supplier can be specified.');\n        }\n        if (subjectTokenSupplier) {\n            this.subjectTokenSupplier = subjectTokenSupplier;\n            this.credentialSourceType = 'programmatic';\n        }\n        else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            const formatOpts = (0, util_1.originalOrCamelOptions)(credentialSourceOpts.get('format'));\n            // Text is the default format type.\n            const formatType = formatOpts.get('type') || 'text';\n            const formatSubjectTokenFieldName = formatOpts.get('subject_token_field_name');\n            if (formatType !== 'json' && formatType !== 'text') {\n                throw new Error(`Invalid credential_source format \"${formatType}\"`);\n            }\n            if (formatType === 'json' && !formatSubjectTokenFieldName) {\n                throw new Error('Missing subject_token_field_name for JSON credential_source format');\n            }\n            const file = credentialSourceOpts.get('file');\n            const url = credentialSourceOpts.get('url');\n            const headers = credentialSourceOpts.get('headers');\n            if (file && url) {\n                throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n            }\n            else if (file && !url) {\n                this.credentialSourceType = 'file';\n                this.subjectTokenSupplier = new filesubjecttokensupplier_1.FileSubjectTokenSupplier({\n                    filePath: file,\n                    formatType: formatType,\n                    subjectTokenFieldName: formatSubjectTokenFieldName,\n                });\n            }\n            else if (!file && url) {\n                this.credentialSourceType = 'url';\n                this.subjectTokenSupplier = new urlsubjecttokensupplier_1.UrlSubjectTokenSupplier({\n                    url: url,\n                    formatType: formatType,\n                    subjectTokenFieldName: formatSubjectTokenFieldName,\n                    headers: headers,\n                    additionalGaxiosOptions: IdentityPoolClient.RETRY_CONFIG,\n                });\n            }\n            else {\n                throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n            }\n        }\n    }\n    /**\n     * Triggered when a external subject token is needed to be exchanged for a GCP\n     * access token via GCP STS endpoint. Gets a subject token by calling\n     * the configured {@link SubjectTokenSupplier}\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        return this.subjectTokenSupplier.getSubjectToken(this.supplierContext);\n    }\n}\nexports.IdentityPoolClient = IdentityPoolClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/identitypoolclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/idtokenclient.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/idtokenclient.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdTokenClient = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nclass IdTokenClient extends oauth2client_1.OAuth2Client {\n    /**\n     * Google ID Token client\n     *\n     * Retrieve ID token from the metadata server.\n     * See: https://cloud.google.com/docs/authentication/get-id-token#metadata-server\n     */\n    constructor(options) {\n        super(options);\n        this.targetAudience = options.targetAudience;\n        this.idTokenProvider = options.idTokenProvider;\n    }\n    async getRequestMetadataAsync(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        if (!this.credentials.id_token ||\n            !this.credentials.expiry_date ||\n            this.isTokenExpiring()) {\n            const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);\n            this.credentials = {\n                id_token: idToken,\n                expiry_date: this.getIdTokenExpiryDate(idToken),\n            };\n        }\n        const headers = {\n            Authorization: 'Bearer ' + this.credentials.id_token,\n        };\n        return { headers };\n    }\n    getIdTokenExpiryDate(idToken) {\n        const payloadB64 = idToken.split('.')[1];\n        if (payloadB64) {\n            const payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));\n            return payload.exp * 1000;\n        }\n    }\n}\nexports.IdTokenClient = IdTokenClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2lkdG9rZW5jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsdUJBQXVCLG1CQUFPLENBQUMsa0lBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pZHRva2VuY2xpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklkVG9rZW5DbGllbnQgPSB2b2lkIDA7XG5jb25zdCBvYXV0aDJjbGllbnRfMSA9IHJlcXVpcmUoXCIuL29hdXRoMmNsaWVudFwiKTtcbmNsYXNzIElkVG9rZW5DbGllbnQgZXh0ZW5kcyBvYXV0aDJjbGllbnRfMS5PQXV0aDJDbGllbnQge1xuICAgIC8qKlxuICAgICAqIEdvb2dsZSBJRCBUb2tlbiBjbGllbnRcbiAgICAgKlxuICAgICAqIFJldHJpZXZlIElEIHRva2VuIGZyb20gdGhlIG1ldGFkYXRhIHNlcnZlci5cbiAgICAgKiBTZWU6IGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9kb2NzL2F1dGhlbnRpY2F0aW9uL2dldC1pZC10b2tlbiNtZXRhZGF0YS1zZXJ2ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnRhcmdldEF1ZGllbmNlID0gb3B0aW9ucy50YXJnZXRBdWRpZW5jZTtcbiAgICAgICAgdGhpcy5pZFRva2VuUHJvdmlkZXIgPSBvcHRpb25zLmlkVG9rZW5Qcm92aWRlcjtcbiAgICB9XG4gICAgYXN5bmMgZ2V0UmVxdWVzdE1ldGFkYXRhQXN5bmMoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIHVybCkge1xuICAgICAgICBpZiAoIXRoaXMuY3JlZGVudGlhbHMuaWRfdG9rZW4gfHxcbiAgICAgICAgICAgICF0aGlzLmNyZWRlbnRpYWxzLmV4cGlyeV9kYXRlIHx8XG4gICAgICAgICAgICB0aGlzLmlzVG9rZW5FeHBpcmluZygpKSB7XG4gICAgICAgICAgICBjb25zdCBpZFRva2VuID0gYXdhaXQgdGhpcy5pZFRva2VuUHJvdmlkZXIuZmV0Y2hJZFRva2VuKHRoaXMudGFyZ2V0QXVkaWVuY2UpO1xuICAgICAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IHtcbiAgICAgICAgICAgICAgICBpZF90b2tlbjogaWRUb2tlbixcbiAgICAgICAgICAgICAgICBleHBpcnlfZGF0ZTogdGhpcy5nZXRJZFRva2VuRXhwaXJ5RGF0ZShpZFRva2VuKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICdCZWFyZXIgJyArIHRoaXMuY3JlZGVudGlhbHMuaWRfdG9rZW4sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7IGhlYWRlcnMgfTtcbiAgICB9XG4gICAgZ2V0SWRUb2tlbkV4cGlyeURhdGUoaWRUb2tlbikge1xuICAgICAgICBjb25zdCBwYXlsb2FkQjY0ID0gaWRUb2tlbi5zcGxpdCgnLicpWzFdO1xuICAgICAgICBpZiAocGF5bG9hZEI2NCkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04ucGFyc2UoQnVmZmVyLmZyb20ocGF5bG9hZEI2NCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdhc2NpaScpKTtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLmV4cCAqIDEwMDA7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLklkVG9rZW5DbGllbnQgPSBJZFRva2VuQ2xpZW50O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/idtokenclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/impersonated.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/impersonated.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Impersonated = exports.IMPERSONATED_ACCOUNT_TYPE = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js\");\nexports.IMPERSONATED_ACCOUNT_TYPE = 'impersonated_service_account';\nclass Impersonated extends oauth2client_1.OAuth2Client {\n    /**\n     * Impersonated service account credentials.\n     *\n     * Create a new access token by impersonating another service account.\n     *\n     * Impersonated Credentials allowing credentials issued to a user or\n     * service account to impersonate another. The source project using\n     * Impersonated Credentials must enable the \"IAMCredentials\" API.\n     * Also, the target service account must grant the orginating principal\n     * the \"Service Account Token Creator\" IAM role.\n     *\n     * @param {object} options - The configuration object.\n     * @param {object} [options.sourceClient] the source credential used as to\n     * acquire the impersonated credentials.\n     * @param {string} [options.targetPrincipal] the service account to\n     * impersonate.\n     * @param {string[]} [options.delegates] the chained list of delegates\n     * required to grant the final access_token. If set, the sequence of\n     * identities must have \"Service Account Token Creator\" capability granted to\n     * the preceding identity. For example, if set to [serviceAccountB,\n     * serviceAccountC], the sourceCredential must have the Token Creator role on\n     * serviceAccountB. serviceAccountB must have the Token Creator on\n     * serviceAccountC. Finally, C must have Token Creator on target_principal.\n     * If left unset, sourceCredential must have that role on targetPrincipal.\n     * @param {string[]} [options.targetScopes] scopes to request during the\n     * authorization grant.\n     * @param {number} [options.lifetime] number of seconds the delegated\n     * credential should be valid for up to 3600 seconds by default, or 43,200\n     * seconds by extending the token's lifetime, see:\n     * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth\n     * @param {string} [options.endpoint] api endpoint override.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = {\n            expiry_date: 1,\n            refresh_token: 'impersonated-placeholder',\n        };\n        this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();\n        this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : '';\n        this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];\n        this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];\n        this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;\n        const usingExplicitUniverseDomain = !!(0, util_1.originalOrCamelOptions)(options).get('universe_domain');\n        if (!usingExplicitUniverseDomain) {\n            // override the default universe with the source's universe\n            this.universeDomain = this.sourceClient.universeDomain;\n        }\n        else if (this.sourceClient.universeDomain !== this.universeDomain) {\n            // non-default universe and is not matching the source - this could be a credential leak\n            throw new RangeError(`Universe domain ${this.sourceClient.universeDomain} in source credentials does not match ${this.universeDomain} universe domain set for impersonated credentials.`);\n        }\n        this.endpoint =\n            (_f = options.endpoint) !== null && _f !== void 0 ? _f : `https://iamcredentials.${this.universeDomain}`;\n    }\n    /**\n     * Signs some bytes.\n     *\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob Reference Documentation}\n     * @param blobToSign String to sign.\n     *\n     * @returns A {@link SignBlobResponse} denoting the keyID and signedBlob in base64 string\n     */\n    async sign(blobToSign) {\n        await this.sourceClient.getAccessToken();\n        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;\n        const u = `${this.endpoint}/v1/${name}:signBlob`;\n        const body = {\n            delegates: this.delegates,\n            payload: Buffer.from(blobToSign).toString('base64'),\n        };\n        const res = await this.sourceClient.request({\n            ...Impersonated.RETRY_CONFIG,\n            url: u,\n            data: body,\n            method: 'POST',\n        });\n        return res.data;\n    }\n    /** The service account email to be impersonated. */\n    getTargetPrincipal() {\n        return this.targetPrincipal;\n    }\n    /**\n     * Refreshes the access token.\n     */\n    async refreshToken() {\n        var _a, _b, _c, _d, _e, _f;\n        try {\n            await this.sourceClient.getAccessToken();\n            const name = 'projects/-/serviceAccounts/' + this.targetPrincipal;\n            const u = `${this.endpoint}/v1/${name}:generateAccessToken`;\n            const body = {\n                delegates: this.delegates,\n                scope: this.targetScopes,\n                lifetime: this.lifetime + 's',\n            };\n            const res = await this.sourceClient.request({\n                ...Impersonated.RETRY_CONFIG,\n                url: u,\n                data: body,\n                method: 'POST',\n            });\n            const tokenResponse = res.data;\n            this.credentials.access_token = tokenResponse.accessToken;\n            this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);\n            return {\n                tokens: this.credentials,\n                res,\n            };\n        }\n        catch (error) {\n            if (!(error instanceof Error))\n                throw error;\n            let status = 0;\n            let message = '';\n            if (error instanceof gaxios_1.GaxiosError) {\n                status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;\n                message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;\n            }\n            if (status && message) {\n                error.message = `${status}: unable to impersonate: ${message}`;\n                throw error;\n            }\n            else {\n                error.message = `unable to impersonate: ${error}`;\n                throw error;\n            }\n        }\n    }\n    /**\n     * Generates an OpenID Connect ID token for a service account.\n     *\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken Reference Documentation}\n     *\n     * @param targetAudience the audience for the fetched ID token.\n     * @param options the for the request\n     * @return an OpenID Connect ID token\n     */\n    async fetchIdToken(targetAudience, options) {\n        var _a, _b;\n        await this.sourceClient.getAccessToken();\n        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;\n        const u = `${this.endpoint}/v1/${name}:generateIdToken`;\n        const body = {\n            delegates: this.delegates,\n            audience: targetAudience,\n            includeEmail: (_a = options === null || options === void 0 ? void 0 : options.includeEmail) !== null && _a !== void 0 ? _a : true,\n            useEmailAzp: (_b = options === null || options === void 0 ? void 0 : options.includeEmail) !== null && _b !== void 0 ? _b : true,\n        };\n        const res = await this.sourceClient.request({\n            ...Impersonated.RETRY_CONFIG,\n            url: u,\n            data: body,\n            method: 'POST',\n        });\n        return res.data.token;\n    }\n}\nexports.Impersonated = Impersonated;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/impersonated.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtaccess.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtaccess.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JWTAccess = void 0;\nconst jws = __webpack_require__(/*! jws */ \"(rsc)/./node_modules/jws/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js\");\nconst DEFAULT_HEADER = {\n    alg: 'RS256',\n    typ: 'JWT',\n};\nclass JWTAccess {\n    /**\n     * JWTAccess service account credentials.\n     *\n     * Create a new access token by using the credential to create a new JWT token\n     * that's recognized as the access token.\n     *\n     * @param email the service account email address.\n     * @param key the private key that will be used to sign the token.\n     * @param keyId the ID of the private key used to sign the token.\n     */\n    constructor(email, key, keyId, eagerRefreshThresholdMillis) {\n        this.cache = new util_1.LRUCache({\n            capacity: 500,\n            maxAge: 60 * 60 * 1000,\n        });\n        this.email = email;\n        this.key = key;\n        this.keyId = keyId;\n        this.eagerRefreshThresholdMillis =\n            eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1000;\n    }\n    /**\n     * Ensures that we're caching a key appropriately, giving precedence to scopes vs. url\n     *\n     * @param url The URI being authorized.\n     * @param scopes The scope or scopes being authorized\n     * @returns A string that returns the cached key.\n     */\n    getCachedKey(url, scopes) {\n        let cacheKey = url;\n        if (scopes && Array.isArray(scopes) && scopes.length) {\n            cacheKey = url ? `${url}_${scopes.join('_')}` : `${scopes.join('_')}`;\n        }\n        else if (typeof scopes === 'string') {\n            cacheKey = url ? `${url}_${scopes}` : scopes;\n        }\n        if (!cacheKey) {\n            throw Error('Scopes or url must be provided');\n        }\n        return cacheKey;\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param url The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @returns An object that includes the authorization header.\n     */\n    getRequestHeaders(url, additionalClaims, scopes) {\n        // Return cached authorization headers, unless we are within\n        // eagerRefreshThresholdMillis ms of them expiring:\n        const key = this.getCachedKey(url, scopes);\n        const cachedToken = this.cache.get(key);\n        const now = Date.now();\n        if (cachedToken &&\n            cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {\n            return cachedToken.headers;\n        }\n        const iat = Math.floor(Date.now() / 1000);\n        const exp = JWTAccess.getExpirationTime(iat);\n        let defaultClaims;\n        // Turn scopes into space-separated string\n        if (Array.isArray(scopes)) {\n            scopes = scopes.join(' ');\n        }\n        // If scopes are specified, sign with scopes\n        if (scopes) {\n            defaultClaims = {\n                iss: this.email,\n                sub: this.email,\n                scope: scopes,\n                exp,\n                iat,\n            };\n        }\n        else {\n            defaultClaims = {\n                iss: this.email,\n                sub: this.email,\n                aud: url,\n                exp,\n                iat,\n            };\n        }\n        // if additionalClaims are provided, ensure they do not collide with\n        // other required claims.\n        if (additionalClaims) {\n            for (const claim in defaultClaims) {\n                if (additionalClaims[claim]) {\n                    throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n                }\n            }\n        }\n        const header = this.keyId\n            ? { ...DEFAULT_HEADER, kid: this.keyId }\n            : DEFAULT_HEADER;\n        const payload = Object.assign(defaultClaims, additionalClaims);\n        // Sign the jwt and add it to the cache\n        const signedJWT = jws.sign({ header, payload, secret: this.key });\n        const headers = { Authorization: `Bearer ${signedJWT}` };\n        this.cache.set(key, {\n            expiration: exp * 1000,\n            headers,\n        });\n        return headers;\n    }\n    /**\n     * Returns an expiration time for the JWT token.\n     *\n     * @param iat The issued at time for the JWT.\n     * @returns An expiration time for the JWT.\n     */\n    static getExpirationTime(iat) {\n        const exp = iat + 3600; // 3600 seconds = 1 hour\n        return exp;\n    }\n    /**\n     * Create a JWTAccess credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                reject(new Error('Must pass in a stream containing the service account auth settings.'));\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('data', chunk => (s += chunk))\n                .on('error', reject)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (err) {\n                    reject(err);\n                }\n            });\n        });\n    }\n}\nexports.JWTAccess = JWTAccess;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtaccess.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtclient.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtclient.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JWT = void 0;\nconst gtoken_1 = __webpack_require__(/*! gtoken */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/gtoken/build/src/index.js\");\nconst jwtaccess_1 = __webpack_require__(/*! ./jwtaccess */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtaccess.js\");\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\n            ? optionsOrEmail\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super(opts);\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        const jwt = new JWT(this);\n        jwt.scopes = scopes;\n        return jwt;\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    async getRequestMetadataAsync(url) {\n        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n        const useSelfSignedJWT = (!this.hasUserScopes() && url) ||\n            (this.useJWTAccessWithScope && this.hasAnyScopes()) ||\n            this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n        if (this.subject && this.universeDomain !== authclient_1.DEFAULT_UNIVERSE) {\n            throw new RangeError(`Service Account user is configured for the credential. Domain-wide delegation is not supported in universes other than ${authclient_1.DEFAULT_UNIVERSE}`);\n        }\n        if (!this.apiKey && useSelfSignedJWT) {\n            if (this.additionalClaims &&\n                this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`,\n                    }),\n                };\n            }\n            else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n                let scopes;\n                if (this.hasUserScopes()) {\n                    scopes = this.scopes;\n                }\n                else if (!url) {\n                    scopes = this.defaultScopes;\n                }\n                const useScopes = this.useJWTAccessWithScope ||\n                    this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, \n                // Scopes take precedent over audience for signing,\n                // so we only provide them if `useJWTAccessWithScope` is on or\n                // if we are in a non-default universe\n                useScopes ? scopes : undefined);\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        else if (this.hasAnyScopes() || this.apiKey) {\n            return super.getRequestMetadataAsync(url);\n        }\n        else {\n            // If no audience, apiKey, or scopes are provided, we should not attempt\n            // to populate any headers:\n            return { headers: {} };\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes || this.defaultScopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: { target_audience: targetAudience },\n            transporter: this.transporter,\n        });\n        await gtoken.getToken({\n            forceRefresh: true,\n        });\n        if (!gtoken.idToken) {\n            throw new Error('Unknown error: Failed to fetch ID token');\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasUserScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */\n    hasAnyScopes() {\n        if (this.scopes && this.scopes.length > 0)\n            return true;\n        if (this.defaultScopes && this.defaultScopes.length > 0)\n            return true;\n        return false;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error('No result returned');\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = 'jwt-placeholder';\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring(),\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: 'Bearer',\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken,\n        };\n        this.emit('tokens', tokens);\n        return { res: null, tokens };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n                transporter: this.transporter,\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     *\n     * @remarks\n     *\n     * **Important**: If you accept a credential configuration (credential JSON/File/Stream) from an external source for authentication to Google Cloud, you must validate it before providing it to any Google API or library. Providing an unvalidated credential configuration to Google APIs can compromise the security of your systems and data. For more information, refer to {@link https://cloud.google.com/docs/authentication/external/externally-sourced-credentials Validate credential configurations from external sources}.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n        this.universeDomain = json.universe_domain || this.universeDomain;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    async getCredentials() {\n        if (this.key) {\n            return { private_key: this.key, client_email: this.email };\n        }\n        else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\n        }\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\n    }\n}\nexports.JWT = JWT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/loginticket.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/loginticket.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LoginTicket = void 0;\nclass LoginTicket {\n    /**\n     * Create a simple class to extract user ID from an ID Token\n     *\n     * @param {string} env Envelope of the jwt\n     * @param {TokenPayload} pay Payload of the jwt\n     * @constructor\n     */\n    constructor(env, pay) {\n        this.envelope = env;\n        this.payload = pay;\n    }\n    getEnvelope() {\n        return this.envelope;\n    }\n    getPayload() {\n        return this.payload;\n    }\n    /**\n     * Create a simple class to extract user ID from an ID Token\n     *\n     * @return The user ID\n     */\n    getUserId() {\n        const payload = this.getPayload();\n        if (payload && payload.sub) {\n            return payload.sub;\n        }\n        return null;\n    }\n    /**\n     * Returns attributes from the login ticket.  This can contain\n     * various information about the user session.\n     *\n     * @return The envelope and payload\n     */\n    getAttributes() {\n        return { envelope: this.getEnvelope(), payload: this.getPayload() };\n    }\n}\nexports.LoginTicket = LoginTicket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2xvZ2ludGlja2V0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsY0FBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvbG9naW50aWNrZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxNCBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9naW5UaWNrZXQgPSB2b2lkIDA7XG5jbGFzcyBMb2dpblRpY2tldCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2ltcGxlIGNsYXNzIHRvIGV4dHJhY3QgdXNlciBJRCBmcm9tIGFuIElEIFRva2VuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW52IEVudmVsb3BlIG9mIHRoZSBqd3RcbiAgICAgKiBAcGFyYW0ge1Rva2VuUGF5bG9hZH0gcGF5IFBheWxvYWQgb2YgdGhlIGp3dFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVudiwgcGF5KSB7XG4gICAgICAgIHRoaXMuZW52ZWxvcGUgPSBlbnY7XG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheTtcbiAgICB9XG4gICAgZ2V0RW52ZWxvcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudmVsb3BlO1xuICAgIH1cbiAgICBnZXRQYXlsb2FkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXlsb2FkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzaW1wbGUgY2xhc3MgdG8gZXh0cmFjdCB1c2VyIElEIGZyb20gYW4gSUQgVG9rZW5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gVGhlIHVzZXIgSURcbiAgICAgKi9cbiAgICBnZXRVc2VySWQoKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLmdldFBheWxvYWQoKTtcbiAgICAgICAgaWYgKHBheWxvYWQgJiYgcGF5bG9hZC5zdWIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLnN1YjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhdHRyaWJ1dGVzIGZyb20gdGhlIGxvZ2luIHRpY2tldC4gIFRoaXMgY2FuIGNvbnRhaW5cbiAgICAgKiB2YXJpb3VzIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIHNlc3Npb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFRoZSBlbnZlbG9wZSBhbmQgcGF5bG9hZFxuICAgICAqL1xuICAgIGdldEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiB7IGVudmVsb3BlOiB0aGlzLmdldEVudmVsb3BlKCksIHBheWxvYWQ6IHRoaXMuZ2V0UGF5bG9hZCgpIH07XG4gICAgfVxufVxuZXhwb3J0cy5Mb2dpblRpY2tldCA9IExvZ2luVGlja2V0O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/loginticket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OAuth2Client = exports.ClientAuthentication = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst formatEcdsa = __webpack_require__(/*! ecdsa-sig-formatter */ \"(rsc)/./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/crypto.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst loginticket_1 = __webpack_require__(/*! ./loginticket */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/loginticket.js\");\nvar CodeChallengeMethod;\n(function (CodeChallengeMethod) {\n    CodeChallengeMethod[\"Plain\"] = \"plain\";\n    CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod || (exports.CodeChallengeMethod = CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function (CertificateFormat) {\n    CertificateFormat[\"PEM\"] = \"PEM\";\n    CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat || (exports.CertificateFormat = CertificateFormat = {}));\n/**\n * The client authentication type. Supported values are basic, post, and none.\n * https://datatracker.ietf.org/doc/html/rfc7591#section-2\n */\nvar ClientAuthentication;\n(function (ClientAuthentication) {\n    ClientAuthentication[\"ClientSecretPost\"] = \"ClientSecretPost\";\n    ClientAuthentication[\"ClientSecretBasic\"] = \"ClientSecretBasic\";\n    ClientAuthentication[\"None\"] = \"None\";\n})(ClientAuthentication || (exports.ClientAuthentication = ClientAuthentication = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n    constructor(optionsOrClientId, clientSecret, redirectUri) {\n        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'\n            ? optionsOrClientId\n            : { clientId: optionsOrClientId, clientSecret, redirectUri };\n        super(opts);\n        this.certificateCache = {};\n        this.certificateExpiry = null;\n        this.certificateCacheFormat = CertificateFormat.PEM;\n        this.refreshTokenPromises = new Map();\n        this._clientId = opts.clientId;\n        this._clientSecret = opts.clientSecret;\n        this.redirectUri = opts.redirectUri;\n        this.endpoints = {\n            tokenInfoUrl: 'https://oauth2.googleapis.com/tokeninfo',\n            oauth2AuthBaseUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n            oauth2TokenUrl: 'https://oauth2.googleapis.com/token',\n            oauth2RevokeUrl: 'https://oauth2.googleapis.com/revoke',\n            oauth2FederatedSignonPemCertsUrl: 'https://www.googleapis.com/oauth2/v1/certs',\n            oauth2FederatedSignonJwkCertsUrl: 'https://www.googleapis.com/oauth2/v3/certs',\n            oauth2IapPublicKeyUrl: 'https://www.gstatic.com/iap/verify/public_key',\n            ...opts.endpoints,\n        };\n        this.clientAuthentication =\n            opts.clientAuthentication || ClientAuthentication.ClientSecretPost;\n        this.issuers = opts.issuers || [\n            'accounts.google.com',\n            'https://accounts.google.com',\n            this.universeDomain,\n        ];\n    }\n    /**\n     * Generates URL for consent page landing.\n     * @param opts Options.\n     * @return URL to consent page.\n     */\n    generateAuthUrl(opts = {}) {\n        if (opts.code_challenge_method && !opts.code_challenge) {\n            throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n        }\n        opts.response_type = opts.response_type || 'code';\n        opts.client_id = opts.client_id || this._clientId;\n        opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n        // Allow scopes to be passed either as array or a string\n        if (Array.isArray(opts.scope)) {\n            opts.scope = opts.scope.join(' ');\n        }\n        const rootUrl = this.endpoints.oauth2AuthBaseUrl.toString();\n        return (rootUrl +\n            '?' +\n            querystring.stringify(opts));\n    }\n    generateCodeVerifier() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n    }\n    /**\n     * Convenience method to automatically generate a code_verifier, and its\n     * resulting SHA256. If used, this must be paired with a S256\n     * code_challenge_method.\n     *\n     * For a full example see:\n     * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n     */\n    async generateCodeVerifierAsync() {\n        // base64 encoding uses 6 bits per character, and we want to generate128\n        // characters. 6*128/8 = 96.\n        const crypto = (0, crypto_1.createCrypto)();\n        const randomString = crypto.randomBytesBase64(96);\n        // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n        // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n        // swapping out a few chars.\n        const codeVerifier = randomString\n            .replace(/\\+/g, '~')\n            .replace(/=/g, '_')\n            .replace(/\\//g, '-');\n        // Generate the base64 encoded SHA256\n        const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier);\n        // We need to use base64UrlEncoding instead of standard base64\n        const codeChallenge = unencodedCodeChallenge\n            .split('=')[0]\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_');\n        return { codeVerifier, codeChallenge };\n    }\n    getToken(codeOrOptions, callback) {\n        const options = typeof codeOrOptions === 'string' ? { code: codeOrOptions } : codeOrOptions;\n        if (callback) {\n            this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n        }\n        else {\n            return this.getTokenAsync(options);\n        }\n    }\n    async getTokenAsync(options) {\n        const url = this.endpoints.oauth2TokenUrl.toString();\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        };\n        const values = {\n            client_id: options.client_id || this._clientId,\n            code_verifier: options.codeVerifier,\n            code: options.code,\n            grant_type: 'authorization_code',\n            redirect_uri: options.redirect_uri || this.redirectUri,\n        };\n        if (this.clientAuthentication === ClientAuthentication.ClientSecretBasic) {\n            const basic = Buffer.from(`${this._clientId}:${this._clientSecret}`);\n            headers['Authorization'] = `Basic ${basic.toString('base64')}`;\n        }\n        if (this.clientAuthentication === ClientAuthentication.ClientSecretPost) {\n            values.client_secret = this._clientSecret;\n        }\n        const res = await this.transporter.request({\n            ...OAuth2Client.RETRY_CONFIG,\n            method: 'POST',\n            url,\n            data: querystring.stringify(values),\n            headers,\n        });\n        const tokens = res.data;\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    /**\n     * Refreshes the access token.\n     * @param refresh_token Existing refresh token.\n     * @private\n     */\n    async refreshToken(refreshToken) {\n        if (!refreshToken) {\n            return this.refreshTokenNoCache(refreshToken);\n        }\n        // If a request to refresh using the same token has started,\n        // return the same promise.\n        if (this.refreshTokenPromises.has(refreshToken)) {\n            return this.refreshTokenPromises.get(refreshToken);\n        }\n        const p = this.refreshTokenNoCache(refreshToken).then(r => {\n            this.refreshTokenPromises.delete(refreshToken);\n            return r;\n        }, e => {\n            this.refreshTokenPromises.delete(refreshToken);\n            throw e;\n        });\n        this.refreshTokenPromises.set(refreshToken, p);\n        return p;\n    }\n    async refreshTokenNoCache(refreshToken) {\n        var _a;\n        if (!refreshToken) {\n            throw new Error('No refresh token is set.');\n        }\n        const url = this.endpoints.oauth2TokenUrl.toString();\n        const data = {\n            refresh_token: refreshToken,\n            client_id: this._clientId,\n            client_secret: this._clientSecret,\n            grant_type: 'refresh_token',\n        };\n        let res;\n        try {\n            // request for new token\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                method: 'POST',\n                url,\n                data: querystring.stringify(data),\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            });\n        }\n        catch (e) {\n            if (e instanceof gaxios_1.GaxiosError &&\n                e.message === 'invalid_grant' &&\n                ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) &&\n                /ReAuth/i.test(e.response.data.error_description)) {\n                e.message = JSON.stringify(e.response.data);\n            }\n            throw e;\n        }\n        const tokens = res.data;\n        // TODO: de-duplicate this code from a few spots\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    refreshAccessToken(callback) {\n        if (callback) {\n            this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n        }\n        else {\n            return this.refreshAccessTokenAsync();\n        }\n    }\n    async refreshAccessTokenAsync() {\n        const r = await this.refreshToken(this.credentials.refresh_token);\n        const tokens = r.tokens;\n        tokens.refresh_token = this.credentials.refresh_token;\n        this.credentials = tokens;\n        return { credentials: this.credentials, res: r.res };\n    }\n    getAccessToken(callback) {\n        if (callback) {\n            this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n        }\n        else {\n            return this.getAccessTokenAsync();\n        }\n    }\n    async getAccessTokenAsync() {\n        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n        if (shouldRefresh) {\n            if (!this.credentials.refresh_token) {\n                if (this.refreshHandler) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                        return { token: this.credentials.access_token };\n                    }\n                }\n                else {\n                    throw new Error('No refresh token or refresh handler callback is set.');\n                }\n            }\n            const r = await this.refreshAccessTokenAsync();\n            if (!r.credentials || (r.credentials && !r.credentials.access_token)) {\n                throw new Error('Could not refresh access token.');\n            }\n            return { token: r.credentials.access_token, res: r.res };\n        }\n        else {\n            return { token: this.credentials.access_token };\n        }\n    }\n    /**\n     * The main authentication interface.  It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * In OAuth2Client, the result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     * @param url The optional url being authorized\n     */\n    async getRequestHeaders(url) {\n        const headers = (await this.getRequestMetadataAsync(url)).headers;\n        return headers;\n    }\n    async getRequestMetadataAsync(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        const thisCreds = this.credentials;\n        if (!thisCreds.access_token &&\n            !thisCreds.refresh_token &&\n            !this.apiKey &&\n            !this.refreshHandler) {\n            throw new Error('No access, refresh token, API key or refresh handler callback is set.');\n        }\n        if (thisCreds.access_token && !this.isTokenExpiring()) {\n            thisCreds.token_type = thisCreds.token_type || 'Bearer';\n            const headers = {\n                Authorization: thisCreds.token_type + ' ' + thisCreds.access_token,\n            };\n            return { headers: this.addSharedMetadataHeaders(headers) };\n        }\n        // If refreshHandler exists, call processAndValidateRefreshHandler().\n        if (this.refreshHandler) {\n            const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n            if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                this.setCredentials(refreshedAccessToken);\n                const headers = {\n                    Authorization: 'Bearer ' + this.credentials.access_token,\n                };\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        if (this.apiKey) {\n            return { headers: { 'X-Goog-Api-Key': this.apiKey } };\n        }\n        let r = null;\n        let tokens = null;\n        try {\n            r = await this.refreshToken(thisCreds.refresh_token);\n            tokens = r.tokens;\n        }\n        catch (err) {\n            const e = err;\n            if (e.response &&\n                (e.response.status === 403 || e.response.status === 404)) {\n                e.message = `Could not refresh access token: ${e.message}`;\n            }\n            throw e;\n        }\n        const credentials = this.credentials;\n        credentials.token_type = credentials.token_type || 'Bearer';\n        tokens.refresh_token = credentials.refresh_token;\n        this.credentials = tokens;\n        const headers = {\n            Authorization: credentials.token_type + ' ' + tokens.access_token,\n        };\n        return { headers: this.addSharedMetadataHeaders(headers), res: r.res };\n    }\n    /**\n     * Generates an URL to revoke the given token.\n     * @param token The existing token to be revoked.\n     *\n     * @deprecated use instance method {@link OAuth2Client.getRevokeTokenURL}\n     */\n    static getRevokeTokenUrl(token) {\n        return new OAuth2Client().getRevokeTokenURL(token).toString();\n    }\n    /**\n     * Generates a URL to revoke the given token.\n     *\n     * @param token The existing token to be revoked.\n     */\n    getRevokeTokenURL(token) {\n        const url = new URL(this.endpoints.oauth2RevokeUrl);\n        url.searchParams.append('token', token);\n        return url;\n    }\n    revokeToken(token, callback) {\n        const opts = {\n            ...OAuth2Client.RETRY_CONFIG,\n            url: this.getRevokeTokenURL(token).toString(),\n            method: 'POST',\n        };\n        if (callback) {\n            this.transporter\n                .request(opts)\n                .then(r => callback(null, r), callback);\n        }\n        else {\n            return this.transporter.request(opts);\n        }\n    }\n    revokeCredentials(callback) {\n        if (callback) {\n            this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n        }\n        else {\n            return this.revokeCredentialsAsync();\n        }\n    }\n    async revokeCredentialsAsync() {\n        const token = this.credentials.access_token;\n        this.credentials = {};\n        if (token) {\n            return this.revokeToken(token);\n        }\n        else {\n            throw new Error('No access token to revoke.');\n        }\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    async requestAsync(opts, reAuthRetried = false) {\n        let r2;\n        try {\n            const r = await this.getRequestMetadataAsync(opts.url);\n            opts.headers = opts.headers || {};\n            if (r.headers && r.headers['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] = r.headers['x-goog-user-project'];\n            }\n            if (r.headers && r.headers.Authorization) {\n                opts.headers.Authorization = r.headers.Authorization;\n            }\n            if (this.apiKey) {\n                opts.headers['X-Goog-Api-Key'] = this.apiKey;\n            }\n            r2 = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - An access_token and refresh_token were available, but either no\n                //   expiry_date was available or the forceRefreshOnFailure flag is set.\n                //   The absent expiry_date case can happen when developers stash the\n                //   access_token and refresh_token for later use, but the access_token\n                //   fails on the first try because it's expired. Some developers may\n                //   choose to enable forceRefreshOnFailure to mitigate time-related\n                //   errors.\n                // Or the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - No refresh_token was available\n                // - An access_token and a refreshHandler callback were available, but\n                //   either no expiry_date was available or the forceRefreshOnFailure\n                //   flag is set. The access_token fails on the first try because it's\n                //   expired. Some developers may choose to enable forceRefreshOnFailure\n                //   to mitigate time-related errors.\n                const mayRequireRefresh = this.credentials &&\n                    this.credentials.access_token &&\n                    this.credentials.refresh_token &&\n                    (!this.credentials.expiry_date || this.forceRefreshOnFailure);\n                const mayRequireRefreshWithNoRefreshToken = this.credentials &&\n                    this.credentials.access_token &&\n                    !this.credentials.refresh_token &&\n                    (!this.credentials.expiry_date || this.forceRefreshOnFailure) &&\n                    this.refreshHandler;\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    mayRequireRefresh) {\n                    await this.refreshAccessTokenAsync();\n                    return this.requestAsync(opts, true);\n                }\n                else if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    mayRequireRefreshWithNoRefreshToken) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                    }\n                    return this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return r2;\n    }\n    verifyIdToken(options, callback) {\n        // This function used to accept two arguments instead of an options object.\n        // Check the types to help users upgrade with less pain.\n        // This check can be removed after a 2.0 release.\n        if (callback && typeof callback !== 'function') {\n            throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n        }\n        if (callback) {\n            this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.verifyIdTokenAsync(options);\n        }\n    }\n    async verifyIdTokenAsync(options) {\n        if (!options.idToken) {\n            throw new Error('The verifyIdToken method requires an ID Token');\n        }\n        const response = await this.getFederatedSignonCertsAsync();\n        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, this.issuers, options.maxExpiry);\n        return login;\n    }\n    /**\n     * Obtains information about the provisioned access token.  Especially useful\n     * if you want to check the scopes that were provisioned to a given token.\n     *\n     * @param accessToken Required.  The Access Token for which you want to get\n     * user info.\n     */\n    async getTokenInfo(accessToken) {\n        const { data } = await this.transporter.request({\n            ...OAuth2Client.RETRY_CONFIG,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                Authorization: `Bearer ${accessToken}`,\n            },\n            url: this.endpoints.tokenInfoUrl.toString(),\n        });\n        const info = Object.assign({\n            expiry_date: new Date().getTime() + data.expires_in * 1000,\n            scopes: data.scope.split(' '),\n        }, data);\n        delete info.expires_in;\n        delete info.scope;\n        return info;\n    }\n    getFederatedSignonCerts(callback) {\n        if (callback) {\n            this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n        }\n        else {\n            return this.getFederatedSignonCertsAsync();\n        }\n    }\n    async getFederatedSignonCertsAsync() {\n        const nowTime = new Date().getTime();\n        const format = (0, crypto_1.hasBrowserCrypto)()\n            ? CertificateFormat.JWK\n            : CertificateFormat.PEM;\n        if (this.certificateExpiry &&\n            nowTime < this.certificateExpiry.getTime() &&\n            this.certificateCacheFormat === format) {\n            return { certs: this.certificateCache, format };\n        }\n        let res;\n        let url;\n        switch (format) {\n            case CertificateFormat.PEM:\n                url = this.endpoints.oauth2FederatedSignonPemCertsUrl.toString();\n                break;\n            case CertificateFormat.JWK:\n                url = this.endpoints.oauth2FederatedSignonJwkCertsUrl.toString();\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        try {\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                url,\n            });\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        const cacheControl = res ? res.headers['cache-control'] : undefined;\n        let cacheAge = -1;\n        if (cacheControl) {\n            const pattern = new RegExp('max-age=([0-9]*)');\n            const regexResult = pattern.exec(cacheControl);\n            if (regexResult && regexResult.length === 2) {\n                // Cache results with max-age (in seconds)\n                cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n            }\n        }\n        let certificates = {};\n        switch (format) {\n            case CertificateFormat.PEM:\n                certificates = res.data;\n                break;\n            case CertificateFormat.JWK:\n                for (const key of res.data.keys) {\n                    certificates[key.kid] = key;\n                }\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        const now = new Date();\n        this.certificateExpiry =\n            cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n        this.certificateCache = certificates;\n        this.certificateCacheFormat = format;\n        return { certs: certificates, format, res };\n    }\n    getIapPublicKeys(callback) {\n        if (callback) {\n            this.getIapPublicKeysAsync().then(r => callback(null, r.pubkeys, r.res), callback);\n        }\n        else {\n            return this.getIapPublicKeysAsync();\n        }\n    }\n    async getIapPublicKeysAsync() {\n        let res;\n        const url = this.endpoints.oauth2IapPublicKeyUrl.toString();\n        try {\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                url,\n            });\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        return { pubkeys: res.data, res };\n    }\n    verifySignedJwtWithCerts() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n    }\n    /**\n     * Verify the id token is signed with the correct certificate\n     * and is from the correct audience.\n     * @param jwt The jwt to verify (The ID Token in this case).\n     * @param certs The array of certs to test the jwt against.\n     * @param requiredAudience The audience to test the jwt against.\n     * @param issuers The allowed issuers of the jwt (Optional).\n     * @param maxExpiry The max expiry the certificate can be (Optional).\n     * @return Returns a promise resolving to LoginTicket on verification.\n     */\n    async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n        const crypto = (0, crypto_1.createCrypto)();\n        if (!maxExpiry) {\n            maxExpiry = OAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_;\n        }\n        const segments = jwt.split('.');\n        if (segments.length !== 3) {\n            throw new Error('Wrong number of segments in token: ' + jwt);\n        }\n        const signed = segments[0] + '.' + segments[1];\n        let signature = segments[2];\n        let envelope;\n        let payload;\n        try {\n            envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n            }\n            throw err;\n        }\n        if (!envelope) {\n            throw new Error(\"Can't parse token envelope: \" + segments[0]);\n        }\n        try {\n            payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token payload '${segments[0]}`;\n            }\n            throw err;\n        }\n        if (!payload) {\n            throw new Error(\"Can't parse token payload: \" + segments[1]);\n        }\n        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n            // If this is not present, then there's no reason to attempt verification\n            throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n        }\n        const cert = certs[envelope.kid];\n        if (envelope.alg === 'ES256') {\n            signature = formatEcdsa.joseToDer(signature, 'ES256').toString('base64');\n        }\n        const verified = await crypto.verify(cert, signed, signature);\n        if (!verified) {\n            throw new Error('Invalid token signature: ' + jwt);\n        }\n        if (!payload.iat) {\n            throw new Error('No issue time in token: ' + JSON.stringify(payload));\n        }\n        if (!payload.exp) {\n            throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n        }\n        const iat = Number(payload.iat);\n        if (isNaN(iat))\n            throw new Error('iat field using invalid format');\n        const exp = Number(payload.exp);\n        if (isNaN(exp))\n            throw new Error('exp field using invalid format');\n        const now = new Date().getTime() / 1000;\n        if (exp >= now + maxExpiry) {\n            throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n        }\n        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n        if (now < earliest) {\n            throw new Error('Token used too early, ' +\n                now +\n                ' < ' +\n                earliest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (now > latest) {\n            throw new Error('Token used too late, ' +\n                now +\n                ' > ' +\n                latest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (issuers && issuers.indexOf(payload.iss) < 0) {\n            throw new Error('Invalid issuer, expected one of [' +\n                issuers +\n                '], but got ' +\n                payload.iss);\n        }\n        // Check the audience matches if we have one\n        if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n            const aud = payload.aud;\n            let audVerified = false;\n            // If the requiredAudience is an array, check if it contains token\n            // audience\n            if (requiredAudience.constructor === Array) {\n                audVerified = requiredAudience.indexOf(aud) > -1;\n            }\n            else {\n                audVerified = aud === requiredAudience;\n            }\n            if (!audVerified) {\n                throw new Error('Wrong recipient, payload audience != requiredAudience');\n            }\n        }\n        return new loginticket_1.LoginTicket(envelope, payload);\n    }\n    /**\n     * Returns a promise that resolves with AccessTokenResponse type if\n     * refreshHandler is defined.\n     * If not, nothing is returned.\n     */\n    async processAndValidateRefreshHandler() {\n        if (this.refreshHandler) {\n            const accessTokenResponse = await this.refreshHandler();\n            if (!accessTokenResponse.access_token) {\n                throw new Error('No access token is returned by the refreshHandler callback.');\n            }\n            return accessTokenResponse;\n        }\n        return;\n    }\n    /**\n     * Returns true if a token is expired or will expire within\n     * eagerRefreshThresholdMillismilliseconds.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     */\n    isTokenExpiring() {\n        const expiryDate = this.credentials.expiry_date;\n        return expiryDate\n            ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.OAuth2Client = OAuth2Client;\n/**\n * @deprecated use instance's {@link OAuth2Client.endpoints}\n */\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * Clock skew - five minutes in seconds\n */\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * The default max Token Lifetime is one day in seconds\n */\nOAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_ = 86400;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL29hdXRoMmNsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLDRCQUE0QixHQUFHLHlCQUF5QixHQUFHLDJCQUEyQjtBQUM3RyxpQkFBaUIsbUJBQU8sQ0FBQyw4REFBUTtBQUNqQyxvQkFBb0IsbUJBQU8sQ0FBQyxnQ0FBYTtBQUN6QyxlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0Isb0JBQW9CLG1CQUFPLENBQUMsZ0dBQXFCO0FBQ2pELGlCQUFpQixtQkFBTyxDQUFDLGdJQUFrQjtBQUMzQyxxQkFBcUIsbUJBQU8sQ0FBQyw4SEFBYztBQUMzQyxzQkFBc0IsbUJBQU8sQ0FBQyxnSUFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMEJBQTBCLDJCQUEyQiwyQkFBMkI7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3Qix5QkFBeUIseUJBQXlCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMkJBQTJCLDRCQUE0Qiw0QkFBNEI7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsOERBQThELHNCQUFzQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGVBQWUsR0FBRyxtQkFBbUI7QUFDOUUsZ0RBQWdELHlCQUF5QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixxREFBcUQ7QUFDaEYsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixXQUFXO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsVUFBVTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsT0FBTztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxVQUFVO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLE9BQU87QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxVQUFVO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxZQUFZLEtBQUssWUFBWTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELFlBQVk7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9vYXV0aDJjbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT0F1dGgyQ2xpZW50ID0gZXhwb3J0cy5DbGllbnRBdXRoZW50aWNhdGlvbiA9IGV4cG9ydHMuQ2VydGlmaWNhdGVGb3JtYXQgPSBleHBvcnRzLkNvZGVDaGFsbGVuZ2VNZXRob2QgPSB2b2lkIDA7XG5jb25zdCBnYXhpb3NfMSA9IHJlcXVpcmUoXCJnYXhpb3NcIik7XG5jb25zdCBxdWVyeXN0cmluZyA9IHJlcXVpcmUoXCJxdWVyeXN0cmluZ1wiKTtcbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XG5jb25zdCBmb3JtYXRFY2RzYSA9IHJlcXVpcmUoXCJlY2RzYS1zaWctZm9ybWF0dGVyXCIpO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiLi4vY3J5cHRvL2NyeXB0b1wiKTtcbmNvbnN0IGF1dGhjbGllbnRfMSA9IHJlcXVpcmUoXCIuL2F1dGhjbGllbnRcIik7XG5jb25zdCBsb2dpbnRpY2tldF8xID0gcmVxdWlyZShcIi4vbG9naW50aWNrZXRcIik7XG52YXIgQ29kZUNoYWxsZW5nZU1ldGhvZDtcbihmdW5jdGlvbiAoQ29kZUNoYWxsZW5nZU1ldGhvZCkge1xuICAgIENvZGVDaGFsbGVuZ2VNZXRob2RbXCJQbGFpblwiXSA9IFwicGxhaW5cIjtcbiAgICBDb2RlQ2hhbGxlbmdlTWV0aG9kW1wiUzI1NlwiXSA9IFwiUzI1NlwiO1xufSkoQ29kZUNoYWxsZW5nZU1ldGhvZCB8fCAoZXhwb3J0cy5Db2RlQ2hhbGxlbmdlTWV0aG9kID0gQ29kZUNoYWxsZW5nZU1ldGhvZCA9IHt9KSk7XG52YXIgQ2VydGlmaWNhdGVGb3JtYXQ7XG4oZnVuY3Rpb24gKENlcnRpZmljYXRlRm9ybWF0KSB7XG4gICAgQ2VydGlmaWNhdGVGb3JtYXRbXCJQRU1cIl0gPSBcIlBFTVwiO1xuICAgIENlcnRpZmljYXRlRm9ybWF0W1wiSldLXCJdID0gXCJKV0tcIjtcbn0pKENlcnRpZmljYXRlRm9ybWF0IHx8IChleHBvcnRzLkNlcnRpZmljYXRlRm9ybWF0ID0gQ2VydGlmaWNhdGVGb3JtYXQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgY2xpZW50IGF1dGhlbnRpY2F0aW9uIHR5cGUuIFN1cHBvcnRlZCB2YWx1ZXMgYXJlIGJhc2ljLCBwb3N0LCBhbmQgbm9uZS5cbiAqIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjNzU5MSNzZWN0aW9uLTJcbiAqL1xudmFyIENsaWVudEF1dGhlbnRpY2F0aW9uO1xuKGZ1bmN0aW9uIChDbGllbnRBdXRoZW50aWNhdGlvbikge1xuICAgIENsaWVudEF1dGhlbnRpY2F0aW9uW1wiQ2xpZW50U2VjcmV0UG9zdFwiXSA9IFwiQ2xpZW50U2VjcmV0UG9zdFwiO1xuICAgIENsaWVudEF1dGhlbnRpY2F0aW9uW1wiQ2xpZW50U2VjcmV0QmFzaWNcIl0gPSBcIkNsaWVudFNlY3JldEJhc2ljXCI7XG4gICAgQ2xpZW50QXV0aGVudGljYXRpb25bXCJOb25lXCJdID0gXCJOb25lXCI7XG59KShDbGllbnRBdXRoZW50aWNhdGlvbiB8fCAoZXhwb3J0cy5DbGllbnRBdXRoZW50aWNhdGlvbiA9IENsaWVudEF1dGhlbnRpY2F0aW9uID0ge30pKTtcbmNsYXNzIE9BdXRoMkNsaWVudCBleHRlbmRzIGF1dGhjbGllbnRfMS5BdXRoQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zT3JDbGllbnRJZCwgY2xpZW50U2VjcmV0LCByZWRpcmVjdFVyaSkge1xuICAgICAgICBjb25zdCBvcHRzID0gb3B0aW9uc09yQ2xpZW50SWQgJiYgdHlwZW9mIG9wdGlvbnNPckNsaWVudElkID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgPyBvcHRpb25zT3JDbGllbnRJZFxuICAgICAgICAgICAgOiB7IGNsaWVudElkOiBvcHRpb25zT3JDbGllbnRJZCwgY2xpZW50U2VjcmV0LCByZWRpcmVjdFVyaSB9O1xuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgdGhpcy5jZXJ0aWZpY2F0ZUNhY2hlID0ge307XG4gICAgICAgIHRoaXMuY2VydGlmaWNhdGVFeHBpcnkgPSBudWxsO1xuICAgICAgICB0aGlzLmNlcnRpZmljYXRlQ2FjaGVGb3JtYXQgPSBDZXJ0aWZpY2F0ZUZvcm1hdC5QRU07XG4gICAgICAgIHRoaXMucmVmcmVzaFRva2VuUHJvbWlzZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2NsaWVudElkID0gb3B0cy5jbGllbnRJZDtcbiAgICAgICAgdGhpcy5fY2xpZW50U2VjcmV0ID0gb3B0cy5jbGllbnRTZWNyZXQ7XG4gICAgICAgIHRoaXMucmVkaXJlY3RVcmkgPSBvcHRzLnJlZGlyZWN0VXJpO1xuICAgICAgICB0aGlzLmVuZHBvaW50cyA9IHtcbiAgICAgICAgICAgIHRva2VuSW5mb1VybDogJ2h0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuaW5mbycsXG4gICAgICAgICAgICBvYXV0aDJBdXRoQmFzZVVybDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoJyxcbiAgICAgICAgICAgIG9hdXRoMlRva2VuVXJsOiAnaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4nLFxuICAgICAgICAgICAgb2F1dGgyUmV2b2tlVXJsOiAnaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vcmV2b2tlJyxcbiAgICAgICAgICAgIG9hdXRoMkZlZGVyYXRlZFNpZ25vblBlbUNlcnRzVXJsOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzJyxcbiAgICAgICAgICAgIG9hdXRoMkZlZGVyYXRlZFNpZ25vbkp3a0NlcnRzVXJsOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzJyxcbiAgICAgICAgICAgIG9hdXRoMklhcFB1YmxpY0tleVVybDogJ2h0dHBzOi8vd3d3LmdzdGF0aWMuY29tL2lhcC92ZXJpZnkvcHVibGljX2tleScsXG4gICAgICAgICAgICAuLi5vcHRzLmVuZHBvaW50cyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jbGllbnRBdXRoZW50aWNhdGlvbiA9XG4gICAgICAgICAgICBvcHRzLmNsaWVudEF1dGhlbnRpY2F0aW9uIHx8IENsaWVudEF1dGhlbnRpY2F0aW9uLkNsaWVudFNlY3JldFBvc3Q7XG4gICAgICAgIHRoaXMuaXNzdWVycyA9IG9wdHMuaXNzdWVycyB8fCBbXG4gICAgICAgICAgICAnYWNjb3VudHMuZ29vZ2xlLmNvbScsXG4gICAgICAgICAgICAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tJyxcbiAgICAgICAgICAgIHRoaXMudW5pdmVyc2VEb21haW4sXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBVUkwgZm9yIGNvbnNlbnQgcGFnZSBsYW5kaW5nLlxuICAgICAqIEBwYXJhbSBvcHRzIE9wdGlvbnMuXG4gICAgICogQHJldHVybiBVUkwgdG8gY29uc2VudCBwYWdlLlxuICAgICAqL1xuICAgIGdlbmVyYXRlQXV0aFVybChvcHRzID0ge30pIHtcbiAgICAgICAgaWYgKG9wdHMuY29kZV9jaGFsbGVuZ2VfbWV0aG9kICYmICFvcHRzLmNvZGVfY2hhbGxlbmdlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lmIGEgY29kZV9jaGFsbGVuZ2VfbWV0aG9kIGlzIHByb3ZpZGVkLCBjb2RlX2NoYWxsZW5nZSBtdXN0IGJlIGluY2x1ZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIG9wdHMucmVzcG9uc2VfdHlwZSA9IG9wdHMucmVzcG9uc2VfdHlwZSB8fCAnY29kZSc7XG4gICAgICAgIG9wdHMuY2xpZW50X2lkID0gb3B0cy5jbGllbnRfaWQgfHwgdGhpcy5fY2xpZW50SWQ7XG4gICAgICAgIG9wdHMucmVkaXJlY3RfdXJpID0gb3B0cy5yZWRpcmVjdF91cmkgfHwgdGhpcy5yZWRpcmVjdFVyaTtcbiAgICAgICAgLy8gQWxsb3cgc2NvcGVzIHRvIGJlIHBhc3NlZCBlaXRoZXIgYXMgYXJyYXkgb3IgYSBzdHJpbmdcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0cy5zY29wZSkpIHtcbiAgICAgICAgICAgIG9wdHMuc2NvcGUgPSBvcHRzLnNjb3BlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb290VXJsID0gdGhpcy5lbmRwb2ludHMub2F1dGgyQXV0aEJhc2VVcmwudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIChyb290VXJsICtcbiAgICAgICAgICAgICc/JyArXG4gICAgICAgICAgICBxdWVyeXN0cmluZy5zdHJpbmdpZnkob3B0cykpO1xuICAgIH1cbiAgICBnZW5lcmF0ZUNvZGVWZXJpZmllcigpIHtcbiAgICAgICAgLy8gVG8gbWFrZSB0aGUgY29kZSBjb21wYXRpYmxlIHdpdGggYnJvd3NlciBTdWJ0bGVDcnlwdG8gd2UgbmVlZCB0byBtYWtlXG4gICAgICAgIC8vIHRoaXMgbWV0aG9kIGFzeW5jLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dlbmVyYXRlQ29kZVZlcmlmaWVyIGlzIHJlbW92ZWQsIHBsZWFzZSB1c2UgZ2VuZXJhdGVDb2RlVmVyaWZpZXJBc3luYyBpbnN0ZWFkLicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZW5pZW5jZSBtZXRob2QgdG8gYXV0b21hdGljYWxseSBnZW5lcmF0ZSBhIGNvZGVfdmVyaWZpZXIsIGFuZCBpdHNcbiAgICAgKiByZXN1bHRpbmcgU0hBMjU2LiBJZiB1c2VkLCB0aGlzIG11c3QgYmUgcGFpcmVkIHdpdGggYSBTMjU2XG4gICAgICogY29kZV9jaGFsbGVuZ2VfbWV0aG9kLlxuICAgICAqXG4gICAgICogRm9yIGEgZnVsbCBleGFtcGxlIHNlZTpcbiAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlYXBpcy9nb29nbGUtYXV0aC1saWJyYXJ5LW5vZGVqcy9ibG9iL21haW4vc2FtcGxlcy9vYXV0aDItY29kZVZlcmlmaWVyLmpzXG4gICAgICovXG4gICAgYXN5bmMgZ2VuZXJhdGVDb2RlVmVyaWZpZXJBc3luYygpIHtcbiAgICAgICAgLy8gYmFzZTY0IGVuY29kaW5nIHVzZXMgNiBiaXRzIHBlciBjaGFyYWN0ZXIsIGFuZCB3ZSB3YW50IHRvIGdlbmVyYXRlMTI4XG4gICAgICAgIC8vIGNoYXJhY3RlcnMuIDYqMTI4LzggPSA5Ni5cbiAgICAgICAgY29uc3QgY3J5cHRvID0gKDAsIGNyeXB0b18xLmNyZWF0ZUNyeXB0bykoKTtcbiAgICAgICAgY29uc3QgcmFuZG9tU3RyaW5nID0gY3J5cHRvLnJhbmRvbUJ5dGVzQmFzZTY0KDk2KTtcbiAgICAgICAgLy8gVGhlIHZhbGlkIGNoYXJhY3RlcnMgaW4gdGhlIGNvZGVfdmVyaWZpZXIgYXJlIFtBLVpdL1thLXpdL1swLTldL1xuICAgICAgICAvLyBcIi1cIi9cIi5cIi9cIl9cIi9cIn5cIi4gQmFzZTY0IGVuY29kZWQgc3RyaW5ncyBhcmUgcHJldHR5IGNsb3NlLCBzbyB3ZSdyZSBqdXN0XG4gICAgICAgIC8vIHN3YXBwaW5nIG91dCBhIGZldyBjaGFycy5cbiAgICAgICAgY29uc3QgY29kZVZlcmlmaWVyID0gcmFuZG9tU3RyaW5nXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwrL2csICd+JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC89L2csICdfJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJy0nKTtcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIGJhc2U2NCBlbmNvZGVkIFNIQTI1NlxuICAgICAgICBjb25zdCB1bmVuY29kZWRDb2RlQ2hhbGxlbmdlID0gYXdhaXQgY3J5cHRvLnNoYTI1NkRpZ2VzdEJhc2U2NChjb2RlVmVyaWZpZXIpO1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHVzZSBiYXNlNjRVcmxFbmNvZGluZyBpbnN0ZWFkIG9mIHN0YW5kYXJkIGJhc2U2NFxuICAgICAgICBjb25zdCBjb2RlQ2hhbGxlbmdlID0gdW5lbmNvZGVkQ29kZUNoYWxsZW5nZVxuICAgICAgICAgICAgLnNwbGl0KCc9JylbMF1cbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xuICAgICAgICByZXR1cm4geyBjb2RlVmVyaWZpZXIsIGNvZGVDaGFsbGVuZ2UgfTtcbiAgICB9XG4gICAgZ2V0VG9rZW4oY29kZU9yT3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHR5cGVvZiBjb2RlT3JPcHRpb25zID09PSAnc3RyaW5nJyA/IHsgY29kZTogY29kZU9yT3B0aW9ucyB9IDogY29kZU9yT3B0aW9ucztcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmdldFRva2VuQXN5bmMob3B0aW9ucykudGhlbihyID0+IGNhbGxiYWNrKG51bGwsIHIudG9rZW5zLCByLnJlcyksIGUgPT4gY2FsbGJhY2soZSwgbnVsbCwgZS5yZXNwb25zZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VG9rZW5Bc3luYyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRUb2tlbkFzeW5jKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5lbmRwb2ludHMub2F1dGgyVG9rZW5VcmwudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0ge1xuICAgICAgICAgICAgY2xpZW50X2lkOiBvcHRpb25zLmNsaWVudF9pZCB8fCB0aGlzLl9jbGllbnRJZCxcbiAgICAgICAgICAgIGNvZGVfdmVyaWZpZXI6IG9wdGlvbnMuY29kZVZlcmlmaWVyLFxuICAgICAgICAgICAgY29kZTogb3B0aW9ucy5jb2RlLFxuICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ2F1dGhvcml6YXRpb25fY29kZScsXG4gICAgICAgICAgICByZWRpcmVjdF91cmk6IG9wdGlvbnMucmVkaXJlY3RfdXJpIHx8IHRoaXMucmVkaXJlY3RVcmksXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmNsaWVudEF1dGhlbnRpY2F0aW9uID09PSBDbGllbnRBdXRoZW50aWNhdGlvbi5DbGllbnRTZWNyZXRCYXNpYykge1xuICAgICAgICAgICAgY29uc3QgYmFzaWMgPSBCdWZmZXIuZnJvbShgJHt0aGlzLl9jbGllbnRJZH06JHt0aGlzLl9jbGllbnRTZWNyZXR9YCk7XG4gICAgICAgICAgICBoZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBgQmFzaWMgJHtiYXNpYy50b1N0cmluZygnYmFzZTY0Jyl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jbGllbnRBdXRoZW50aWNhdGlvbiA9PT0gQ2xpZW50QXV0aGVudGljYXRpb24uQ2xpZW50U2VjcmV0UG9zdCkge1xuICAgICAgICAgICAgdmFsdWVzLmNsaWVudF9zZWNyZXQgPSB0aGlzLl9jbGllbnRTZWNyZXQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy50cmFuc3BvcnRlci5yZXF1ZXN0KHtcbiAgICAgICAgICAgIC4uLk9BdXRoMkNsaWVudC5SRVRSWV9DT05GSUcsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGRhdGE6IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh2YWx1ZXMpLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRva2VucyA9IHJlcy5kYXRhO1xuICAgICAgICBpZiAocmVzLmRhdGEgJiYgcmVzLmRhdGEuZXhwaXJlc19pbikge1xuICAgICAgICAgICAgdG9rZW5zLmV4cGlyeV9kYXRlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyByZXMuZGF0YS5leHBpcmVzX2luICogMTAwMDtcbiAgICAgICAgICAgIGRlbGV0ZSB0b2tlbnMuZXhwaXJlc19pbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJ3Rva2VucycsIHRva2Vucyk7XG4gICAgICAgIHJldHVybiB7IHRva2VucywgcmVzIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZnJlc2hlcyB0aGUgYWNjZXNzIHRva2VuLlxuICAgICAqIEBwYXJhbSByZWZyZXNoX3Rva2VuIEV4aXN0aW5nIHJlZnJlc2ggdG9rZW4uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBhc3luYyByZWZyZXNoVG9rZW4ocmVmcmVzaFRva2VuKSB7XG4gICAgICAgIGlmICghcmVmcmVzaFRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW5Ob0NhY2hlKHJlZnJlc2hUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYSByZXF1ZXN0IHRvIHJlZnJlc2ggdXNpbmcgdGhlIHNhbWUgdG9rZW4gaGFzIHN0YXJ0ZWQsXG4gICAgICAgIC8vIHJldHVybiB0aGUgc2FtZSBwcm9taXNlLlxuICAgICAgICBpZiAodGhpcy5yZWZyZXNoVG9rZW5Qcm9taXNlcy5oYXMocmVmcmVzaFRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaFRva2VuUHJvbWlzZXMuZ2V0KHJlZnJlc2hUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcCA9IHRoaXMucmVmcmVzaFRva2VuTm9DYWNoZShyZWZyZXNoVG9rZW4pLnRoZW4ociA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hUb2tlblByb21pc2VzLmRlbGV0ZShyZWZyZXNoVG9rZW4pO1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0sIGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW5Qcm9taXNlcy5kZWxldGUocmVmcmVzaFRva2VuKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZnJlc2hUb2tlblByb21pc2VzLnNldChyZWZyZXNoVG9rZW4sIHApO1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgYXN5bmMgcmVmcmVzaFRva2VuTm9DYWNoZShyZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXJlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyByZWZyZXNoIHRva2VuIGlzIHNldC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmVuZHBvaW50cy5vYXV0aDJUb2tlblVybC50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogcmVmcmVzaFRva2VuLFxuICAgICAgICAgICAgY2xpZW50X2lkOiB0aGlzLl9jbGllbnRJZCxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IHRoaXMuX2NsaWVudFNlY3JldCxcbiAgICAgICAgICAgIGdyYW50X3R5cGU6ICdyZWZyZXNoX3Rva2VuJyxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHJlcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHJlcXVlc3QgZm9yIG5ldyB0b2tlblxuICAgICAgICAgICAgcmVzID0gYXdhaXQgdGhpcy50cmFuc3BvcnRlci5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAuLi5PQXV0aDJDbGllbnQuUkVUUllfQ09ORklHLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICBkYXRhOiBxdWVyeXN0cmluZy5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIGdheGlvc18xLkdheGlvc0Vycm9yICYmXG4gICAgICAgICAgICAgICAgZS5tZXNzYWdlID09PSAnaW52YWxpZF9ncmFudCcgJiZcbiAgICAgICAgICAgICAgICAoKF9hID0gZS5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRhdGEpICYmXG4gICAgICAgICAgICAgICAgL1JlQXV0aC9pLnRlc3QoZS5yZXNwb25zZS5kYXRhLmVycm9yX2Rlc2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgICAgIGUubWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KGUucmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRva2VucyA9IHJlcy5kYXRhO1xuICAgICAgICAvLyBUT0RPOiBkZS1kdXBsaWNhdGUgdGhpcyBjb2RlIGZyb20gYSBmZXcgc3BvdHNcbiAgICAgICAgaWYgKHJlcy5kYXRhICYmIHJlcy5kYXRhLmV4cGlyZXNfaW4pIHtcbiAgICAgICAgICAgIHRva2Vucy5leHBpcnlfZGF0ZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgcmVzLmRhdGEuZXhwaXJlc19pbiAqIDEwMDA7XG4gICAgICAgICAgICBkZWxldGUgdG9rZW5zLmV4cGlyZXNfaW47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCd0b2tlbnMnLCB0b2tlbnMpO1xuICAgICAgICByZXR1cm4geyB0b2tlbnMsIHJlcyB9O1xuICAgIH1cbiAgICByZWZyZXNoQWNjZXNzVG9rZW4oY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hBY2Nlc3NUb2tlbkFzeW5jKCkudGhlbihyID0+IGNhbGxiYWNrKG51bGwsIHIuY3JlZGVudGlhbHMsIHIucmVzKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaEFjY2Vzc1Rva2VuQXN5bmMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZWZyZXNoQWNjZXNzVG9rZW5Bc3luYygpIHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMucmVmcmVzaFRva2VuKHRoaXMuY3JlZGVudGlhbHMucmVmcmVzaF90b2tlbik7XG4gICAgICAgIGNvbnN0IHRva2VucyA9IHIudG9rZW5zO1xuICAgICAgICB0b2tlbnMucmVmcmVzaF90b2tlbiA9IHRoaXMuY3JlZGVudGlhbHMucmVmcmVzaF90b2tlbjtcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IHRva2VucztcbiAgICAgICAgcmV0dXJuIHsgY3JlZGVudGlhbHM6IHRoaXMuY3JlZGVudGlhbHMsIHJlczogci5yZXMgfTtcbiAgICB9XG4gICAgZ2V0QWNjZXNzVG9rZW4oY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmdldEFjY2Vzc1Rva2VuQXN5bmMoKS50aGVuKHIgPT4gY2FsbGJhY2sobnVsbCwgci50b2tlbiwgci5yZXMpLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBY2Nlc3NUb2tlbkFzeW5jKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0QWNjZXNzVG9rZW5Bc3luYygpIHtcbiAgICAgICAgY29uc3Qgc2hvdWxkUmVmcmVzaCA9ICF0aGlzLmNyZWRlbnRpYWxzLmFjY2Vzc190b2tlbiB8fCB0aGlzLmlzVG9rZW5FeHBpcmluZygpO1xuICAgICAgICBpZiAoc2hvdWxkUmVmcmVzaCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNyZWRlbnRpYWxzLnJlZnJlc2hfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWZyZXNoSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZyZXNoZWRBY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMucHJvY2Vzc0FuZFZhbGlkYXRlUmVmcmVzaEhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZnJlc2hlZEFjY2Vzc1Rva2VuID09PSBudWxsIHx8IHJlZnJlc2hlZEFjY2Vzc1Rva2VuID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWZyZXNoZWRBY2Nlc3NUb2tlbi5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3JlZGVudGlhbHMocmVmcmVzaGVkQWNjZXNzVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdG9rZW46IHRoaXMuY3JlZGVudGlhbHMuYWNjZXNzX3Rva2VuIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcmVmcmVzaCB0b2tlbiBvciByZWZyZXNoIGhhbmRsZXIgY2FsbGJhY2sgaXMgc2V0LicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnJlZnJlc2hBY2Nlc3NUb2tlbkFzeW5jKCk7XG4gICAgICAgICAgICBpZiAoIXIuY3JlZGVudGlhbHMgfHwgKHIuY3JlZGVudGlhbHMgJiYgIXIuY3JlZGVudGlhbHMuYWNjZXNzX3Rva2VuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJlZnJlc2ggYWNjZXNzIHRva2VuLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgdG9rZW46IHIuY3JlZGVudGlhbHMuYWNjZXNzX3Rva2VuLCByZXM6IHIucmVzIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyB0b2tlbjogdGhpcy5jcmVkZW50aWFscy5hY2Nlc3NfdG9rZW4gfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbWFpbiBhdXRoZW50aWNhdGlvbiBpbnRlcmZhY2UuICBJdCB0YWtlcyBhbiBvcHRpb25hbCB1cmwgd2hpY2ggd2hlblxuICAgICAqIHByZXNlbnQgaXMgdGhlIGVuZHBvaW50IGJlaW5nIGFjY2Vzc2VkLCBhbmQgcmV0dXJucyBhIFByb21pc2Ugd2hpY2hcbiAgICAgKiByZXNvbHZlcyB3aXRoIGF1dGhvcml6YXRpb24gaGVhZGVyIGZpZWxkcy5cbiAgICAgKlxuICAgICAqIEluIE9BdXRoMkNsaWVudCwgdGhlIHJlc3VsdCBoYXMgdGhlIGZvcm06XG4gICAgICogeyBBdXRob3JpemF0aW9uOiAnQmVhcmVyIDxhY2Nlc3NfdG9rZW5fdmFsdWU+JyB9XG4gICAgICogQHBhcmFtIHVybCBUaGUgb3B0aW9uYWwgdXJsIGJlaW5nIGF1dGhvcml6ZWRcbiAgICAgKi9cbiAgICBhc3luYyBnZXRSZXF1ZXN0SGVhZGVycyh1cmwpIHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IChhd2FpdCB0aGlzLmdldFJlcXVlc3RNZXRhZGF0YUFzeW5jKHVybCkpLmhlYWRlcnM7XG4gICAgICAgIHJldHVybiBoZWFkZXJzO1xuICAgIH1cbiAgICBhc3luYyBnZXRSZXF1ZXN0TWV0YWRhdGFBc3luYyhcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgdXJsKSB7XG4gICAgICAgIGNvbnN0IHRoaXNDcmVkcyA9IHRoaXMuY3JlZGVudGlhbHM7XG4gICAgICAgIGlmICghdGhpc0NyZWRzLmFjY2Vzc190b2tlbiAmJlxuICAgICAgICAgICAgIXRoaXNDcmVkcy5yZWZyZXNoX3Rva2VuICYmXG4gICAgICAgICAgICAhdGhpcy5hcGlLZXkgJiZcbiAgICAgICAgICAgICF0aGlzLnJlZnJlc2hIYW5kbGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFjY2VzcywgcmVmcmVzaCB0b2tlbiwgQVBJIGtleSBvciByZWZyZXNoIGhhbmRsZXIgY2FsbGJhY2sgaXMgc2V0LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzQ3JlZHMuYWNjZXNzX3Rva2VuICYmICF0aGlzLmlzVG9rZW5FeHBpcmluZygpKSB7XG4gICAgICAgICAgICB0aGlzQ3JlZHMudG9rZW5fdHlwZSA9IHRoaXNDcmVkcy50b2tlbl90eXBlIHx8ICdCZWFyZXInO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiB0aGlzQ3JlZHMudG9rZW5fdHlwZSArICcgJyArIHRoaXNDcmVkcy5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgaGVhZGVyczogdGhpcy5hZGRTaGFyZWRNZXRhZGF0YUhlYWRlcnMoaGVhZGVycykgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiByZWZyZXNoSGFuZGxlciBleGlzdHMsIGNhbGwgcHJvY2Vzc0FuZFZhbGlkYXRlUmVmcmVzaEhhbmRsZXIoKS5cbiAgICAgICAgaWYgKHRoaXMucmVmcmVzaEhhbmRsZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZnJlc2hlZEFjY2Vzc1Rva2VuID0gYXdhaXQgdGhpcy5wcm9jZXNzQW5kVmFsaWRhdGVSZWZyZXNoSGFuZGxlcigpO1xuICAgICAgICAgICAgaWYgKHJlZnJlc2hlZEFjY2Vzc1Rva2VuID09PSBudWxsIHx8IHJlZnJlc2hlZEFjY2Vzc1Rva2VuID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWZyZXNoZWRBY2Nlc3NUb2tlbi5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldENyZWRlbnRpYWxzKHJlZnJlc2hlZEFjY2Vzc1Rva2VuKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAnQmVhcmVyICcgKyB0aGlzLmNyZWRlbnRpYWxzLmFjY2Vzc190b2tlbixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGhlYWRlcnM6IHRoaXMuYWRkU2hhcmVkTWV0YWRhdGFIZWFkZXJzKGhlYWRlcnMpIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXBpS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4geyBoZWFkZXJzOiB7ICdYLUdvb2ctQXBpLUtleSc6IHRoaXMuYXBpS2V5IH0gfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgciA9IG51bGw7XG4gICAgICAgIGxldCB0b2tlbnMgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgciA9IGF3YWl0IHRoaXMucmVmcmVzaFRva2VuKHRoaXNDcmVkcy5yZWZyZXNoX3Rva2VuKTtcbiAgICAgICAgICAgIHRva2VucyA9IHIudG9rZW5zO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBlcnI7XG4gICAgICAgICAgICBpZiAoZS5yZXNwb25zZSAmJlxuICAgICAgICAgICAgICAgIChlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAzIHx8IGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpKSB7XG4gICAgICAgICAgICAgICAgZS5tZXNzYWdlID0gYENvdWxkIG5vdCByZWZyZXNoIGFjY2VzcyB0b2tlbjogJHtlLm1lc3NhZ2V9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSB0aGlzLmNyZWRlbnRpYWxzO1xuICAgICAgICBjcmVkZW50aWFscy50b2tlbl90eXBlID0gY3JlZGVudGlhbHMudG9rZW5fdHlwZSB8fCAnQmVhcmVyJztcbiAgICAgICAgdG9rZW5zLnJlZnJlc2hfdG9rZW4gPSBjcmVkZW50aWFscy5yZWZyZXNoX3Rva2VuO1xuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID0gdG9rZW5zO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogY3JlZGVudGlhbHMudG9rZW5fdHlwZSArICcgJyArIHRva2Vucy5hY2Nlc3NfdG9rZW4sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7IGhlYWRlcnM6IHRoaXMuYWRkU2hhcmVkTWV0YWRhdGFIZWFkZXJzKGhlYWRlcnMpLCByZXM6IHIucmVzIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhbiBVUkwgdG8gcmV2b2tlIHRoZSBnaXZlbiB0b2tlbi5cbiAgICAgKiBAcGFyYW0gdG9rZW4gVGhlIGV4aXN0aW5nIHRva2VuIHRvIGJlIHJldm9rZWQuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgaW5zdGFuY2UgbWV0aG9kIHtAbGluayBPQXV0aDJDbGllbnQuZ2V0UmV2b2tlVG9rZW5VUkx9XG4gICAgICovXG4gICAgc3RhdGljIGdldFJldm9rZVRva2VuVXJsKHRva2VuKSB7XG4gICAgICAgIHJldHVybiBuZXcgT0F1dGgyQ2xpZW50KCkuZ2V0UmV2b2tlVG9rZW5VUkwodG9rZW4pLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIFVSTCB0byByZXZva2UgdGhlIGdpdmVuIHRva2VuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRva2VuIFRoZSBleGlzdGluZyB0b2tlbiB0byBiZSByZXZva2VkLlxuICAgICAqL1xuICAgIGdldFJldm9rZVRva2VuVVJMKHRva2VuKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwodGhpcy5lbmRwb2ludHMub2F1dGgyUmV2b2tlVXJsKTtcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3Rva2VuJywgdG9rZW4pO1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgICByZXZva2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIC4uLk9BdXRoMkNsaWVudC5SRVRSWV9DT05GSUcsXG4gICAgICAgICAgICB1cmw6IHRoaXMuZ2V0UmV2b2tlVG9rZW5VUkwodG9rZW4pLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydGVyXG4gICAgICAgICAgICAgICAgLnJlcXVlc3Qob3B0cylcbiAgICAgICAgICAgICAgICAudGhlbihyID0+IGNhbGxiYWNrKG51bGwsIHIpLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRlci5yZXF1ZXN0KG9wdHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldm9rZUNyZWRlbnRpYWxzKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5yZXZva2VDcmVkZW50aWFsc0FzeW5jKCkudGhlbihyZXMgPT4gY2FsbGJhY2sobnVsbCwgcmVzKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV2b2tlQ3JlZGVudGlhbHNBc3luYygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHJldm9rZUNyZWRlbnRpYWxzQXN5bmMoKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jcmVkZW50aWFscy5hY2Nlc3NfdG9rZW47XG4gICAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSB7fTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXZva2VUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFjY2VzcyB0b2tlbiB0byByZXZva2UuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVxdWVzdChvcHRzLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEFzeW5jKG9wdHMpLnRoZW4ociA9PiBjYWxsYmFjayhudWxsLCByKSwgZSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUsIGUucmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0QXN5bmMob3B0cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcmVxdWVzdEFzeW5jKG9wdHMsIHJlQXV0aFJldHJpZWQgPSBmYWxzZSkge1xuICAgICAgICBsZXQgcjI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5nZXRSZXF1ZXN0TWV0YWRhdGFBc3luYyhvcHRzLnVybCk7XG4gICAgICAgICAgICBvcHRzLmhlYWRlcnMgPSBvcHRzLmhlYWRlcnMgfHwge307XG4gICAgICAgICAgICBpZiAoci5oZWFkZXJzICYmIHIuaGVhZGVyc1sneC1nb29nLXVzZXItcHJvamVjdCddKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5oZWFkZXJzWyd4LWdvb2ctdXNlci1wcm9qZWN0J10gPSByLmhlYWRlcnNbJ3gtZ29vZy11c2VyLXByb2plY3QnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyLmhlYWRlcnMgJiYgci5oZWFkZXJzLkF1dGhvcml6YXRpb24pIHtcbiAgICAgICAgICAgICAgICBvcHRzLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IHIuaGVhZGVycy5BdXRob3JpemF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgb3B0cy5oZWFkZXJzWydYLUdvb2ctQXBpLUtleSddID0gdGhpcy5hcGlLZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByMiA9IGF3YWl0IHRoaXMudHJhbnNwb3J0ZXIucmVxdWVzdChvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gZS5yZXNwb25zZTtcbiAgICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXNDb2RlID0gcmVzLnN0YXR1cztcbiAgICAgICAgICAgICAgICAvLyBSZXRyeSB0aGUgcmVxdWVzdCBmb3IgbWV0YWRhdGEgaWYgdGhlIGZvbGxvd2luZyBjcml0ZXJpYSBhcmUgdHJ1ZTpcbiAgICAgICAgICAgICAgICAvLyAtIFdlIGhhdmVuJ3QgYWxyZWFkeSByZXRyaWVkLiAgSXQgb25seSBtYWtlcyBzZW5zZSB0byByZXRyeSBvbmNlLlxuICAgICAgICAgICAgICAgIC8vIC0gVGhlIHJlc3BvbnNlIHdhcyBhIDQwMSBvciBhIDQwM1xuICAgICAgICAgICAgICAgIC8vIC0gVGhlIHJlcXVlc3QgZGlkbid0IHNlbmQgYSByZWFkYWJsZVN0cmVhbVxuICAgICAgICAgICAgICAgIC8vIC0gQW4gYWNjZXNzX3Rva2VuIGFuZCByZWZyZXNoX3Rva2VuIHdlcmUgYXZhaWxhYmxlLCBidXQgZWl0aGVyIG5vXG4gICAgICAgICAgICAgICAgLy8gICBleHBpcnlfZGF0ZSB3YXMgYXZhaWxhYmxlIG9yIHRoZSBmb3JjZVJlZnJlc2hPbkZhaWx1cmUgZmxhZyBpcyBzZXQuXG4gICAgICAgICAgICAgICAgLy8gICBUaGUgYWJzZW50IGV4cGlyeV9kYXRlIGNhc2UgY2FuIGhhcHBlbiB3aGVuIGRldmVsb3BlcnMgc3Rhc2ggdGhlXG4gICAgICAgICAgICAgICAgLy8gICBhY2Nlc3NfdG9rZW4gYW5kIHJlZnJlc2hfdG9rZW4gZm9yIGxhdGVyIHVzZSwgYnV0IHRoZSBhY2Nlc3NfdG9rZW5cbiAgICAgICAgICAgICAgICAvLyAgIGZhaWxzIG9uIHRoZSBmaXJzdCB0cnkgYmVjYXVzZSBpdCdzIGV4cGlyZWQuIFNvbWUgZGV2ZWxvcGVycyBtYXlcbiAgICAgICAgICAgICAgICAvLyAgIGNob29zZSB0byBlbmFibGUgZm9yY2VSZWZyZXNoT25GYWlsdXJlIHRvIG1pdGlnYXRlIHRpbWUtcmVsYXRlZFxuICAgICAgICAgICAgICAgIC8vICAgZXJyb3JzLlxuICAgICAgICAgICAgICAgIC8vIE9yIHRoZSBmb2xsb3dpbmcgY3JpdGVyaWEgYXJlIHRydWU6XG4gICAgICAgICAgICAgICAgLy8gLSBXZSBoYXZlbid0IGFscmVhZHkgcmV0cmllZC4gIEl0IG9ubHkgbWFrZXMgc2Vuc2UgdG8gcmV0cnkgb25jZS5cbiAgICAgICAgICAgICAgICAvLyAtIFRoZSByZXNwb25zZSB3YXMgYSA0MDEgb3IgYSA0MDNcbiAgICAgICAgICAgICAgICAvLyAtIFRoZSByZXF1ZXN0IGRpZG4ndCBzZW5kIGEgcmVhZGFibGVTdHJlYW1cbiAgICAgICAgICAgICAgICAvLyAtIE5vIHJlZnJlc2hfdG9rZW4gd2FzIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgIC8vIC0gQW4gYWNjZXNzX3Rva2VuIGFuZCBhIHJlZnJlc2hIYW5kbGVyIGNhbGxiYWNrIHdlcmUgYXZhaWxhYmxlLCBidXRcbiAgICAgICAgICAgICAgICAvLyAgIGVpdGhlciBubyBleHBpcnlfZGF0ZSB3YXMgYXZhaWxhYmxlIG9yIHRoZSBmb3JjZVJlZnJlc2hPbkZhaWx1cmVcbiAgICAgICAgICAgICAgICAvLyAgIGZsYWcgaXMgc2V0LiBUaGUgYWNjZXNzX3Rva2VuIGZhaWxzIG9uIHRoZSBmaXJzdCB0cnkgYmVjYXVzZSBpdCdzXG4gICAgICAgICAgICAgICAgLy8gICBleHBpcmVkLiBTb21lIGRldmVsb3BlcnMgbWF5IGNob29zZSB0byBlbmFibGUgZm9yY2VSZWZyZXNoT25GYWlsdXJlXG4gICAgICAgICAgICAgICAgLy8gICB0byBtaXRpZ2F0ZSB0aW1lLXJlbGF0ZWQgZXJyb3JzLlxuICAgICAgICAgICAgICAgIGNvbnN0IG1heVJlcXVpcmVSZWZyZXNoID0gdGhpcy5jcmVkZW50aWFscyAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxzLmFjY2Vzc190b2tlbiAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxzLnJlZnJlc2hfdG9rZW4gJiZcbiAgICAgICAgICAgICAgICAgICAgKCF0aGlzLmNyZWRlbnRpYWxzLmV4cGlyeV9kYXRlIHx8IHRoaXMuZm9yY2VSZWZyZXNoT25GYWlsdXJlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXlSZXF1aXJlUmVmcmVzaFdpdGhOb1JlZnJlc2hUb2tlbiA9IHRoaXMuY3JlZGVudGlhbHMgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVkZW50aWFscy5hY2Nlc3NfdG9rZW4gJiZcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMuY3JlZGVudGlhbHMucmVmcmVzaF90b2tlbiAmJlxuICAgICAgICAgICAgICAgICAgICAoIXRoaXMuY3JlZGVudGlhbHMuZXhwaXJ5X2RhdGUgfHwgdGhpcy5mb3JjZVJlZnJlc2hPbkZhaWx1cmUpICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaEhhbmRsZXI7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNSZWFkYWJsZVN0cmVhbSA9IHJlcy5jb25maWcuZGF0YSBpbnN0YW5jZW9mIHN0cmVhbS5SZWFkYWJsZTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0F1dGhFcnIgPSBzdGF0dXNDb2RlID09PSA0MDEgfHwgc3RhdHVzQ29kZSA9PT0gNDAzO1xuICAgICAgICAgICAgICAgIGlmICghcmVBdXRoUmV0cmllZCAmJlxuICAgICAgICAgICAgICAgICAgICBpc0F1dGhFcnIgJiZcbiAgICAgICAgICAgICAgICAgICAgIWlzUmVhZGFibGVTdHJlYW0gJiZcbiAgICAgICAgICAgICAgICAgICAgbWF5UmVxdWlyZVJlZnJlc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWZyZXNoQWNjZXNzVG9rZW5Bc3luYygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0QXN5bmMob3B0cywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFyZUF1dGhSZXRyaWVkICYmXG4gICAgICAgICAgICAgICAgICAgIGlzQXV0aEVyciAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNSZWFkYWJsZVN0cmVhbSAmJlxuICAgICAgICAgICAgICAgICAgICBtYXlSZXF1aXJlUmVmcmVzaFdpdGhOb1JlZnJlc2hUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZyZXNoZWRBY2Nlc3NUb2tlbiA9IGF3YWl0IHRoaXMucHJvY2Vzc0FuZFZhbGlkYXRlUmVmcmVzaEhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlZnJlc2hlZEFjY2Vzc1Rva2VuID09PSBudWxsIHx8IHJlZnJlc2hlZEFjY2Vzc1Rva2VuID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWZyZXNoZWRBY2Nlc3NUb2tlbi5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3JlZGVudGlhbHMocmVmcmVzaGVkQWNjZXNzVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RBc3luYyhvcHRzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByMjtcbiAgICB9XG4gICAgdmVyaWZ5SWRUb2tlbihvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHVzZWQgdG8gYWNjZXB0IHR3byBhcmd1bWVudHMgaW5zdGVhZCBvZiBhbiBvcHRpb25zIG9iamVjdC5cbiAgICAgICAgLy8gQ2hlY2sgdGhlIHR5cGVzIHRvIGhlbHAgdXNlcnMgdXBncmFkZSB3aXRoIGxlc3MgcGFpbi5cbiAgICAgICAgLy8gVGhpcyBjaGVjayBjYW4gYmUgcmVtb3ZlZCBhZnRlciBhIDIuMCByZWxlYXNlLlxuICAgICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9ucyBvYmplY3QgYXMgdGhlIGZpcnN0IHBhcmFtZXRlciwgd2hpY2ggaW5jbHVkZXMgdGhlIGlkVG9rZW4sIGF1ZGllbmNlLCBhbmQgbWF4RXhwaXJ5LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy52ZXJpZnlJZFRva2VuQXN5bmMob3B0aW9ucykudGhlbihyID0+IGNhbGxiYWNrKG51bGwsIHIpLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52ZXJpZnlJZFRva2VuQXN5bmMob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgdmVyaWZ5SWRUb2tlbkFzeW5jKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmlkVG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZlcmlmeUlkVG9rZW4gbWV0aG9kIHJlcXVpcmVzIGFuIElEIFRva2VuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdldEZlZGVyYXRlZFNpZ25vbkNlcnRzQXN5bmMoKTtcbiAgICAgICAgY29uc3QgbG9naW4gPSBhd2FpdCB0aGlzLnZlcmlmeVNpZ25lZEp3dFdpdGhDZXJ0c0FzeW5jKG9wdGlvbnMuaWRUb2tlbiwgcmVzcG9uc2UuY2VydHMsIG9wdGlvbnMuYXVkaWVuY2UsIHRoaXMuaXNzdWVycywgb3B0aW9ucy5tYXhFeHBpcnkpO1xuICAgICAgICByZXR1cm4gbG9naW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9idGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByb3Zpc2lvbmVkIGFjY2VzcyB0b2tlbi4gIEVzcGVjaWFsbHkgdXNlZnVsXG4gICAgICogaWYgeW91IHdhbnQgdG8gY2hlY2sgdGhlIHNjb3BlcyB0aGF0IHdlcmUgcHJvdmlzaW9uZWQgdG8gYSBnaXZlbiB0b2tlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY2Nlc3NUb2tlbiBSZXF1aXJlZC4gIFRoZSBBY2Nlc3MgVG9rZW4gZm9yIHdoaWNoIHlvdSB3YW50IHRvIGdldFxuICAgICAqIHVzZXIgaW5mby5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbkluZm8oYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLnRyYW5zcG9ydGVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgLi4uT0F1dGgyQ2xpZW50LlJFVFJZX0NPTkZJRyxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YWNjZXNzVG9rZW59YCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cmw6IHRoaXMuZW5kcG9pbnRzLnRva2VuSW5mb1VybC50b1N0cmluZygpLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaW5mbyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgZXhwaXJ5X2RhdGU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgZGF0YS5leHBpcmVzX2luICogMTAwMCxcbiAgICAgICAgICAgIHNjb3BlczogZGF0YS5zY29wZS5zcGxpdCgnICcpLFxuICAgICAgICB9LCBkYXRhKTtcbiAgICAgICAgZGVsZXRlIGluZm8uZXhwaXJlc19pbjtcbiAgICAgICAgZGVsZXRlIGluZm8uc2NvcGU7XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgICBnZXRGZWRlcmF0ZWRTaWdub25DZXJ0cyhjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0RmVkZXJhdGVkU2lnbm9uQ2VydHNBc3luYygpLnRoZW4ociA9PiBjYWxsYmFjayhudWxsLCByLmNlcnRzLCByLnJlcyksIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZlZGVyYXRlZFNpZ25vbkNlcnRzQXN5bmMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRGZWRlcmF0ZWRTaWdub25DZXJ0c0FzeW5jKCkge1xuICAgICAgICBjb25zdCBub3dUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIGNvbnN0IGZvcm1hdCA9ICgwLCBjcnlwdG9fMS5oYXNCcm93c2VyQ3J5cHRvKSgpXG4gICAgICAgICAgICA/IENlcnRpZmljYXRlRm9ybWF0LkpXS1xuICAgICAgICAgICAgOiBDZXJ0aWZpY2F0ZUZvcm1hdC5QRU07XG4gICAgICAgIGlmICh0aGlzLmNlcnRpZmljYXRlRXhwaXJ5ICYmXG4gICAgICAgICAgICBub3dUaW1lIDwgdGhpcy5jZXJ0aWZpY2F0ZUV4cGlyeS5nZXRUaW1lKCkgJiZcbiAgICAgICAgICAgIHRoaXMuY2VydGlmaWNhdGVDYWNoZUZvcm1hdCA9PT0gZm9ybWF0KSB7XG4gICAgICAgICAgICByZXR1cm4geyBjZXJ0czogdGhpcy5jZXJ0aWZpY2F0ZUNhY2hlLCBmb3JtYXQgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzO1xuICAgICAgICBsZXQgdXJsO1xuICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgY2FzZSBDZXJ0aWZpY2F0ZUZvcm1hdC5QRU06XG4gICAgICAgICAgICAgICAgdXJsID0gdGhpcy5lbmRwb2ludHMub2F1dGgyRmVkZXJhdGVkU2lnbm9uUGVtQ2VydHNVcmwudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2VydGlmaWNhdGVGb3JtYXQuSldLOlxuICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuZW5kcG9pbnRzLm9hdXRoMkZlZGVyYXRlZFNpZ25vbkp3a0NlcnRzVXJsLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgY2VydGlmaWNhdGUgZm9ybWF0ICR7Zm9ybWF0fWApO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXMgPSBhd2FpdCB0aGlzLnRyYW5zcG9ydGVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIC4uLk9BdXRoMkNsaWVudC5SRVRSWV9DT05GSUcsXG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlLm1lc3NhZ2UgPSBgRmFpbGVkIHRvIHJldHJpZXZlIHZlcmlmaWNhdGlvbiBjZXJ0aWZpY2F0ZXM6ICR7ZS5tZXNzYWdlfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhY2hlQ29udHJvbCA9IHJlcyA/IHJlcy5oZWFkZXJzWydjYWNoZS1jb250cm9sJ10gOiB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBjYWNoZUFnZSA9IC0xO1xuICAgICAgICBpZiAoY2FjaGVDb250cm9sKSB7XG4gICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCgnbWF4LWFnZT0oWzAtOV0qKScpO1xuICAgICAgICAgICAgY29uc3QgcmVnZXhSZXN1bHQgPSBwYXR0ZXJuLmV4ZWMoY2FjaGVDb250cm9sKTtcbiAgICAgICAgICAgIGlmIChyZWdleFJlc3VsdCAmJiByZWdleFJlc3VsdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAvLyBDYWNoZSByZXN1bHRzIHdpdGggbWF4LWFnZSAoaW4gc2Vjb25kcylcbiAgICAgICAgICAgICAgICBjYWNoZUFnZSA9IE51bWJlcihyZWdleFJlc3VsdFsxXSkgKiAxMDAwOyAvLyBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgY2VydGlmaWNhdGVzID0ge307XG4gICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjYXNlIENlcnRpZmljYXRlRm9ybWF0LlBFTTpcbiAgICAgICAgICAgICAgICBjZXJ0aWZpY2F0ZXMgPSByZXMuZGF0YTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2VydGlmaWNhdGVGb3JtYXQuSldLOlxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHJlcy5kYXRhLmtleXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VydGlmaWNhdGVzW2tleS5raWRdID0ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBjZXJ0aWZpY2F0ZSBmb3JtYXQgJHtmb3JtYXR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdGhpcy5jZXJ0aWZpY2F0ZUV4cGlyeSA9XG4gICAgICAgICAgICBjYWNoZUFnZSA9PT0gLTEgPyBudWxsIDogbmV3IERhdGUobm93LmdldFRpbWUoKSArIGNhY2hlQWdlKTtcbiAgICAgICAgdGhpcy5jZXJ0aWZpY2F0ZUNhY2hlID0gY2VydGlmaWNhdGVzO1xuICAgICAgICB0aGlzLmNlcnRpZmljYXRlQ2FjaGVGb3JtYXQgPSBmb3JtYXQ7XG4gICAgICAgIHJldHVybiB7IGNlcnRzOiBjZXJ0aWZpY2F0ZXMsIGZvcm1hdCwgcmVzIH07XG4gICAgfVxuICAgIGdldElhcFB1YmxpY0tleXMoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmdldElhcFB1YmxpY0tleXNBc3luYygpLnRoZW4ociA9PiBjYWxsYmFjayhudWxsLCByLnB1YmtleXMsIHIucmVzKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SWFwUHVibGljS2V5c0FzeW5jKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0SWFwUHVibGljS2V5c0FzeW5jKCkge1xuICAgICAgICBsZXQgcmVzO1xuICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmVuZHBvaW50cy5vYXV0aDJJYXBQdWJsaWNLZXlVcmwudG9TdHJpbmcoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlcyA9IGF3YWl0IHRoaXMudHJhbnNwb3J0ZXIucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgLi4uT0F1dGgyQ2xpZW50LlJFVFJZX0NPTkZJRyxcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIGUubWVzc2FnZSA9IGBGYWlsZWQgdG8gcmV0cmlldmUgdmVyaWZpY2F0aW9uIGNlcnRpZmljYXRlczogJHtlLm1lc3NhZ2V9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcHVia2V5czogcmVzLmRhdGEsIHJlcyB9O1xuICAgIH1cbiAgICB2ZXJpZnlTaWduZWRKd3RXaXRoQ2VydHMoKSB7XG4gICAgICAgIC8vIFRvIG1ha2UgdGhlIGNvZGUgY29tcGF0aWJsZSB3aXRoIGJyb3dzZXIgU3VidGxlQ3J5cHRvIHdlIG5lZWQgdG8gbWFrZVxuICAgICAgICAvLyB0aGlzIG1ldGhvZCBhc3luYy5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZXJpZnlTaWduZWRKd3RXaXRoQ2VydHMgaXMgcmVtb3ZlZCwgcGxlYXNlIHVzZSB2ZXJpZnlTaWduZWRKd3RXaXRoQ2VydHNBc3luYyBpbnN0ZWFkLicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWZXJpZnkgdGhlIGlkIHRva2VuIGlzIHNpZ25lZCB3aXRoIHRoZSBjb3JyZWN0IGNlcnRpZmljYXRlXG4gICAgICogYW5kIGlzIGZyb20gdGhlIGNvcnJlY3QgYXVkaWVuY2UuXG4gICAgICogQHBhcmFtIGp3dCBUaGUgand0IHRvIHZlcmlmeSAoVGhlIElEIFRva2VuIGluIHRoaXMgY2FzZSkuXG4gICAgICogQHBhcmFtIGNlcnRzIFRoZSBhcnJheSBvZiBjZXJ0cyB0byB0ZXN0IHRoZSBqd3QgYWdhaW5zdC5cbiAgICAgKiBAcGFyYW0gcmVxdWlyZWRBdWRpZW5jZSBUaGUgYXVkaWVuY2UgdG8gdGVzdCB0aGUgand0IGFnYWluc3QuXG4gICAgICogQHBhcmFtIGlzc3VlcnMgVGhlIGFsbG93ZWQgaXNzdWVycyBvZiB0aGUgand0IChPcHRpb25hbCkuXG4gICAgICogQHBhcmFtIG1heEV4cGlyeSBUaGUgbWF4IGV4cGlyeSB0aGUgY2VydGlmaWNhdGUgY2FuIGJlIChPcHRpb25hbCkuXG4gICAgICogQHJldHVybiBSZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgdG8gTG9naW5UaWNrZXQgb24gdmVyaWZpY2F0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHZlcmlmeVNpZ25lZEp3dFdpdGhDZXJ0c0FzeW5jKGp3dCwgY2VydHMsIHJlcXVpcmVkQXVkaWVuY2UsIGlzc3VlcnMsIG1heEV4cGlyeSkge1xuICAgICAgICBjb25zdCBjcnlwdG8gPSAoMCwgY3J5cHRvXzEuY3JlYXRlQ3J5cHRvKSgpO1xuICAgICAgICBpZiAoIW1heEV4cGlyeSkge1xuICAgICAgICAgICAgbWF4RXhwaXJ5ID0gT0F1dGgyQ2xpZW50LkRFRkFVTFRfTUFYX1RPS0VOX0xJRkVUSU1FX1NFQ1NfO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gand0LnNwbGl0KCcuJyk7XG4gICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV3JvbmcgbnVtYmVyIG9mIHNlZ21lbnRzIGluIHRva2VuOiAnICsgand0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaWduZWQgPSBzZWdtZW50c1swXSArICcuJyArIHNlZ21lbnRzWzFdO1xuICAgICAgICBsZXQgc2lnbmF0dXJlID0gc2VnbWVudHNbMl07XG4gICAgICAgIGxldCBlbnZlbG9wZTtcbiAgICAgICAgbGV0IHBheWxvYWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlbnZlbG9wZSA9IEpTT04ucGFyc2UoY3J5cHRvLmRlY29kZUJhc2U2NFN0cmluZ1V0Zjgoc2VnbWVudHNbMF0pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA9IGBDYW4ndCBwYXJzZSB0b2tlbiBlbnZlbG9wZTogJHtzZWdtZW50c1swXX0nOiAke2Vyci5tZXNzYWdlfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlbnZlbG9wZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgcGFyc2UgdG9rZW4gZW52ZWxvcGU6IFwiICsgc2VnbWVudHNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShjcnlwdG8uZGVjb2RlQmFzZTY0U3RyaW5nVXRmOChzZWdtZW50c1sxXSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlID0gYENhbid0IHBhcnNlIHRva2VuIHBheWxvYWQgJyR7c2VnbWVudHNbMF19YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBheWxvYWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHBhcnNlIHRva2VuIHBheWxvYWQ6IFwiICsgc2VnbWVudHNbMV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNlcnRzLCBlbnZlbG9wZS5raWQpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCBwcmVzZW50LCB0aGVuIHRoZXJlJ3Mgbm8gcmVhc29uIHRvIGF0dGVtcHQgdmVyaWZpY2F0aW9uXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHBlbSBmb3VuZCBmb3IgZW52ZWxvcGU6ICcgKyBKU09OLnN0cmluZ2lmeShlbnZlbG9wZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNlcnQgPSBjZXJ0c1tlbnZlbG9wZS5raWRdO1xuICAgICAgICBpZiAoZW52ZWxvcGUuYWxnID09PSAnRVMyNTYnKSB7XG4gICAgICAgICAgICBzaWduYXR1cmUgPSBmb3JtYXRFY2RzYS5qb3NlVG9EZXIoc2lnbmF0dXJlLCAnRVMyNTYnKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmVyaWZpZWQgPSBhd2FpdCBjcnlwdG8udmVyaWZ5KGNlcnQsIHNpZ25lZCwgc2lnbmF0dXJlKTtcbiAgICAgICAgaWYgKCF2ZXJpZmllZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRva2VuIHNpZ25hdHVyZTogJyArIGp3dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwYXlsb2FkLmlhdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpc3N1ZSB0aW1lIGluIHRva2VuOiAnICsgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcGF5bG9hZC5leHApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZXhwaXJhdGlvbiB0aW1lIGluIHRva2VuOiAnICsgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlhdCA9IE51bWJlcihwYXlsb2FkLmlhdCk7XG4gICAgICAgIGlmIChpc05hTihpYXQpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpYXQgZmllbGQgdXNpbmcgaW52YWxpZCBmb3JtYXQnKTtcbiAgICAgICAgY29uc3QgZXhwID0gTnVtYmVyKHBheWxvYWQuZXhwKTtcbiAgICAgICAgaWYgKGlzTmFOKGV4cCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cCBmaWVsZCB1c2luZyBpbnZhbGlkIGZvcm1hdCcpO1xuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7XG4gICAgICAgIGlmIChleHAgPj0gbm93ICsgbWF4RXhwaXJ5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGlyYXRpb24gdGltZSB0b28gZmFyIGluIGZ1dHVyZTogJyArIEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlYXJsaWVzdCA9IGlhdCAtIE9BdXRoMkNsaWVudC5DTE9DS19TS0VXX1NFQ1NfO1xuICAgICAgICBjb25zdCBsYXRlc3QgPSBleHAgKyBPQXV0aDJDbGllbnQuQ0xPQ0tfU0tFV19TRUNTXztcbiAgICAgICAgaWYgKG5vdyA8IGVhcmxpZXN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rva2VuIHVzZWQgdG9vIGVhcmx5LCAnICtcbiAgICAgICAgICAgICAgICBub3cgK1xuICAgICAgICAgICAgICAgICcgPCAnICtcbiAgICAgICAgICAgICAgICBlYXJsaWVzdCArXG4gICAgICAgICAgICAgICAgJzogJyArXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub3cgPiBsYXRlc3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9rZW4gdXNlZCB0b28gbGF0ZSwgJyArXG4gICAgICAgICAgICAgICAgbm93ICtcbiAgICAgICAgICAgICAgICAnID4gJyArXG4gICAgICAgICAgICAgICAgbGF0ZXN0ICtcbiAgICAgICAgICAgICAgICAnOiAnICtcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzc3VlcnMgJiYgaXNzdWVycy5pbmRleE9mKHBheWxvYWQuaXNzKSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpc3N1ZXIsIGV4cGVjdGVkIG9uZSBvZiBbJyArXG4gICAgICAgICAgICAgICAgaXNzdWVycyArXG4gICAgICAgICAgICAgICAgJ10sIGJ1dCBnb3QgJyArXG4gICAgICAgICAgICAgICAgcGF5bG9hZC5pc3MpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIHRoZSBhdWRpZW5jZSBtYXRjaGVzIGlmIHdlIGhhdmUgb25lXG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWlyZWRBdWRpZW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVxdWlyZWRBdWRpZW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgYXVkID0gcGF5bG9hZC5hdWQ7XG4gICAgICAgICAgICBsZXQgYXVkVmVyaWZpZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIElmIHRoZSByZXF1aXJlZEF1ZGllbmNlIGlzIGFuIGFycmF5LCBjaGVjayBpZiBpdCBjb250YWlucyB0b2tlblxuICAgICAgICAgICAgLy8gYXVkaWVuY2VcbiAgICAgICAgICAgIGlmIChyZXF1aXJlZEF1ZGllbmNlLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgICAgIGF1ZFZlcmlmaWVkID0gcmVxdWlyZWRBdWRpZW5jZS5pbmRleE9mKGF1ZCkgPiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF1ZFZlcmlmaWVkID0gYXVkID09PSByZXF1aXJlZEF1ZGllbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhdWRWZXJpZmllZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV3JvbmcgcmVjaXBpZW50LCBwYXlsb2FkIGF1ZGllbmNlICE9IHJlcXVpcmVkQXVkaWVuY2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGxvZ2ludGlja2V0XzEuTG9naW5UaWNrZXQoZW52ZWxvcGUsIHBheWxvYWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggQWNjZXNzVG9rZW5SZXNwb25zZSB0eXBlIGlmXG4gICAgICogcmVmcmVzaEhhbmRsZXIgaXMgZGVmaW5lZC5cbiAgICAgKiBJZiBub3QsIG5vdGhpbmcgaXMgcmV0dXJuZWQuXG4gICAgICovXG4gICAgYXN5bmMgcHJvY2Vzc0FuZFZhbGlkYXRlUmVmcmVzaEhhbmRsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlZnJlc2hIYW5kbGVyKSB7XG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlblJlc3BvbnNlID0gYXdhaXQgdGhpcy5yZWZyZXNoSGFuZGxlcigpO1xuICAgICAgICAgICAgaWYgKCFhY2Nlc3NUb2tlblJlc3BvbnNlLmFjY2Vzc190b2tlbikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYWNjZXNzIHRva2VuIGlzIHJldHVybmVkIGJ5IHRoZSByZWZyZXNoSGFuZGxlciBjYWxsYmFjay4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2Nlc3NUb2tlblJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGEgdG9rZW4gaXMgZXhwaXJlZCBvciB3aWxsIGV4cGlyZSB3aXRoaW5cbiAgICAgKiBlYWdlclJlZnJlc2hUaHJlc2hvbGRNaWxsaXNtaWxsaXNlY29uZHMuXG4gICAgICogSWYgdGhlcmUgaXMgbm8gZXhwaXJ5IHRpbWUsIGFzc3VtZXMgdGhlIHRva2VuIGlzIG5vdCBleHBpcmVkIG9yIGV4cGlyaW5nLlxuICAgICAqL1xuICAgIGlzVG9rZW5FeHBpcmluZygpIHtcbiAgICAgICAgY29uc3QgZXhwaXJ5RGF0ZSA9IHRoaXMuY3JlZGVudGlhbHMuZXhwaXJ5X2RhdGU7XG4gICAgICAgIHJldHVybiBleHBpcnlEYXRlXG4gICAgICAgICAgICA/IGV4cGlyeURhdGUgPD0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyB0aGlzLmVhZ2VyUmVmcmVzaFRocmVzaG9sZE1pbGxpc1xuICAgICAgICAgICAgOiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLk9BdXRoMkNsaWVudCA9IE9BdXRoMkNsaWVudDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGluc3RhbmNlJ3Mge0BsaW5rIE9BdXRoMkNsaWVudC5lbmRwb2ludHN9XG4gKi9cbk9BdXRoMkNsaWVudC5HT09HTEVfVE9LRU5fSU5GT19VUkwgPSAnaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW5pbmZvJztcbi8qKlxuICogQ2xvY2sgc2tldyAtIGZpdmUgbWludXRlcyBpbiBzZWNvbmRzXG4gKi9cbk9BdXRoMkNsaWVudC5DTE9DS19TS0VXX1NFQ1NfID0gMzAwO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBtYXggVG9rZW4gTGlmZXRpbWUgaXMgb25lIGRheSBpbiBzZWNvbmRzXG4gKi9cbk9BdXRoMkNsaWVudC5ERUZBVUxUX01BWF9UT0tFTl9MSUZFVElNRV9TRUNTXyA9IDg2NDAwO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2common.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2common.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OAuthClientAuthHandler = void 0;\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/crypto.js\");\n/** List of HTTP methods that accept request bodies. */\nconst METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */\nclass OAuthClientAuthHandler {\n    /**\n     * Instantiates an OAuth client authentication handler.\n     * @param clientAuthentication The client auth credentials.\n     */\n    constructor(clientAuthentication) {\n        this.clientAuthentication = clientAuthentication;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Applies client authentication on the OAuth request's headers or POST\n     * body but does not process the request.\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n    applyClientAuthenticationOptions(opts, bearerToken) {\n        // Inject authenticated header.\n        this.injectAuthenticatedHeaders(opts, bearerToken);\n        // Inject authenticated request body.\n        if (!bearerToken) {\n            this.injectAuthenticatedRequestBody(opts);\n        }\n    }\n    /**\n     * Applies client authentication on the request's header if either\n     * basic authentication or bearer token authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n    injectAuthenticatedHeaders(opts, bearerToken) {\n        var _a;\n        // Bearer token prioritized higher than basic Auth.\n        if (bearerToken) {\n            opts.headers = opts.headers || {};\n            Object.assign(opts.headers, {\n                Authorization: `Bearer ${bearerToken}}`,\n            });\n        }\n        else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {\n            opts.headers = opts.headers || {};\n            const clientId = this.clientAuthentication.clientId;\n            const clientSecret = this.clientAuthentication.clientSecret || '';\n            const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n            Object.assign(opts.headers, {\n                Authorization: `Basic ${base64EncodedCreds}`,\n            });\n        }\n    }\n    /**\n     * Applies client authentication on the request's body if request-body\n     * client authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     */\n    injectAuthenticatedRequestBody(opts) {\n        var _a;\n        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {\n            const method = (opts.method || 'GET').toUpperCase();\n            // Inject authenticated request body.\n            if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n                // Get content-type.\n                let contentType;\n                const headers = opts.headers || {};\n                for (const key in headers) {\n                    if (key.toLowerCase() === 'content-type' && headers[key]) {\n                        contentType = headers[key].toLowerCase();\n                        break;\n                    }\n                }\n                if (contentType === 'application/x-www-form-urlencoded') {\n                    opts.data = opts.data || '';\n                    const data = querystring.parse(opts.data);\n                    Object.assign(data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || '',\n                    });\n                    opts.data = querystring.stringify(data);\n                }\n                else if (contentType === 'application/json') {\n                    opts.data = opts.data || {};\n                    Object.assign(opts.data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || '',\n                    });\n                }\n                else {\n                    throw new Error(`${contentType} content-types are not supported with ` +\n                        `${this.clientAuthentication.confidentialClientType} ` +\n                        'client authentication');\n                }\n            }\n            else {\n                throw new Error(`${method} HTTP method does not support ` +\n                    `${this.clientAuthentication.confidentialClientType} ` +\n                    'client authentication');\n            }\n        }\n    }\n    /**\n     * Retry config for Auth-related requests.\n     *\n     * @remarks\n     *\n     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n     * config as some downstream APIs would prefer if customers explicitly enable retries,\n     * such as GCS.\n     */\n    static get RETRY_CONFIG() {\n        return {\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE'],\n            },\n        };\n    }\n}\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n    // Error response.\n    const errorCode = resp.error;\n    const errorDescription = resp.error_description;\n    const errorUri = resp.error_uri;\n    let message = `Error code ${errorCode}`;\n    if (typeof errorDescription !== 'undefined') {\n        message += `: ${errorDescription}`;\n    }\n    if (typeof errorUri !== 'undefined') {\n        message += ` - ${errorUri}`;\n    }\n    const newError = new Error(message);\n    // Copy properties from original error to newly generated error.\n    if (err) {\n        const keys = Object.keys(err);\n        if (err.stack) {\n            // Copy error.stack if available.\n            keys.push('stack');\n        }\n        keys.forEach(key => {\n            // Do not overwrite the message field.\n            if (key !== 'message') {\n                Object.defineProperty(newError, key, {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    value: err[key],\n                    writable: false,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n    return newError;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/passthrough.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/passthrough.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PassThroughClient = void 0;\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\n/**\n * An AuthClient without any Authentication information. Useful for:\n * - Anonymous access\n * - Local Emulators\n * - Testing Environments\n *\n */\nclass PassThroughClient extends authclient_1.AuthClient {\n    /**\n     * Creates a request without any authentication headers or checks.\n     *\n     * @remarks\n     *\n     * In testing environments it may be useful to change the provided\n     * {@link AuthClient.transporter} for any desired request overrides/handling.\n     *\n     * @param opts\n     * @returns The response of the request.\n     */\n    async request(opts) {\n        return this.transporter.request(opts);\n    }\n    /**\n     * A required method of the base class.\n     * Always will return an empty object.\n     *\n     * @returns {}\n     */\n    async getAccessToken() {\n        return {};\n    }\n    /**\n     * A required method of the base class.\n     * Always will return an empty object.\n     *\n     * @returns {}\n     */\n    async getRequestHeaders() {\n        return {};\n    }\n}\nexports.PassThroughClient = PassThroughClient;\nconst a = new PassThroughClient();\na.getAccessToken();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL3Bhc3N0aHJvdWdoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHFCQUFxQixtQkFBTyxDQUFDLDhIQUFjO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDhCQUE4QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9wYXNzdGhyb3VnaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXNzVGhyb3VnaENsaWVudCA9IHZvaWQgMDtcbmNvbnN0IGF1dGhjbGllbnRfMSA9IHJlcXVpcmUoXCIuL2F1dGhjbGllbnRcIik7XG4vKipcbiAqIEFuIEF1dGhDbGllbnQgd2l0aG91dCBhbnkgQXV0aGVudGljYXRpb24gaW5mb3JtYXRpb24uIFVzZWZ1bCBmb3I6XG4gKiAtIEFub255bW91cyBhY2Nlc3NcbiAqIC0gTG9jYWwgRW11bGF0b3JzXG4gKiAtIFRlc3RpbmcgRW52aXJvbm1lbnRzXG4gKlxuICovXG5jbGFzcyBQYXNzVGhyb3VnaENsaWVudCBleHRlbmRzIGF1dGhjbGllbnRfMS5BdXRoQ2xpZW50IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVxdWVzdCB3aXRob3V0IGFueSBhdXRoZW50aWNhdGlvbiBoZWFkZXJzIG9yIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICpcbiAgICAgKiBJbiB0ZXN0aW5nIGVudmlyb25tZW50cyBpdCBtYXkgYmUgdXNlZnVsIHRvIGNoYW5nZSB0aGUgcHJvdmlkZWRcbiAgICAgKiB7QGxpbmsgQXV0aENsaWVudC50cmFuc3BvcnRlcn0gZm9yIGFueSBkZXNpcmVkIHJlcXVlc3Qgb3ZlcnJpZGVzL2hhbmRsaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdHNcbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzcG9uc2Ugb2YgdGhlIHJlcXVlc3QuXG4gICAgICovXG4gICAgYXN5bmMgcmVxdWVzdChvcHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyLnJlcXVlc3Qob3B0cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcmVxdWlyZWQgbWV0aG9kIG9mIHRoZSBiYXNlIGNsYXNzLlxuICAgICAqIEFsd2F5cyB3aWxsIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7fVxuICAgICAqL1xuICAgIGFzeW5jIGdldEFjY2Vzc1Rva2VuKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgcmVxdWlyZWQgbWV0aG9kIG9mIHRoZSBiYXNlIGNsYXNzLlxuICAgICAqIEFsd2F5cyB3aWxsIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7fVxuICAgICAqL1xuICAgIGFzeW5jIGdldFJlcXVlc3RIZWFkZXJzKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufVxuZXhwb3J0cy5QYXNzVGhyb3VnaENsaWVudCA9IFBhc3NUaHJvdWdoQ2xpZW50O1xuY29uc3QgYSA9IG5ldyBQYXNzVGhyb3VnaENsaWVudCgpO1xuYS5nZXRBY2Nlc3NUb2tlbigpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/passthrough.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PluggableAuthClient = exports.ExecutableError = void 0;\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst executable_response_1 = __webpack_require__(/*! ./executable-response */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/executable-response.js\");\nconst pluggable_auth_handler_1 = __webpack_require__(/*! ./pluggable-auth-handler */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js\");\n/**\n * Error thrown from the executable run by PluggableAuthClient.\n */\nclass ExecutableError extends Error {\n    constructor(message, code) {\n        super(`The executable failed with exit code: ${code} and error message: ${message}.`);\n        this.code = code;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.ExecutableError = ExecutableError;\n/**\n * The default executable timeout when none is provided, in milliseconds.\n */\nconst DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1000;\n/**\n * The minimum allowed executable timeout in milliseconds.\n */\nconst MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1000;\n/**\n * The maximum allowed executable timeout in milliseconds.\n */\nconst MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1000;\n/**\n * The environment variable to check to see if executable can be run.\n * Value must be set to '1' for the executable to run.\n */\nconst GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = 'GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES';\n/**\n * The maximum currently supported executable version.\n */\nconst MAXIMUM_EXECUTABLE_VERSION = 1;\n/**\n * PluggableAuthClient enables the exchange of workload identity pool external credentials for\n * Google access tokens by retrieving 3rd party tokens through a user supplied executable. These\n * scripts/executables are completely independent of the Google Cloud Auth libraries. These\n * credentials plug into ADC and will call the specified executable to retrieve the 3rd party token\n * to be exchanged for a Google access token.\n *\n * <p>To use these credentials, the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment variable\n * must be set to '1'. This is for security reasons.\n *\n * <p>Both OIDC and SAML are supported. The executable must adhere to a specific response format\n * defined below.\n *\n * <p>The executable must print out the 3rd party token to STDOUT in JSON format. When an\n * output_file is specified in the credential configuration, the executable must also handle writing the\n * JSON response to this file.\n *\n * <pre>\n * OIDC response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n *   \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * SAML2 response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n *   \"saml_response\": \"...\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * Error response sample:\n * {\n *   \"version\": 1,\n *   \"success\": false,\n *   \"code\": \"401\",\n *   \"message\": \"Error message.\"\n * }\n * </pre>\n *\n * <p>The \"expiration_time\" field in the JSON response is only required for successful\n * responses when an output file was specified in the credential configuration\n *\n * <p>The auth libraries will populate certain environment variables that will be accessible by the\n * executable, such as: GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE, GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE,\n * GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE, GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL, and\n * GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE.\n *\n * <p>Please see this repositories README for a complete executable request/response specification.\n */\nclass PluggableAuthClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates a PluggableAuthClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid pluggable auth credential.\n     * @param options The external account options object typically loaded from\n     *   the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        if (!options.credential_source.executable) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        this.command = options.credential_source.executable.command;\n        if (!this.command) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        // Check if the provided timeout exists and if it is valid.\n        if (options.credential_source.executable.timeout_millis === undefined) {\n            this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;\n        }\n        else {\n            this.timeoutMillis = options.credential_source.executable.timeout_millis;\n            if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS ||\n                this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {\n                throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ` +\n                    `${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);\n            }\n        }\n        this.outputFile = options.credential_source.executable.output_file;\n        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({\n            command: this.command,\n            timeoutMillis: this.timeoutMillis,\n            outputFile: this.outputFile,\n        });\n        this.credentialSourceType = 'executable';\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this calls a user provided executable which returns the subject token.\n     * The logic is summarized as:\n     * 1. Validated that the executable is allowed to run. The\n     *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to\n     *    1 for security reasons.\n     * 2. If an output file is specified by the user, check the file location\n     *    for a response. If the file exists and contains a valid response,\n     *    return the subject token from the file.\n     * 3. Call the provided executable and return response.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Check if the executable is allowed to run.\n        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== '1') {\n            throw new Error('Pluggable Auth executables need to be explicitly allowed to run by ' +\n                'setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment ' +\n                'Variable to 1.');\n        }\n        let executableResponse = undefined;\n        // Try to get cached executable response from output file.\n        if (this.outputFile) {\n            executableResponse = await this.handler.retrieveCachedResponse();\n        }\n        // If no response from output file, call the executable.\n        if (!executableResponse) {\n            // Set up environment map with required values for the executable.\n            const envMap = new Map();\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE', this.audience);\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE', this.subjectTokenType);\n            // Always set to 0 because interactive mode is not supported.\n            envMap.set('GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE', '0');\n            if (this.outputFile) {\n                envMap.set('GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE', this.outputFile);\n            }\n            const serviceAccountEmail = this.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                envMap.set('GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL', serviceAccountEmail);\n            }\n            executableResponse =\n                await this.handler.retrieveResponseFromExecutable(envMap);\n        }\n        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {\n            throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);\n        }\n        // Check that response was successful.\n        if (!executableResponse.success) {\n            throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);\n        }\n        // Check that response contains expiration time if output file was specified.\n        if (this.outputFile) {\n            if (!executableResponse.expirationTime) {\n                throw new executable_response_1.InvalidExpirationTimeFieldError('The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.');\n            }\n        }\n        // Check that response is not expired.\n        if (executableResponse.isExpired()) {\n            throw new Error('Executable response is expired.');\n        }\n        // Return subject token from response.\n        return executableResponse.subjectToken;\n    }\n}\nexports.PluggableAuthClient = PluggableAuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PluggableAuthHandler = void 0;\nconst pluggable_auth_client_1 = __webpack_require__(/*! ./pluggable-auth-client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\nconst executable_response_1 = __webpack_require__(/*! ./executable-response */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/executable-response.js\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n/**\n * A handler used to retrieve 3rd party token responses from user defined\n * executables and cached file output for the PluggableAuthClient class.\n */\nclass PluggableAuthHandler {\n    /**\n     * Instantiates a PluggableAuthHandler instance using the provided\n     * PluggableAuthHandlerOptions object.\n     */\n    constructor(options) {\n        if (!options.command) {\n            throw new Error('No command provided.');\n        }\n        this.commandComponents = PluggableAuthHandler.parseCommand(options.command);\n        this.timeoutMillis = options.timeoutMillis;\n        if (!this.timeoutMillis) {\n            throw new Error('No timeoutMillis provided.');\n        }\n        this.outputFile = options.outputFile;\n    }\n    /**\n     * Calls user provided executable to get a 3rd party subject token and\n     * returns the response.\n     * @param envMap a Map of additional Environment Variables required for\n     *   the executable.\n     * @return A promise that resolves with the executable response.\n     */\n    retrieveResponseFromExecutable(envMap) {\n        return new Promise((resolve, reject) => {\n            // Spawn process to run executable using added environment variables.\n            const child = childProcess.spawn(this.commandComponents[0], this.commandComponents.slice(1), {\n                env: { ...process.env, ...Object.fromEntries(envMap) },\n            });\n            let output = '';\n            // Append stdout to output as executable runs.\n            child.stdout.on('data', (data) => {\n                output += data;\n            });\n            // Append stderr as executable runs.\n            child.stderr.on('data', (err) => {\n                output += err;\n            });\n            // Set up a timeout to end the child process and throw an error.\n            const timeout = setTimeout(() => {\n                // Kill child process and remove listeners so 'close' event doesn't get\n                // read after child process is killed.\n                child.removeAllListeners();\n                child.kill();\n                return reject(new Error('The executable failed to finish within the timeout specified.'));\n            }, this.timeoutMillis);\n            child.on('close', (code) => {\n                // Cancel timeout if executable closes before timeout is reached.\n                clearTimeout(timeout);\n                if (code === 0) {\n                    // If the executable completed successfully, try to return the parsed response.\n                    try {\n                        const responseJson = JSON.parse(output);\n                        const response = new executable_response_1.ExecutableResponse(responseJson);\n                        return resolve(response);\n                    }\n                    catch (error) {\n                        if (error instanceof executable_response_1.ExecutableResponseError) {\n                            return reject(error);\n                        }\n                        return reject(new executable_response_1.ExecutableResponseError(`The executable returned an invalid response: ${output}`));\n                    }\n                }\n                else {\n                    return reject(new pluggable_auth_client_1.ExecutableError(output, code.toString()));\n                }\n            });\n        });\n    }\n    /**\n     * Checks user provided output file for response from previous run of\n     * executable and return the response if it exists, is formatted correctly, and is not expired.\n     */\n    async retrieveCachedResponse() {\n        if (!this.outputFile || this.outputFile.length === 0) {\n            return undefined;\n        }\n        let filePath;\n        try {\n            filePath = await fs.promises.realpath(this.outputFile);\n        }\n        catch (_a) {\n            // If file path cannot be resolved, return undefined.\n            return undefined;\n        }\n        if (!(await fs.promises.lstat(filePath)).isFile()) {\n            // If path does not lead to file, return undefined.\n            return undefined;\n        }\n        const responseString = await fs.promises.readFile(filePath, {\n            encoding: 'utf8',\n        });\n        if (responseString === '') {\n            return undefined;\n        }\n        try {\n            const responseJson = JSON.parse(responseString);\n            const response = new executable_response_1.ExecutableResponse(responseJson);\n            // Check if response is successful and unexpired.\n            if (response.isValid()) {\n                return new executable_response_1.ExecutableResponse(responseJson);\n            }\n            return undefined;\n        }\n        catch (error) {\n            if (error instanceof executable_response_1.ExecutableResponseError) {\n                throw error;\n            }\n            throw new executable_response_1.ExecutableResponseError(`The output file contained an invalid response: ${responseString}`);\n        }\n    }\n    /**\n     * Parses given command string into component array, splitting on spaces unless\n     * spaces are between quotation marks.\n     */\n    static parseCommand(command) {\n        // Split the command into components by splitting on spaces,\n        // unless spaces are contained in quotation marks.\n        const components = command.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g);\n        if (!components) {\n            throw new Error(`Provided command: \"${command}\" could not be parsed.`);\n        }\n        // Remove quotation marks from the beginning and end of each component if they are present.\n        for (let i = 0; i < components.length; i++) {\n            if (components[i][0] === '\"' && components[i].slice(-1) === '\"') {\n                components[i] = components[i].slice(1, -1);\n            }\n        }\n        return components;\n    }\n}\nexports.PluggableAuthHandler = PluggableAuthHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL3BsdWdnYWJsZS1hdXRoLWhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZ0NBQWdDLG1CQUFPLENBQUMsb0pBQXlCO0FBQ2pFLDhCQUE4QixtQkFBTyxDQUFDLGdKQUF1QjtBQUM3RCxxQkFBcUIsbUJBQU8sQ0FBQyxvQ0FBZTtBQUM1QyxXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwrQ0FBK0M7QUFDdEUsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0lBQXdJLE9BQU87QUFDL0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNIQUFzSCxlQUFlO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsUUFBUTtBQUMxRDtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL3BsdWdnYWJsZS1hdXRoLWhhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGx1Z2dhYmxlQXV0aEhhbmRsZXIgPSB2b2lkIDA7XG5jb25zdCBwbHVnZ2FibGVfYXV0aF9jbGllbnRfMSA9IHJlcXVpcmUoXCIuL3BsdWdnYWJsZS1hdXRoLWNsaWVudFwiKTtcbmNvbnN0IGV4ZWN1dGFibGVfcmVzcG9uc2VfMSA9IHJlcXVpcmUoXCIuL2V4ZWN1dGFibGUtcmVzcG9uc2VcIik7XG5jb25zdCBjaGlsZFByb2Nlc3MgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuLyoqXG4gKiBBIGhhbmRsZXIgdXNlZCB0byByZXRyaWV2ZSAzcmQgcGFydHkgdG9rZW4gcmVzcG9uc2VzIGZyb20gdXNlciBkZWZpbmVkXG4gKiBleGVjdXRhYmxlcyBhbmQgY2FjaGVkIGZpbGUgb3V0cHV0IGZvciB0aGUgUGx1Z2dhYmxlQXV0aENsaWVudCBjbGFzcy5cbiAqL1xuY2xhc3MgUGx1Z2dhYmxlQXV0aEhhbmRsZXIge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlcyBhIFBsdWdnYWJsZUF1dGhIYW5kbGVyIGluc3RhbmNlIHVzaW5nIHRoZSBwcm92aWRlZFxuICAgICAqIFBsdWdnYWJsZUF1dGhIYW5kbGVyT3B0aW9ucyBvYmplY3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuY29tbWFuZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBjb21tYW5kIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tbWFuZENvbXBvbmVudHMgPSBQbHVnZ2FibGVBdXRoSGFuZGxlci5wYXJzZUNvbW1hbmQob3B0aW9ucy5jb21tYW5kKTtcbiAgICAgICAgdGhpcy50aW1lb3V0TWlsbGlzID0gb3B0aW9ucy50aW1lb3V0TWlsbGlzO1xuICAgICAgICBpZiAoIXRoaXMudGltZW91dE1pbGxpcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0aW1lb3V0TWlsbGlzIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3V0cHV0RmlsZSA9IG9wdGlvbnMub3V0cHV0RmlsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbHMgdXNlciBwcm92aWRlZCBleGVjdXRhYmxlIHRvIGdldCBhIDNyZCBwYXJ0eSBzdWJqZWN0IHRva2VuIGFuZFxuICAgICAqIHJldHVybnMgdGhlIHJlc3BvbnNlLlxuICAgICAqIEBwYXJhbSBlbnZNYXAgYSBNYXAgb2YgYWRkaXRpb25hbCBFbnZpcm9ubWVudCBWYXJpYWJsZXMgcmVxdWlyZWQgZm9yXG4gICAgICogICB0aGUgZXhlY3V0YWJsZS5cbiAgICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGV4ZWN1dGFibGUgcmVzcG9uc2UuXG4gICAgICovXG4gICAgcmV0cmlldmVSZXNwb25zZUZyb21FeGVjdXRhYmxlKGVudk1hcCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gU3Bhd24gcHJvY2VzcyB0byBydW4gZXhlY3V0YWJsZSB1c2luZyBhZGRlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkUHJvY2Vzcy5zcGF3bih0aGlzLmNvbW1hbmRDb21wb25lbnRzWzBdLCB0aGlzLmNvbW1hbmRDb21wb25lbnRzLnNsaWNlKDEpLCB7XG4gICAgICAgICAgICAgICAgZW52OiB7IC4uLnByb2Nlc3MuZW52LCAuLi5PYmplY3QuZnJvbUVudHJpZXMoZW52TWFwKSB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgb3V0cHV0ID0gJyc7XG4gICAgICAgICAgICAvLyBBcHBlbmQgc3Rkb3V0IHRvIG91dHB1dCBhcyBleGVjdXRhYmxlIHJ1bnMuXG4gICAgICAgICAgICBjaGlsZC5zdGRvdXQub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSBkYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBBcHBlbmQgc3RkZXJyIGFzIGV4ZWN1dGFibGUgcnVucy5cbiAgICAgICAgICAgIGNoaWxkLnN0ZGVyci5vbignZGF0YScsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gZXJyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBTZXQgdXAgYSB0aW1lb3V0IHRvIGVuZCB0aGUgY2hpbGQgcHJvY2VzcyBhbmQgdGhyb3cgYW4gZXJyb3IuXG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gS2lsbCBjaGlsZCBwcm9jZXNzIGFuZCByZW1vdmUgbGlzdGVuZXJzIHNvICdjbG9zZScgZXZlbnQgZG9lc24ndCBnZXRcbiAgICAgICAgICAgICAgICAvLyByZWFkIGFmdGVyIGNoaWxkIHByb2Nlc3MgaXMga2lsbGVkLlxuICAgICAgICAgICAgICAgIGNoaWxkLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIGNoaWxkLmtpbGwoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignVGhlIGV4ZWN1dGFibGUgZmFpbGVkIHRvIGZpbmlzaCB3aXRoaW4gdGhlIHRpbWVvdXQgc3BlY2lmaWVkLicpKTtcbiAgICAgICAgICAgIH0sIHRoaXMudGltZW91dE1pbGxpcyk7XG4gICAgICAgICAgICBjaGlsZC5vbignY2xvc2UnLCAoY29kZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIENhbmNlbCB0aW1lb3V0IGlmIGV4ZWN1dGFibGUgY2xvc2VzIGJlZm9yZSB0aW1lb3V0IGlzIHJlYWNoZWQuXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBleGVjdXRhYmxlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHksIHRyeSB0byByZXR1cm4gdGhlIHBhcnNlZCByZXNwb25zZS5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSnNvbiA9IEpTT04ucGFyc2Uob3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IGV4ZWN1dGFibGVfcmVzcG9uc2VfMS5FeGVjdXRhYmxlUmVzcG9uc2UocmVzcG9uc2VKc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIGV4ZWN1dGFibGVfcmVzcG9uc2VfMS5FeGVjdXRhYmxlUmVzcG9uc2VFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgZXhlY3V0YWJsZV9yZXNwb25zZV8xLkV4ZWN1dGFibGVSZXNwb25zZUVycm9yKGBUaGUgZXhlY3V0YWJsZSByZXR1cm5lZCBhbiBpbnZhbGlkIHJlc3BvbnNlOiAke291dHB1dH1gKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IHBsdWdnYWJsZV9hdXRoX2NsaWVudF8xLkV4ZWN1dGFibGVFcnJvcihvdXRwdXQsIGNvZGUudG9TdHJpbmcoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHVzZXIgcHJvdmlkZWQgb3V0cHV0IGZpbGUgZm9yIHJlc3BvbnNlIGZyb20gcHJldmlvdXMgcnVuIG9mXG4gICAgICogZXhlY3V0YWJsZSBhbmQgcmV0dXJuIHRoZSByZXNwb25zZSBpZiBpdCBleGlzdHMsIGlzIGZvcm1hdHRlZCBjb3JyZWN0bHksIGFuZCBpcyBub3QgZXhwaXJlZC5cbiAgICAgKi9cbiAgICBhc3luYyByZXRyaWV2ZUNhY2hlZFJlc3BvbnNlKCkge1xuICAgICAgICBpZiAoIXRoaXMub3V0cHV0RmlsZSB8fCB0aGlzLm91dHB1dEZpbGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmaWxlUGF0aDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbGVQYXRoID0gYXdhaXQgZnMucHJvbWlzZXMucmVhbHBhdGgodGhpcy5vdXRwdXRGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgIC8vIElmIGZpbGUgcGF0aCBjYW5ub3QgYmUgcmVzb2x2ZWQsIHJldHVybiB1bmRlZmluZWQuXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGF3YWl0IGZzLnByb21pc2VzLmxzdGF0KGZpbGVQYXRoKSkuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgIC8vIElmIHBhdGggZG9lcyBub3QgbGVhZCB0byBmaWxlLCByZXR1cm4gdW5kZWZpbmVkLlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZVN0cmluZyA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGZpbGVQYXRoLCB7XG4gICAgICAgICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc3BvbnNlU3RyaW5nID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gSlNPTi5wYXJzZShyZXNwb25zZVN0cmluZyk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IG5ldyBleGVjdXRhYmxlX3Jlc3BvbnNlXzEuRXhlY3V0YWJsZVJlc3BvbnNlKHJlc3BvbnNlSnNvbik7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiByZXNwb25zZSBpcyBzdWNjZXNzZnVsIGFuZCB1bmV4cGlyZWQuXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBleGVjdXRhYmxlX3Jlc3BvbnNlXzEuRXhlY3V0YWJsZVJlc3BvbnNlKHJlc3BvbnNlSnNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZXhlY3V0YWJsZV9yZXNwb25zZV8xLkV4ZWN1dGFibGVSZXNwb25zZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXhlY3V0YWJsZV9yZXNwb25zZV8xLkV4ZWN1dGFibGVSZXNwb25zZUVycm9yKGBUaGUgb3V0cHV0IGZpbGUgY29udGFpbmVkIGFuIGludmFsaWQgcmVzcG9uc2U6ICR7cmVzcG9uc2VTdHJpbmd9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGdpdmVuIGNvbW1hbmQgc3RyaW5nIGludG8gY29tcG9uZW50IGFycmF5LCBzcGxpdHRpbmcgb24gc3BhY2VzIHVubGVzc1xuICAgICAqIHNwYWNlcyBhcmUgYmV0d2VlbiBxdW90YXRpb24gbWFya3MuXG4gICAgICovXG4gICAgc3RhdGljIHBhcnNlQ29tbWFuZChjb21tYW5kKSB7XG4gICAgICAgIC8vIFNwbGl0IHRoZSBjb21tYW5kIGludG8gY29tcG9uZW50cyBieSBzcGxpdHRpbmcgb24gc3BhY2VzLFxuICAgICAgICAvLyB1bmxlc3Mgc3BhY2VzIGFyZSBjb250YWluZWQgaW4gcXVvdGF0aW9uIG1hcmtzLlxuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gY29tbWFuZC5tYXRjaCgvKD86W15cXHNcIl0rfFwiW15cIl0qXCIpKy9nKTtcbiAgICAgICAgaWYgKCFjb21wb25lbnRzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb3ZpZGVkIGNvbW1hbmQ6IFwiJHtjb21tYW5kfVwiIGNvdWxkIG5vdCBiZSBwYXJzZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIHF1b3RhdGlvbiBtYXJrcyBmcm9tIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBlYWNoIGNvbXBvbmVudCBpZiB0aGV5IGFyZSBwcmVzZW50LlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRzW2ldWzBdID09PSAnXCInICYmIGNvbXBvbmVudHNbaV0uc2xpY2UoLTEpID09PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50c1tpXSA9IGNvbXBvbmVudHNbaV0uc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzO1xuICAgIH1cbn1cbmV4cG9ydHMuUGx1Z2dhYmxlQXV0aEhhbmRsZXIgPSBQbHVnZ2FibGVBdXRoSGFuZGxlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/refreshclient.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/refreshclient.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UserRefreshClient = exports.USER_REFRESH_ACCOUNT_TYPE = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nconst querystring_1 = __webpack_require__(/*! querystring */ \"querystring\");\nexports.USER_REFRESH_ACCOUNT_TYPE = 'authorized_user';\nclass UserRefreshClient extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {\n        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'\n            ? optionsOrClientId\n            : {\n                clientId: optionsOrClientId,\n                clientSecret,\n                refreshToken,\n                eagerRefreshThresholdMillis,\n                forceRefreshOnFailure,\n            };\n        super(opts);\n        this._refreshToken = opts.refreshToken;\n        this.credentials.refresh_token = opts.refreshToken;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken An ignored refreshToken..\n     * @param callback Optional callback.\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        return super.refreshTokenNoCache(this._refreshToken);\n    }\n    async fetchIdToken(targetAudience) {\n        const res = await this.transporter.request({\n            ...UserRefreshClient.RETRY_CONFIG,\n            url: this.endpoints.oauth2TokenUrl,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            method: 'POST',\n            data: (0, querystring_1.stringify)({\n                client_id: this._clientId,\n                client_secret: this._clientSecret,\n                grant_type: 'refresh_token',\n                refresh_token: this._refreshToken,\n                target_audience: targetAudience,\n            }),\n        });\n        return res.data.id_token;\n    }\n    /**\n     * Create a UserRefreshClient credentials instance using the given input\n     * options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the user refresh token');\n        }\n        if (json.type !== 'authorized_user') {\n            throw new Error('The incoming JSON object does not have the \"authorized_user\" type');\n        }\n        if (!json.client_id) {\n            throw new Error('The incoming JSON object does not contain a client_id field');\n        }\n        if (!json.client_secret) {\n            throw new Error('The incoming JSON object does not contain a client_secret field');\n        }\n        if (!json.refresh_token) {\n            throw new Error('The incoming JSON object does not contain a refresh_token field');\n        }\n        this._clientId = json.client_id;\n        this._clientSecret = json.client_secret;\n        this._refreshToken = json.refresh_token;\n        this.credentials.refresh_token = json.refresh_token;\n        this.quotaProjectId = json.quota_project_id;\n        this.universeDomain = json.universe_domain || this.universeDomain;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    async fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                return reject(new Error('Must pass in a stream containing the user refresh token.'));\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    return resolve();\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a UserRefreshClient credentials instance using the given input\n     * options.\n     * @param json The input object.\n     */\n    static fromJSON(json) {\n        const client = new UserRefreshClient();\n        client.fromJSON(json);\n        return client;\n    }\n}\nexports.UserRefreshClient = UserRefreshClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/refreshclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/stscredentials.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/stscredentials.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StsCredentials = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/transporters.js\");\nconst oauth2common_1 = __webpack_require__(/*! ./oauth2common */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2common.js\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an STS credentials instance.\n     * @param tokenExchangeEndpoint The token exchange endpoint.\n     * @param clientAuthentication The client authentication credentials if\n     *   available.\n     */\n    constructor(tokenExchangeEndpoint, clientAuthentication) {\n        super(clientAuthentication);\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n        this.transporter = new transporters_1.DefaultTransporter();\n    }\n    /**\n     * Exchanges the provided token for another type of token based on the\n     * rfc8693 spec.\n     * @param stsCredentialsOptions The token exchange options used to populate\n     *   the token exchange request.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @param options Optional additional GCP-specific non-spec defined options\n     *   to send with the request.\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n     * @return A promise that resolves with the token exchange response containing\n     *   the requested token and its expiration time.\n     */\n    async exchangeToken(stsCredentialsOptions, additionalHeaders, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        var _a, _b, _c;\n        const values = {\n            grant_type: stsCredentialsOptions.grantType,\n            resource: stsCredentialsOptions.resource,\n            audience: stsCredentialsOptions.audience,\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\n            subject_token: stsCredentialsOptions.subjectToken,\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n            // Non-standard GCP-specific options.\n            options: options && JSON.stringify(options),\n        };\n        // Remove undefined fields.\n        Object.keys(values).forEach(key => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (typeof values[key] === 'undefined') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                delete values[key];\n            }\n        });\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        };\n        // Inject additional STS headers if available.\n        Object.assign(headers, additionalHeaders || {});\n        const opts = {\n            ...StsCredentials.RETRY_CONFIG,\n            url: this.tokenExchangeEndpoint.toString(),\n            method: 'POST',\n            headers,\n            data: querystring.stringify(values),\n            responseType: 'json',\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const stsSuccessfulResponse = response.data;\n            stsSuccessfulResponse.res = response;\n            return stsSuccessfulResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\nexports.StsCredentials = StsCredentials;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/stscredentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UrlSubjectTokenSupplier = void 0;\n/**\n * Internal subject token supplier implementation used when a URL\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\nclass UrlSubjectTokenSupplier {\n    /**\n     * Instantiates a URL subject token supplier.\n     * @param opts The URL subject token supplier options to build the supplier with.\n     */\n    constructor(opts) {\n        this.url = opts.url;\n        this.formatType = opts.formatType;\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\n        this.headers = opts.headers;\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n    }\n    /**\n     * Sends a GET request to the URL provided in the constructor and resolves\n     * with the returned external subject token.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\n     *   token type for the external account identity. Not used.\n     */\n    async getSubjectToken(context) {\n        const opts = {\n            ...this.additionalGaxiosOptions,\n            url: this.url,\n            method: 'GET',\n            headers: this.headers,\n            responseType: this.formatType,\n        };\n        let subjectToken;\n        if (this.formatType === 'text') {\n            const response = await context.transporter.request(opts);\n            subjectToken = response.data;\n        }\n        else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n            const response = await context.transporter.request(opts);\n            subjectToken = response.data[this.subjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source URL');\n        }\n        return subjectToken;\n    }\n}\nexports.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL3VybHN1YmplY3R0b2tlbnN1cHBsaWVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0NBQXNDO0FBQzdELFVBQVUseUJBQXlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvdXJsc3ViamVjdHRva2Vuc3VwcGxpZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXJsU3ViamVjdFRva2VuU3VwcGxpZXIgPSB2b2lkIDA7XG4vKipcbiAqIEludGVybmFsIHN1YmplY3QgdG9rZW4gc3VwcGxpZXIgaW1wbGVtZW50YXRpb24gdXNlZCB3aGVuIGEgVVJMXG4gKiBpcyBjb25maWd1cmVkIGluIHRoZSBjcmVkZW50aWFsIGNvbmZpZ3VyYXRpb24gdXNlZCB0byBidWlsZCBhbiB7QGxpbmsgSWRlbnRpdHlQb29sQ2xpZW50fVxuICovXG5jbGFzcyBVcmxTdWJqZWN0VG9rZW5TdXBwbGllciB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGVzIGEgVVJMIHN1YmplY3QgdG9rZW4gc3VwcGxpZXIuXG4gICAgICogQHBhcmFtIG9wdHMgVGhlIFVSTCBzdWJqZWN0IHRva2VuIHN1cHBsaWVyIG9wdGlvbnMgdG8gYnVpbGQgdGhlIHN1cHBsaWVyIHdpdGguXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICB0aGlzLnVybCA9IG9wdHMudXJsO1xuICAgICAgICB0aGlzLmZvcm1hdFR5cGUgPSBvcHRzLmZvcm1hdFR5cGU7XG4gICAgICAgIHRoaXMuc3ViamVjdFRva2VuRmllbGROYW1lID0gb3B0cy5zdWJqZWN0VG9rZW5GaWVsZE5hbWU7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IG9wdHMuaGVhZGVycztcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsR2F4aW9zT3B0aW9ucyA9IG9wdHMuYWRkaXRpb25hbEdheGlvc09wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgR0VUIHJlcXVlc3QgdG8gdGhlIFVSTCBwcm92aWRlZCBpbiB0aGUgY29uc3RydWN0b3IgYW5kIHJlc29sdmVzXG4gICAgICogd2l0aCB0aGUgcmV0dXJuZWQgZXh0ZXJuYWwgc3ViamVjdCB0b2tlbi5cbiAgICAgKiBAcGFyYW0gY29udGV4dCB7QGxpbmsgRXh0ZXJuYWxBY2NvdW50U3VwcGxpZXJDb250ZXh0fSBmcm9tIHRoZSBjYWxsaW5nXG4gICAgICogICB7QGxpbmsgSWRlbnRpdHlQb29sQ2xpZW50fSwgY29udGFpbnMgdGhlIHJlcXVlc3RlZCBhdWRpZW5jZSBhbmQgc3ViamVjdFxuICAgICAqICAgdG9rZW4gdHlwZSBmb3IgdGhlIGV4dGVybmFsIGFjY291bnQgaWRlbnRpdHkuIE5vdCB1c2VkLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFN1YmplY3RUb2tlbihjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLmFkZGl0aW9uYWxHYXhpb3NPcHRpb25zLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnVybCxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6IHRoaXMuZm9ybWF0VHlwZSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHN1YmplY3RUb2tlbjtcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0VHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNvbnRleHQudHJhbnNwb3J0ZXIucmVxdWVzdChvcHRzKTtcbiAgICAgICAgICAgIHN1YmplY3RUb2tlbiA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5mb3JtYXRUeXBlID09PSAnanNvbicgJiYgdGhpcy5zdWJqZWN0VG9rZW5GaWVsZE5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29udGV4dC50cmFuc3BvcnRlci5yZXF1ZXN0KG9wdHMpO1xuICAgICAgICAgICAgc3ViamVjdFRva2VuID0gcmVzcG9uc2UuZGF0YVt0aGlzLnN1YmplY3RUb2tlbkZpZWxkTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdWJqZWN0VG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHBhcnNlIHRoZSBzdWJqZWN0X3Rva2VuIGZyb20gdGhlIGNyZWRlbnRpYWxfc291cmNlIFVSTCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJqZWN0VG9rZW47XG4gICAgfVxufVxuZXhwb3J0cy5VcmxTdWJqZWN0VG9rZW5TdXBwbGllciA9IFVybFN1YmplY3RUb2tlblN1cHBsaWVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/browser/crypto.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/browser/crypto.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BrowserCrypto = void 0;\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = __webpack_require__(/*! base64-js */ \"(rsc)/./node_modules/base64-js/index.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/crypto.js\");\nclass BrowserCrypto {\n    constructor() {\n        if (typeof window === 'undefined' ||\n            window.crypto === undefined ||\n            window.crypto.subtle === undefined) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while (base64.length % 4 !== 0) {\n            base64 += '=';\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return (0, crypto_1.fromArrayBufferToHex)(outputBuffer);\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        // Convert key, if provided in ArrayBuffer format, to string.\n        const rawKey = typeof key === 'string'\n            ? key\n            : String.fromCharCode(...new Uint16Array(key));\n        const enc = new TextEncoder();\n        const cryptoKey = await window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n            name: 'HMAC',\n            hash: {\n                name: 'SHA-256',\n            },\n        }, false, ['sign']);\n        return window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg));\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/browser/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/crypto.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/crypto.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createCrypto = createCrypto;\nexports.hasBrowserCrypto = hasBrowserCrypto;\nexports.fromArrayBufferToHex = fromArrayBufferToHex;\nconst crypto_1 = __webpack_require__(/*! ./browser/crypto */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/browser/crypto.js\");\nconst crypto_2 = __webpack_require__(/*! ./node/crypto */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/node/crypto.js\");\nfunction createCrypto() {\n    if (hasBrowserCrypto()) {\n        return new crypto_1.BrowserCrypto();\n    }\n    return new crypto_2.NodeCrypto();\n}\nfunction hasBrowserCrypto() {\n    return (typeof window !== 'undefined' &&\n        typeof window.crypto !== 'undefined' &&\n        typeof window.crypto.subtle !== 'undefined');\n}\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param arrayBuffer The ArrayBuffer to convert to hexadecimal string.\n * @return The hexadecimal encoding of the ArrayBuffer.\n */\nfunction fromArrayBufferToHex(arrayBuffer) {\n    // Convert buffer to byte array.\n    const byteArray = Array.from(new Uint8Array(arrayBuffer));\n    // Convert bytes to hex string.\n    return byteArray\n        .map(byte => {\n        return byte.toString(16).padStart(2, '0');\n    })\n        .join('');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9jcnlwdG8vY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLDRCQUE0QjtBQUM1QixpQkFBaUIsbUJBQU8sQ0FBQyx3SUFBa0I7QUFDM0MsaUJBQWlCLG1CQUFPLENBQUMsa0lBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2NyeXB0by9jcnlwdG8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qIGdsb2JhbCB3aW5kb3cgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQ3J5cHRvID0gY3JlYXRlQ3J5cHRvO1xuZXhwb3J0cy5oYXNCcm93c2VyQ3J5cHRvID0gaGFzQnJvd3NlckNyeXB0bztcbmV4cG9ydHMuZnJvbUFycmF5QnVmZmVyVG9IZXggPSBmcm9tQXJyYXlCdWZmZXJUb0hleDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIi4vYnJvd3Nlci9jcnlwdG9cIik7XG5jb25zdCBjcnlwdG9fMiA9IHJlcXVpcmUoXCIuL25vZGUvY3J5cHRvXCIpO1xuZnVuY3Rpb24gY3JlYXRlQ3J5cHRvKCkge1xuICAgIGlmIChoYXNCcm93c2VyQ3J5cHRvKCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjcnlwdG9fMS5Ccm93c2VyQ3J5cHRvKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgY3J5cHRvXzIuTm9kZUNyeXB0bygpO1xufVxuZnVuY3Rpb24gaGFzQnJvd3NlckNyeXB0bygpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cuY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93LmNyeXB0by5zdWJ0bGUgIT09ICd1bmRlZmluZWQnKTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gQXJyYXlCdWZmZXIgdG8gYSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiBAcGFyYW0gYXJyYXlCdWZmZXIgVGhlIEFycmF5QnVmZmVyIHRvIGNvbnZlcnQgdG8gaGV4YWRlY2ltYWwgc3RyaW5nLlxuICogQHJldHVybiBUaGUgaGV4YWRlY2ltYWwgZW5jb2Rpbmcgb2YgdGhlIEFycmF5QnVmZmVyLlxuICovXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXJUb0hleChhcnJheUJ1ZmZlcikge1xuICAgIC8vIENvbnZlcnQgYnVmZmVyIHRvIGJ5dGUgYXJyYXkuXG4gICAgY29uc3QgYnl0ZUFycmF5ID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgIC8vIENvbnZlcnQgYnl0ZXMgdG8gaGV4IHN0cmluZy5cbiAgICByZXR1cm4gYnl0ZUFycmF5XG4gICAgICAgIC5tYXAoYnl0ZSA9PiB7XG4gICAgICAgIHJldHVybiBieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIH0pXG4gICAgICAgIC5qb2luKCcnKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/node/crypto.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/node/crypto.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NodeCrypto = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nclass NodeCrypto {\n    async sha256DigestBase64(str) {\n        return crypto.createHash('sha256').update(str).digest('base64');\n    }\n    randomBytesBase64(count) {\n        return crypto.randomBytes(count).toString('base64');\n    }\n    async verify(pubkey, data, signature) {\n        const verifier = crypto.createVerify('RSA-SHA256');\n        verifier.update(data);\n        verifier.end();\n        return verifier.verify(pubkey, signature, 'base64');\n    }\n    async sign(privateKey, data) {\n        const signer = crypto.createSign('RSA-SHA256');\n        signer.update(data);\n        signer.end();\n        return signer.sign(privateKey, 'base64');\n    }\n    decodeBase64StringUtf8(base64) {\n        return Buffer.from(base64, 'base64').toString('utf-8');\n    }\n    encodeBase64StringUtf8(text) {\n        return Buffer.from(text, 'utf-8').toString('base64');\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        return crypto.createHash('sha256').update(str).digest('hex');\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        const cryptoKey = typeof key === 'string' ? key : toBuffer(key);\n        return toArrayBuffer(crypto.createHmac('sha256', cryptoKey).update(msg).digest());\n    }\n}\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */\nfunction toArrayBuffer(buffer) {\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */\nfunction toBuffer(arrayBuffer) {\n    return Buffer.from(arrayBuffer);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9jcnlwdG8vbm9kZS9jcnlwdG8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsZUFBZSxtQkFBTyxDQUFDLHNCQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9jcnlwdG8vbm9kZS9jcnlwdG8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTm9kZUNyeXB0byA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jbGFzcyBOb2RlQ3J5cHRvIHtcbiAgICBhc3luYyBzaGEyNTZEaWdlc3RCYXNlNjQoc3RyKSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHN0cikuZGlnZXN0KCdiYXNlNjQnKTtcbiAgICB9XG4gICAgcmFuZG9tQnl0ZXNCYXNlNjQoY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhjb3VudCkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH1cbiAgICBhc3luYyB2ZXJpZnkocHVia2V5LCBkYXRhLCBzaWduYXR1cmUpIHtcbiAgICAgICAgY29uc3QgdmVyaWZpZXIgPSBjcnlwdG8uY3JlYXRlVmVyaWZ5KCdSU0EtU0hBMjU2Jyk7XG4gICAgICAgIHZlcmlmaWVyLnVwZGF0ZShkYXRhKTtcbiAgICAgICAgdmVyaWZpZXIuZW5kKCk7XG4gICAgICAgIHJldHVybiB2ZXJpZmllci52ZXJpZnkocHVia2V5LCBzaWduYXR1cmUsICdiYXNlNjQnKTtcbiAgICB9XG4gICAgYXN5bmMgc2lnbihwcml2YXRlS2V5LCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IGNyeXB0by5jcmVhdGVTaWduKCdSU0EtU0hBMjU2Jyk7XG4gICAgICAgIHNpZ25lci51cGRhdGUoZGF0YSk7XG4gICAgICAgIHNpZ25lci5lbmQoKTtcbiAgICAgICAgcmV0dXJuIHNpZ25lci5zaWduKHByaXZhdGVLZXksICdiYXNlNjQnKTtcbiAgICB9XG4gICAgZGVjb2RlQmFzZTY0U3RyaW5nVXRmOChiYXNlNjQpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGYtOCcpO1xuICAgIH1cbiAgICBlbmNvZGVCYXNlNjRTdHJpbmdVdGY4KHRleHQpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRleHQsICd1dGYtOCcpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIFNIQS0yNTYgaGFzaCBvZiB0aGUgcHJvdmlkZWQgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBzdHIgVGhlIHBsYWluIHRleHQgc3RyaW5nIHRvIGhhc2guXG4gICAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBTSEEtMjU2IGhhc2ggb2YgdGhlIHByb3ZpZGVkXG4gICAgICogICBzdHJpbmcgaW4gaGV4YWRlY2ltYWwgZW5jb2RpbmcuXG4gICAgICovXG4gICAgYXN5bmMgc2hhMjU2RGlnZXN0SGV4KHN0cikge1xuICAgICAgICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShzdHIpLmRpZ2VzdCgnaGV4Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBITUFDIGhhc2ggb2YgYSBtZXNzYWdlIHVzaW5nIHRoZSBwcm92aWRlZCBjcnlwdG8ga2V5IGFuZCB0aGVcbiAgICAgKiBTSEEtMjU2IGFsZ29yaXRobS5cbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBzZWNyZXQgY3J5cHRvIGtleSBpbiB1dGYtOCBvciBBcnJheUJ1ZmZlciBmb3JtYXQuXG4gICAgICogQHBhcmFtIG1zZyBUaGUgcGxhaW4gdGV4dCBtZXNzYWdlLlxuICAgICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgSE1BQy1TSEEyNTYgaGFzaCBpbiBBcnJheUJ1ZmZlclxuICAgICAqICAgZm9ybWF0LlxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25XaXRoSG1hY1NoYTI1NihrZXksIG1zZykge1xuICAgICAgICBjb25zdCBjcnlwdG9LZXkgPSB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyA/IGtleSA6IHRvQnVmZmVyKGtleSk7XG4gICAgICAgIHJldHVybiB0b0FycmF5QnVmZmVyKGNyeXB0by5jcmVhdGVIbWFjKCdzaGEyNTYnLCBjcnlwdG9LZXkpLnVwZGF0ZShtc2cpLmRpZ2VzdCgpKTtcbiAgICB9XG59XG5leHBvcnRzLk5vZGVDcnlwdG8gPSBOb2RlQ3J5cHRvO1xuLyoqXG4gKiBDb252ZXJ0cyBhIE5vZGUuanMgQnVmZmVyIHRvIGFuIEFycmF5QnVmZmVyLlxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODYwOTI4OS9jb252ZXJ0LWEtYmluYXJ5LW5vZGVqcy1idWZmZXItdG8tamF2YXNjcmlwdC1hcnJheWJ1ZmZlclxuICogQHBhcmFtIGJ1ZmZlciBUaGUgQnVmZmVyIGlucHV0IHRvIGNvdmVydC5cbiAqIEByZXR1cm4gVGhlIEFycmF5QnVmZmVyIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnB1dC5cbiAqL1xuZnVuY3Rpb24gdG9BcnJheUJ1ZmZlcihidWZmZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyLmJ1ZmZlci5zbGljZShidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmJ5dGVPZmZzZXQgKyBidWZmZXIuYnl0ZUxlbmd0aCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIEFycmF5QnVmZmVyIHRvIGEgTm9kZS5qcyBCdWZmZXIuXG4gKiBAcGFyYW0gYXJyYXlCdWZmZXIgVGhlIEFycmF5QnVmZmVyIGlucHV0IHRvIGNvdmVydC5cbiAqIEByZXR1cm4gVGhlIEJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5wdXQuXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/crypto/node/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleAuth = exports.auth = exports.DefaultTransporter = exports.PassThroughClient = exports.ExecutableError = exports.PluggableAuthClient = exports.DownscopedClient = exports.BaseExternalAccountClient = exports.ExternalAccountClient = exports.IdentityPoolClient = exports.AwsRequestSigner = exports.AwsClient = exports.UserRefreshClient = exports.LoginTicket = exports.ClientAuthentication = exports.OAuth2Client = exports.CodeChallengeMethod = exports.Impersonated = exports.JWT = exports.JWTAccess = exports.IdTokenClient = exports.IAMAuth = exports.GCPEnv = exports.Compute = exports.DEFAULT_UNIVERSE = exports.AuthClient = exports.gaxios = exports.gcpMetadata = void 0;\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst googleauth_1 = __webpack_require__(/*! ./auth/googleauth */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/googleauth.js\");\nObject.defineProperty(exports, \"GoogleAuth\", ({ enumerable: true, get: function () { return googleauth_1.GoogleAuth; } }));\n// Export common deps to ensure types/instances are the exact match. Useful\n// for consistently configuring the library across versions.\nexports.gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/gcp-metadata/build/src/index.js\");\nexports.gaxios = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nvar authclient_1 = __webpack_require__(/*! ./auth/authclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/authclient.js\");\nObject.defineProperty(exports, \"AuthClient\", ({ enumerable: true, get: function () { return authclient_1.AuthClient; } }));\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", ({ enumerable: true, get: function () { return authclient_1.DEFAULT_UNIVERSE; } }));\nvar computeclient_1 = __webpack_require__(/*! ./auth/computeclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/computeclient.js\");\nObject.defineProperty(exports, \"Compute\", ({ enumerable: true, get: function () { return computeclient_1.Compute; } }));\nvar envDetect_1 = __webpack_require__(/*! ./auth/envDetect */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/envDetect.js\");\nObject.defineProperty(exports, \"GCPEnv\", ({ enumerable: true, get: function () { return envDetect_1.GCPEnv; } }));\nvar iam_1 = __webpack_require__(/*! ./auth/iam */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/iam.js\");\nObject.defineProperty(exports, \"IAMAuth\", ({ enumerable: true, get: function () { return iam_1.IAMAuth; } }));\nvar idtokenclient_1 = __webpack_require__(/*! ./auth/idtokenclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/idtokenclient.js\");\nObject.defineProperty(exports, \"IdTokenClient\", ({ enumerable: true, get: function () { return idtokenclient_1.IdTokenClient; } }));\nvar jwtaccess_1 = __webpack_require__(/*! ./auth/jwtaccess */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtaccess.js\");\nObject.defineProperty(exports, \"JWTAccess\", ({ enumerable: true, get: function () { return jwtaccess_1.JWTAccess; } }));\nvar jwtclient_1 = __webpack_require__(/*! ./auth/jwtclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/jwtclient.js\");\nObject.defineProperty(exports, \"JWT\", ({ enumerable: true, get: function () { return jwtclient_1.JWT; } }));\nvar impersonated_1 = __webpack_require__(/*! ./auth/impersonated */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/impersonated.js\");\nObject.defineProperty(exports, \"Impersonated\", ({ enumerable: true, get: function () { return impersonated_1.Impersonated; } }));\nvar oauth2client_1 = __webpack_require__(/*! ./auth/oauth2client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nObject.defineProperty(exports, \"CodeChallengeMethod\", ({ enumerable: true, get: function () { return oauth2client_1.CodeChallengeMethod; } }));\nObject.defineProperty(exports, \"OAuth2Client\", ({ enumerable: true, get: function () { return oauth2client_1.OAuth2Client; } }));\nObject.defineProperty(exports, \"ClientAuthentication\", ({ enumerable: true, get: function () { return oauth2client_1.ClientAuthentication; } }));\nvar loginticket_1 = __webpack_require__(/*! ./auth/loginticket */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/loginticket.js\");\nObject.defineProperty(exports, \"LoginTicket\", ({ enumerable: true, get: function () { return loginticket_1.LoginTicket; } }));\nvar refreshclient_1 = __webpack_require__(/*! ./auth/refreshclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/refreshclient.js\");\nObject.defineProperty(exports, \"UserRefreshClient\", ({ enumerable: true, get: function () { return refreshclient_1.UserRefreshClient; } }));\nvar awsclient_1 = __webpack_require__(/*! ./auth/awsclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsclient.js\");\nObject.defineProperty(exports, \"AwsClient\", ({ enumerable: true, get: function () { return awsclient_1.AwsClient; } }));\nvar awsrequestsigner_1 = __webpack_require__(/*! ./auth/awsrequestsigner */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js\");\nObject.defineProperty(exports, \"AwsRequestSigner\", ({ enumerable: true, get: function () { return awsrequestsigner_1.AwsRequestSigner; } }));\nvar identitypoolclient_1 = __webpack_require__(/*! ./auth/identitypoolclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/identitypoolclient.js\");\nObject.defineProperty(exports, \"IdentityPoolClient\", ({ enumerable: true, get: function () { return identitypoolclient_1.IdentityPoolClient; } }));\nvar externalclient_1 = __webpack_require__(/*! ./auth/externalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/externalclient.js\");\nObject.defineProperty(exports, \"ExternalAccountClient\", ({ enumerable: true, get: function () { return externalclient_1.ExternalAccountClient; } }));\nvar baseexternalclient_1 = __webpack_require__(/*! ./auth/baseexternalclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nObject.defineProperty(exports, \"BaseExternalAccountClient\", ({ enumerable: true, get: function () { return baseexternalclient_1.BaseExternalAccountClient; } }));\nvar downscopedclient_1 = __webpack_require__(/*! ./auth/downscopedclient */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/downscopedclient.js\");\nObject.defineProperty(exports, \"DownscopedClient\", ({ enumerable: true, get: function () { return downscopedclient_1.DownscopedClient; } }));\nvar pluggable_auth_client_1 = __webpack_require__(/*! ./auth/pluggable-auth-client */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\nObject.defineProperty(exports, \"PluggableAuthClient\", ({ enumerable: true, get: function () { return pluggable_auth_client_1.PluggableAuthClient; } }));\nObject.defineProperty(exports, \"ExecutableError\", ({ enumerable: true, get: function () { return pluggable_auth_client_1.ExecutableError; } }));\nvar passthrough_1 = __webpack_require__(/*! ./auth/passthrough */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/auth/passthrough.js\");\nObject.defineProperty(exports, \"PassThroughClient\", ({ enumerable: true, get: function () { return passthrough_1.PassThroughClient; } }));\nvar transporters_1 = __webpack_require__(/*! ./transporters */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/transporters.js\");\nObject.defineProperty(exports, \"DefaultTransporter\", ({ enumerable: true, get: function () { return transporters_1.DefaultTransporter; } }));\nconst auth = new googleauth_1.GoogleAuth();\nexports.auth = auth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/options.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/options.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validate = validate;\n// Accepts an options object passed from the user to the API.  In the\n// previous version of the API, it referred to a `Request` options object.\n// Now it refers to an Axiox Request Config object.  This is here to help\n// ensure users don't pass invalid options when they upgrade from 0.x to 1.x.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validate(options) {\n    const vpairs = [\n        { invalid: 'uri', expected: 'url' },\n        { invalid: 'json', expected: 'data' },\n        { invalid: 'qs', expected: 'params' },\n    ];\n    for (const pair of vpairs) {\n        if (options[pair.invalid]) {\n            const e = `'${pair.invalid}' is not a valid configuration option. Please use '${pair.expected}' instead. This library is using Axios for requests. Please see https://github.com/axios/axios to learn more about the valid request options.`;\n            throw new Error(e);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVSxtQ0FBbUM7QUFDN0MsVUFBVSxtQ0FBbUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGFBQWEscURBQXFELGNBQWM7QUFDMUc7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvb3B0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52YWxpZGF0ZSA9IHZhbGlkYXRlO1xuLy8gQWNjZXB0cyBhbiBvcHRpb25zIG9iamVjdCBwYXNzZWQgZnJvbSB0aGUgdXNlciB0byB0aGUgQVBJLiAgSW4gdGhlXG4vLyBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoZSBBUEksIGl0IHJlZmVycmVkIHRvIGEgYFJlcXVlc3RgIG9wdGlvbnMgb2JqZWN0LlxuLy8gTm93IGl0IHJlZmVycyB0byBhbiBBeGlveCBSZXF1ZXN0IENvbmZpZyBvYmplY3QuICBUaGlzIGlzIGhlcmUgdG8gaGVscFxuLy8gZW5zdXJlIHVzZXJzIGRvbid0IHBhc3MgaW52YWxpZCBvcHRpb25zIHdoZW4gdGhleSB1cGdyYWRlIGZyb20gMC54IHRvIDEueC5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiB2YWxpZGF0ZShvcHRpb25zKSB7XG4gICAgY29uc3QgdnBhaXJzID0gW1xuICAgICAgICB7IGludmFsaWQ6ICd1cmknLCBleHBlY3RlZDogJ3VybCcgfSxcbiAgICAgICAgeyBpbnZhbGlkOiAnanNvbicsIGV4cGVjdGVkOiAnZGF0YScgfSxcbiAgICAgICAgeyBpbnZhbGlkOiAncXMnLCBleHBlY3RlZDogJ3BhcmFtcycgfSxcbiAgICBdO1xuICAgIGZvciAoY29uc3QgcGFpciBvZiB2cGFpcnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnNbcGFpci5pbnZhbGlkXSkge1xuICAgICAgICAgICAgY29uc3QgZSA9IGAnJHtwYWlyLmludmFsaWR9JyBpcyBub3QgYSB2YWxpZCBjb25maWd1cmF0aW9uIG9wdGlvbi4gUGxlYXNlIHVzZSAnJHtwYWlyLmV4cGVjdGVkfScgaW5zdGVhZC4gVGhpcyBsaWJyYXJ5IGlzIHVzaW5nIEF4aW9zIGZvciByZXF1ZXN0cy4gUGxlYXNlIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXhpb3MvYXhpb3MgdG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgdmFsaWQgcmVxdWVzdCBvcHRpb25zLmA7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/transporters.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/transporters.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultTransporter = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst options_1 = __webpack_require__(/*! ./options */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/options.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/package.json\");\nconst PRODUCT_NAME = 'google-api-nodejs-client';\nclass DefaultTransporter {\n    constructor() {\n        /**\n         * A configurable, replacable `Gaxios` instance.\n         */\n        this.instance = new gaxios_1.Gaxios();\n    }\n    /**\n     * Configures request options before making a request.\n     * @param opts GaxiosOptions options.\n     * @return Configured options.\n     */\n    configure(opts = {}) {\n        opts.headers = opts.headers || {};\n        if (typeof window === 'undefined') {\n            // set transporter user agent if not in browser\n            const uaValue = opts.headers['User-Agent'];\n            if (!uaValue) {\n                opts.headers['User-Agent'] = DefaultTransporter.USER_AGENT;\n            }\n            else if (!uaValue.includes(`${PRODUCT_NAME}/`)) {\n                opts.headers['User-Agent'] =\n                    `${uaValue} ${DefaultTransporter.USER_AGENT}`;\n            }\n            // track google-auth-library-nodejs version:\n            if (!opts.headers['x-goog-api-client']) {\n                const nodeVersion = process.version.replace(/^v/, '');\n                opts.headers['x-goog-api-client'] = `gl-node/${nodeVersion}`;\n            }\n        }\n        return opts;\n    }\n    /**\n     * Makes a request using Gaxios with given options.\n     * @param opts GaxiosOptions options.\n     * @param callback optional callback that contains GaxiosResponse object.\n     * @return GaxiosPromise, assuming no callback is passed.\n     */\n    request(opts) {\n        // ensure the user isn't passing in request-style options\n        opts = this.configure(opts);\n        (0, options_1.validate)(opts);\n        return this.instance.request(opts).catch(e => {\n            throw this.processError(e);\n        });\n    }\n    get defaults() {\n        return this.instance.defaults;\n    }\n    set defaults(opts) {\n        this.instance.defaults = opts;\n    }\n    /**\n     * Changes the error to include details from the body.\n     */\n    processError(e) {\n        const res = e.response;\n        const err = e;\n        const body = res ? res.data : null;\n        if (res && body && body.error && res.status !== 200) {\n            if (typeof body.error === 'string') {\n                err.message = body.error;\n                err.status = res.status;\n            }\n            else if (Array.isArray(body.error.errors)) {\n                err.message = body.error.errors\n                    .map((err2) => err2.message)\n                    .join('\\n');\n                err.code = body.error.code;\n                err.errors = body.error.errors;\n            }\n            else {\n                err.message = body.error.message;\n                err.code = body.error.code;\n            }\n        }\n        else if (res && res.status >= 400) {\n            // Consider all 4xx and 5xx responses errors.\n            err.message = body;\n            err.status = res.status;\n        }\n        return err;\n    }\n}\nexports.DefaultTransporter = DefaultTransporter;\n/**\n * Default user agent.\n */\nDefaultTransporter.USER_AGENT = `${PRODUCT_NAME}/${pkg.version}`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy90cmFuc3BvcnRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsaUJBQWlCLG1CQUFPLENBQUMsOERBQVE7QUFDakMsa0JBQWtCLG1CQUFPLENBQUMsbUhBQVc7QUFDckM7QUFDQSxZQUFZLG1CQUFPLENBQUMsb0hBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGFBQWE7QUFDdkQ7QUFDQSx1QkFBdUIsU0FBUyxFQUFFLDhCQUE4QjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxZQUFZO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsYUFBYSxHQUFHLFlBQVkiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvdHJhbnNwb3J0ZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRlZmF1bHRUcmFuc3BvcnRlciA9IHZvaWQgMDtcbmNvbnN0IGdheGlvc18xID0gcmVxdWlyZShcImdheGlvc1wiKTtcbmNvbnN0IG9wdGlvbnNfMSA9IHJlcXVpcmUoXCIuL29wdGlvbnNcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgcGtnID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJyk7XG5jb25zdCBQUk9EVUNUX05BTUUgPSAnZ29vZ2xlLWFwaS1ub2RlanMtY2xpZW50JztcbmNsYXNzIERlZmF1bHRUcmFuc3BvcnRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGNvbmZpZ3VyYWJsZSwgcmVwbGFjYWJsZSBgR2F4aW9zYCBpbnN0YW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgZ2F4aW9zXzEuR2F4aW9zKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgcmVxdWVzdCBvcHRpb25zIGJlZm9yZSBtYWtpbmcgYSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBvcHRzIEdheGlvc09wdGlvbnMgb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJuIENvbmZpZ3VyZWQgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBjb25maWd1cmUob3B0cyA9IHt9KSB7XG4gICAgICAgIG9wdHMuaGVhZGVycyA9IG9wdHMuaGVhZGVycyB8fCB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBzZXQgdHJhbnNwb3J0ZXIgdXNlciBhZ2VudCBpZiBub3QgaW4gYnJvd3NlclxuICAgICAgICAgICAgY29uc3QgdWFWYWx1ZSA9IG9wdHMuaGVhZGVyc1snVXNlci1BZ2VudCddO1xuICAgICAgICAgICAgaWYgKCF1YVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb3B0cy5oZWFkZXJzWydVc2VyLUFnZW50J10gPSBEZWZhdWx0VHJhbnNwb3J0ZXIuVVNFUl9BR0VOVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCF1YVZhbHVlLmluY2x1ZGVzKGAke1BST0RVQ1RfTkFNRX0vYCkpIHtcbiAgICAgICAgICAgICAgICBvcHRzLmhlYWRlcnNbJ1VzZXItQWdlbnQnXSA9XG4gICAgICAgICAgICAgICAgICAgIGAke3VhVmFsdWV9ICR7RGVmYXVsdFRyYW5zcG9ydGVyLlVTRVJfQUdFTlR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRyYWNrIGdvb2dsZS1hdXRoLWxpYnJhcnktbm9kZWpzIHZlcnNpb246XG4gICAgICAgICAgICBpZiAoIW9wdHMuaGVhZGVyc1sneC1nb29nLWFwaS1jbGllbnQnXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVWZXJzaW9uID0gcHJvY2Vzcy52ZXJzaW9uLnJlcGxhY2UoL152LywgJycpO1xuICAgICAgICAgICAgICAgIG9wdHMuaGVhZGVyc1sneC1nb29nLWFwaS1jbGllbnQnXSA9IGBnbC1ub2RlLyR7bm9kZVZlcnNpb259YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFrZXMgYSByZXF1ZXN0IHVzaW5nIEdheGlvcyB3aXRoIGdpdmVuIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIG9wdHMgR2F4aW9zT3B0aW9ucyBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBvcHRpb25hbCBjYWxsYmFjayB0aGF0IGNvbnRhaW5zIEdheGlvc1Jlc3BvbnNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJuIEdheGlvc1Byb21pc2UsIGFzc3VtaW5nIG5vIGNhbGxiYWNrIGlzIHBhc3NlZC5cbiAgICAgKi9cbiAgICByZXF1ZXN0KG9wdHMpIHtcbiAgICAgICAgLy8gZW5zdXJlIHRoZSB1c2VyIGlzbid0IHBhc3NpbmcgaW4gcmVxdWVzdC1zdHlsZSBvcHRpb25zXG4gICAgICAgIG9wdHMgPSB0aGlzLmNvbmZpZ3VyZShvcHRzKTtcbiAgICAgICAgKDAsIG9wdGlvbnNfMS52YWxpZGF0ZSkob3B0cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlLnJlcXVlc3Qob3B0cykuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICB0aHJvdyB0aGlzLnByb2Nlc3NFcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBkZWZhdWx0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuZGVmYXVsdHM7XG4gICAgfVxuICAgIHNldCBkZWZhdWx0cyhvcHRzKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UuZGVmYXVsdHMgPSBvcHRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSBlcnJvciB0byBpbmNsdWRlIGRldGFpbHMgZnJvbSB0aGUgYm9keS5cbiAgICAgKi9cbiAgICBwcm9jZXNzRXJyb3IoZSkge1xuICAgICAgICBjb25zdCByZXMgPSBlLnJlc3BvbnNlO1xuICAgICAgICBjb25zdCBlcnIgPSBlO1xuICAgICAgICBjb25zdCBib2R5ID0gcmVzID8gcmVzLmRhdGEgOiBudWxsO1xuICAgICAgICBpZiAocmVzICYmIGJvZHkgJiYgYm9keS5lcnJvciAmJiByZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYm9keS5lcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA9IGJvZHkuZXJyb3I7XG4gICAgICAgICAgICAgICAgZXJyLnN0YXR1cyA9IHJlcy5zdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGJvZHkuZXJyb3IuZXJyb3JzKSkge1xuICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlID0gYm9keS5lcnJvci5lcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoZXJyMikgPT4gZXJyMi5tZXNzYWdlKVxuICAgICAgICAgICAgICAgICAgICAuam9pbignXFxuJyk7XG4gICAgICAgICAgICAgICAgZXJyLmNvZGUgPSBib2R5LmVycm9yLmNvZGU7XG4gICAgICAgICAgICAgICAgZXJyLmVycm9ycyA9IGJvZHkuZXJyb3IuZXJyb3JzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPSBib2R5LmVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgZXJyLmNvZGUgPSBib2R5LmVycm9yLmNvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzICYmIHJlcy5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgICAgICAvLyBDb25zaWRlciBhbGwgNHh4IGFuZCA1eHggcmVzcG9uc2VzIGVycm9ycy5cbiAgICAgICAgICAgIGVyci5tZXNzYWdlID0gYm9keTtcbiAgICAgICAgICAgIGVyci5zdGF0dXMgPSByZXMuc3RhdHVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgfVxufVxuZXhwb3J0cy5EZWZhdWx0VHJhbnNwb3J0ZXIgPSBEZWZhdWx0VHJhbnNwb3J0ZXI7XG4vKipcbiAqIERlZmF1bHQgdXNlciBhZ2VudC5cbiAqL1xuRGVmYXVsdFRyYW5zcG9ydGVyLlVTRVJfQUdFTlQgPSBgJHtQUk9EVUNUX05BTUV9LyR7cGtnLnZlcnNpb259YDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/transporters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LRUCache_instances, _LRUCache_cache, _LRUCache_moveToEnd, _LRUCache_evict;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LRUCache = void 0;\nexports.snakeToCamel = snakeToCamel;\nexports.originalOrCamelOptions = originalOrCamelOptions;\n/**\n * Returns the camel case of a provided string.\n *\n * @remarks\n *\n * Match any `_` and not `_` pair, then return the uppercase of the not `_`\n * character.\n *\n * @internal\n *\n * @param str the string to convert\n * @returns the camelCase'd string\n */\nfunction snakeToCamel(str) {\n    return str.replace(/([_][^_])/g, match => match.slice(1).toUpperCase());\n}\n/**\n * Get the value of `obj[key]` or `obj[camelCaseKey]`, with a preference\n * for original, non-camelCase key.\n *\n * @param obj object to lookup a value in\n * @returns a `get` function for getting `obj[key || snakeKey]`, if available\n */\nfunction originalOrCamelOptions(obj) {\n    /**\n     *\n     * @param key an index of object, preferably snake_case\n     * @returns the value `obj[key || snakeKey]`, if available\n     */\n    function get(key) {\n        var _a;\n        const o = (obj || {});\n        return (_a = o[key]) !== null && _a !== void 0 ? _a : o[snakeToCamel(key)];\n    }\n    return { get };\n}\n/**\n * A simple LRU cache utility.\n * Not meant for external usage.\n *\n * @experimental\n * @internal\n */\nclass LRUCache {\n    constructor(options) {\n        _LRUCache_instances.add(this);\n        /**\n         * Maps are in order. Thus, the older item is the first item.\n         *\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}\n         */\n        _LRUCache_cache.set(this, new Map());\n        this.capacity = options.capacity;\n        this.maxAge = options.maxAge;\n    }\n    /**\n     * Add an item to the cache.\n     *\n     * @param key the key to upsert\n     * @param value the value of the key\n     */\n    set(key, value) {\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, value);\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n    }\n    /**\n     * Get an item from the cache.\n     *\n     * @param key the key to retrieve\n     */\n    get(key) {\n        const item = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").get(key);\n        if (!item)\n            return;\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, item.value);\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n        return item.value;\n    }\n}\nexports.LRUCache = LRUCache;\n_LRUCache_cache = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_moveToEnd = function _LRUCache_moveToEnd(key, value) {\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(key);\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").set(key, {\n        value,\n        lastAccessed: Date.now(),\n    });\n}, _LRUCache_evict = function _LRUCache_evict() {\n    const cutoffDate = this.maxAge ? Date.now() - this.maxAge : 0;\n    /**\n     * Because we know Maps are in order, this item is both the\n     * last item in the list (capacity) and oldest (maxAge).\n     */\n    let oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n    while (!oldestItem.done &&\n        (__classPrivateFieldGet(this, _LRUCache_cache, \"f\").size > this.capacity || // too many\n            oldestItem.value[1].lastAccessed < cutoffDate) // too old\n    ) {\n        __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(oldestItem.value[0]);\n        oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfTFJVQ2FjaGVfaW5zdGFuY2VzLCBfTFJVQ2FjaGVfY2FjaGUsIF9MUlVDYWNoZV9tb3ZlVG9FbmQsIF9MUlVDYWNoZV9ldmljdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTFJVQ2FjaGUgPSB2b2lkIDA7XG5leHBvcnRzLnNuYWtlVG9DYW1lbCA9IHNuYWtlVG9DYW1lbDtcbmV4cG9ydHMub3JpZ2luYWxPckNhbWVsT3B0aW9ucyA9IG9yaWdpbmFsT3JDYW1lbE9wdGlvbnM7XG4vKipcbiAqIFJldHVybnMgdGhlIGNhbWVsIGNhc2Ugb2YgYSBwcm92aWRlZCBzdHJpbmcuXG4gKlxuICogQHJlbWFya3NcbiAqXG4gKiBNYXRjaCBhbnkgYF9gIGFuZCBub3QgYF9gIHBhaXIsIHRoZW4gcmV0dXJuIHRoZSB1cHBlcmNhc2Ugb2YgdGhlIG5vdCBgX2BcbiAqIGNoYXJhY3Rlci5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBAcGFyYW0gc3RyIHRoZSBzdHJpbmcgdG8gY29udmVydFxuICogQHJldHVybnMgdGhlIGNhbWVsQ2FzZSdkIHN0cmluZ1xuICovXG5mdW5jdGlvbiBzbmFrZVRvQ2FtZWwoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW19dW15fXSkvZywgbWF0Y2ggPT4gbWF0Y2guc2xpY2UoMSkudG9VcHBlckNhc2UoKSk7XG59XG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYG9ialtrZXldYCBvciBgb2JqW2NhbWVsQ2FzZUtleV1gLCB3aXRoIGEgcHJlZmVyZW5jZVxuICogZm9yIG9yaWdpbmFsLCBub24tY2FtZWxDYXNlIGtleS5cbiAqXG4gKiBAcGFyYW0gb2JqIG9iamVjdCB0byBsb29rdXAgYSB2YWx1ZSBpblxuICogQHJldHVybnMgYSBgZ2V0YCBmdW5jdGlvbiBmb3IgZ2V0dGluZyBgb2JqW2tleSB8fCBzbmFrZUtleV1gLCBpZiBhdmFpbGFibGVcbiAqL1xuZnVuY3Rpb24gb3JpZ2luYWxPckNhbWVsT3B0aW9ucyhvYmopIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgYW4gaW5kZXggb2Ygb2JqZWN0LCBwcmVmZXJhYmx5IHNuYWtlX2Nhc2VcbiAgICAgKiBAcmV0dXJucyB0aGUgdmFsdWUgYG9ialtrZXkgfHwgc25ha2VLZXldYCwgaWYgYXZhaWxhYmxlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IG8gPSAob2JqIHx8IHt9KTtcbiAgICAgICAgcmV0dXJuIChfYSA9IG9ba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogb1tzbmFrZVRvQ2FtZWwoa2V5KV07XG4gICAgfVxuICAgIHJldHVybiB7IGdldCB9O1xufVxuLyoqXG4gKiBBIHNpbXBsZSBMUlUgY2FjaGUgdXRpbGl0eS5cbiAqIE5vdCBtZWFudCBmb3IgZXh0ZXJuYWwgdXNhZ2UuXG4gKlxuICogQGV4cGVyaW1lbnRhbFxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIExSVUNhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIF9MUlVDYWNoZV9pbnN0YW5jZXMuYWRkKHRoaXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFwcyBhcmUgaW4gb3JkZXIuIFRodXMsIHRoZSBvbGRlciBpdGVtIGlzIHRoZSBmaXJzdCBpdGVtLlxuICAgICAgICAgKlxuICAgICAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwfVxuICAgICAgICAgKi9cbiAgICAgICAgX0xSVUNhY2hlX2NhY2hlLnNldCh0aGlzLCBuZXcgTWFwKCkpO1xuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gb3B0aW9ucy5jYXBhY2l0eTtcbiAgICAgICAgdGhpcy5tYXhBZ2UgPSBvcHRpb25zLm1heEFnZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGFuIGl0ZW0gdG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSB0aGUga2V5IHRvIHVwc2VydFxuICAgICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgb2YgdGhlIGtleVxuICAgICAqL1xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xSVUNhY2hlX2luc3RhbmNlcywgXCJtXCIsIF9MUlVDYWNoZV9tb3ZlVG9FbmQpLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xSVUNhY2hlX2luc3RhbmNlcywgXCJtXCIsIF9MUlVDYWNoZV9ldmljdCkuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFuIGl0ZW0gZnJvbSB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IHRoZSBrZXkgdG8gcmV0cmlldmVcbiAgICAgKi9cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MUlVDYWNoZV9jYWNoZSwgXCJmXCIpLmdldChrZXkpO1xuICAgICAgICBpZiAoIWl0ZW0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xSVUNhY2hlX2luc3RhbmNlcywgXCJtXCIsIF9MUlVDYWNoZV9tb3ZlVG9FbmQpLmNhbGwodGhpcywga2V5LCBpdGVtLnZhbHVlKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTFJVQ2FjaGVfaW5zdGFuY2VzLCBcIm1cIiwgX0xSVUNhY2hlX2V2aWN0KS5jYWxsKHRoaXMpO1xuICAgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLkxSVUNhY2hlID0gTFJVQ2FjaGU7XG5fTFJVQ2FjaGVfY2FjaGUgPSBuZXcgV2Vha01hcCgpLCBfTFJVQ2FjaGVfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0xSVUNhY2hlX21vdmVUb0VuZCA9IGZ1bmN0aW9uIF9MUlVDYWNoZV9tb3ZlVG9FbmQoa2V5LCB2YWx1ZSkge1xuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xSVUNhY2hlX2NhY2hlLCBcImZcIikuZGVsZXRlKGtleSk7XG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTFJVQ2FjaGVfY2FjaGUsIFwiZlwiKS5zZXQoa2V5LCB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBsYXN0QWNjZXNzZWQ6IERhdGUubm93KCksXG4gICAgfSk7XG59LCBfTFJVQ2FjaGVfZXZpY3QgPSBmdW5jdGlvbiBfTFJVQ2FjaGVfZXZpY3QoKSB7XG4gICAgY29uc3QgY3V0b2ZmRGF0ZSA9IHRoaXMubWF4QWdlID8gRGF0ZS5ub3coKSAtIHRoaXMubWF4QWdlIDogMDtcbiAgICAvKipcbiAgICAgKiBCZWNhdXNlIHdlIGtub3cgTWFwcyBhcmUgaW4gb3JkZXIsIHRoaXMgaXRlbSBpcyBib3RoIHRoZVxuICAgICAqIGxhc3QgaXRlbSBpbiB0aGUgbGlzdCAoY2FwYWNpdHkpIGFuZCBvbGRlc3QgKG1heEFnZSkuXG4gICAgICovXG4gICAgbGV0IG9sZGVzdEl0ZW0gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MUlVDYWNoZV9jYWNoZSwgXCJmXCIpLmVudHJpZXMoKS5uZXh0KCk7XG4gICAgd2hpbGUgKCFvbGRlc3RJdGVtLmRvbmUgJiZcbiAgICAgICAgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xSVUNhY2hlX2NhY2hlLCBcImZcIikuc2l6ZSA+IHRoaXMuY2FwYWNpdHkgfHwgLy8gdG9vIG1hbnlcbiAgICAgICAgICAgIG9sZGVzdEl0ZW0udmFsdWVbMV0ubGFzdEFjY2Vzc2VkIDwgY3V0b2ZmRGF0ZSkgLy8gdG9vIG9sZFxuICAgICkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9MUlVDYWNoZV9jYWNoZSwgXCJmXCIpLmRlbGV0ZShvbGRlc3RJdGVtLnZhbHVlWzBdKTtcbiAgICAgICAgb2xkZXN0SXRlbSA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0xSVUNhY2hlX2NhY2hlLCBcImZcIikuZW50cmllcygpLm5leHQoKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-auth-library/package.json":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-auth-library/package.json ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"google-auth-library","version":"9.15.1","author":"Google Inc.","description":"Google APIs Authentication Client Library for Node.js","engines":{"node":">=14"},"main":"./build/src/index.js","types":"./build/src/index.d.ts","repository":"googleapis/google-auth-library-nodejs.git","keywords":["google","api","google apis","client","client library"],"dependencies":{"base64-js":"^1.3.0","ecdsa-sig-formatter":"^1.0.11","gaxios":"^6.1.1","gcp-metadata":"^6.1.0","gtoken":"^7.0.0","jws":"^4.0.0"},"devDependencies":{"@types/base64-js":"^1.2.5","@types/chai":"^4.1.7","@types/jws":"^3.1.0","@types/mocha":"^9.0.0","@types/mv":"^2.1.0","@types/ncp":"^2.0.1","@types/node":"^20.4.2","@types/sinon":"^17.0.0","assert-rejects":"^1.0.0","c8":"^8.0.0","chai":"^4.2.0","cheerio":"1.0.0-rc.12","codecov":"^3.0.2","engine.io":"6.6.2","gts":"^5.0.0","is-docker":"^2.0.0","jsdoc":"^4.0.0","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","karma":"^6.0.0","karma-chrome-launcher":"^3.0.0","karma-coverage":"^2.0.0","karma-firefox-launcher":"^2.0.0","karma-mocha":"^2.0.0","karma-sourcemap-loader":"^0.4.0","karma-webpack":"5.0.0","keypair":"^1.0.4","linkinator":"^4.0.0","mocha":"^9.2.2","mv":"^2.1.1","ncp":"^2.0.0","nock":"^13.0.0","null-loader":"^4.0.0","pdfmake":"0.2.12","puppeteer":"^21.0.0","sinon":"^18.0.0","ts-loader":"^8.0.0","typescript":"^5.1.6","webpack":"^5.21.2","webpack-cli":"^4.0.0"},"files":["build/src","!build/src/**/*.map"],"scripts":{"test":"c8 mocha build/test","clean":"gts clean","prepare":"npm run compile","lint":"gts check","compile":"tsc -p .","fix":"gts fix","pretest":"npm run compile -- --sourceMap","docs":"jsdoc -c .jsdoc.json","samples-setup":"cd samples/ && npm link ../ && npm run setup && cd ../","samples-test":"cd samples/ && npm link ../ && npm test && cd ../","system-test":"mocha build/system-test --timeout 60000","presystem-test":"npm run compile -- --sourceMap","webpack":"webpack","browser-test":"karma start","docs-test":"linkinator docs","predocs-test":"npm run docs","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean"},"license":"Apache-2.0"}');

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/colours.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/colours.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Colours = void 0;\n/**\n * Handles figuring out if we can use ANSI colours and handing out the escape codes.\n *\n * This is for package-internal use only, and may change at any time.\n *\n * @private\n * @internal\n */\nclass Colours {\n    /**\n     * @param stream The stream (e.g. process.stderr)\n     * @returns true if the stream should have colourization enabled\n     */\n    static isEnabled(stream) {\n        return (stream.isTTY &&\n            (typeof stream.getColorDepth === 'function'\n                ? stream.getColorDepth() > 2\n                : true));\n    }\n    static refresh() {\n        Colours.enabled = Colours.isEnabled(process.stderr);\n        if (!this.enabled) {\n            Colours.reset = '';\n            Colours.bright = '';\n            Colours.dim = '';\n            Colours.red = '';\n            Colours.green = '';\n            Colours.yellow = '';\n            Colours.blue = '';\n            Colours.magenta = '';\n            Colours.cyan = '';\n            Colours.white = '';\n            Colours.grey = '';\n        }\n        else {\n            Colours.reset = '\\u001b[0m';\n            Colours.bright = '\\u001b[1m';\n            Colours.dim = '\\u001b[2m';\n            Colours.red = '\\u001b[31m';\n            Colours.green = '\\u001b[32m';\n            Colours.yellow = '\\u001b[33m';\n            Colours.blue = '\\u001b[34m';\n            Colours.magenta = '\\u001b[35m';\n            Colours.cyan = '\\u001b[36m';\n            Colours.white = '\\u001b[37m';\n            Colours.grey = '\\u001b[90m';\n        }\n    }\n}\nexports.Colours = Colours;\nColours.enabled = false;\nColours.reset = '';\nColours.bright = '';\nColours.dim = '';\nColours.red = '';\nColours.green = '';\nColours.yellow = '';\nColours.blue = '';\nColours.magenta = '';\nColours.cyan = '';\nColours.white = '';\nColours.grey = '';\nColours.refresh();\n//# sourceMappingURL=colours.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtbG9nZ2luZy11dGlscy9idWlsZC9zcmMvY29sb3Vycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2dvb2dsZS1sb2dnaW5nLXV0aWxzL2J1aWxkL3NyYy9jb2xvdXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbG91cnMgPSB2b2lkIDA7XG4vKipcbiAqIEhhbmRsZXMgZmlndXJpbmcgb3V0IGlmIHdlIGNhbiB1c2UgQU5TSSBjb2xvdXJzIGFuZCBoYW5kaW5nIG91dCB0aGUgZXNjYXBlIGNvZGVzLlxuICpcbiAqIFRoaXMgaXMgZm9yIHBhY2thZ2UtaW50ZXJuYWwgdXNlIG9ubHksIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQ29sb3VycyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHN0cmVhbSBUaGUgc3RyZWFtIChlLmcuIHByb2Nlc3Muc3RkZXJyKVxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHN0cmVhbSBzaG91bGQgaGF2ZSBjb2xvdXJpemF0aW9uIGVuYWJsZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgaXNFbmFibGVkKHN0cmVhbSkge1xuICAgICAgICByZXR1cm4gKHN0cmVhbS5pc1RUWSAmJlxuICAgICAgICAgICAgKHR5cGVvZiBzdHJlYW0uZ2V0Q29sb3JEZXB0aCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gc3RyZWFtLmdldENvbG9yRGVwdGgoKSA+IDJcbiAgICAgICAgICAgICAgICA6IHRydWUpKTtcbiAgICB9XG4gICAgc3RhdGljIHJlZnJlc2goKSB7XG4gICAgICAgIENvbG91cnMuZW5hYmxlZCA9IENvbG91cnMuaXNFbmFibGVkKHByb2Nlc3Muc3RkZXJyKTtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIENvbG91cnMucmVzZXQgPSAnJztcbiAgICAgICAgICAgIENvbG91cnMuYnJpZ2h0ID0gJyc7XG4gICAgICAgICAgICBDb2xvdXJzLmRpbSA9ICcnO1xuICAgICAgICAgICAgQ29sb3Vycy5yZWQgPSAnJztcbiAgICAgICAgICAgIENvbG91cnMuZ3JlZW4gPSAnJztcbiAgICAgICAgICAgIENvbG91cnMueWVsbG93ID0gJyc7XG4gICAgICAgICAgICBDb2xvdXJzLmJsdWUgPSAnJztcbiAgICAgICAgICAgIENvbG91cnMubWFnZW50YSA9ICcnO1xuICAgICAgICAgICAgQ29sb3Vycy5jeWFuID0gJyc7XG4gICAgICAgICAgICBDb2xvdXJzLndoaXRlID0gJyc7XG4gICAgICAgICAgICBDb2xvdXJzLmdyZXkgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIENvbG91cnMucmVzZXQgPSAnXFx1MDAxYlswbSc7XG4gICAgICAgICAgICBDb2xvdXJzLmJyaWdodCA9ICdcXHUwMDFiWzFtJztcbiAgICAgICAgICAgIENvbG91cnMuZGltID0gJ1xcdTAwMWJbMm0nO1xuICAgICAgICAgICAgQ29sb3Vycy5yZWQgPSAnXFx1MDAxYlszMW0nO1xuICAgICAgICAgICAgQ29sb3Vycy5ncmVlbiA9ICdcXHUwMDFiWzMybSc7XG4gICAgICAgICAgICBDb2xvdXJzLnllbGxvdyA9ICdcXHUwMDFiWzMzbSc7XG4gICAgICAgICAgICBDb2xvdXJzLmJsdWUgPSAnXFx1MDAxYlszNG0nO1xuICAgICAgICAgICAgQ29sb3Vycy5tYWdlbnRhID0gJ1xcdTAwMWJbMzVtJztcbiAgICAgICAgICAgIENvbG91cnMuY3lhbiA9ICdcXHUwMDFiWzM2bSc7XG4gICAgICAgICAgICBDb2xvdXJzLndoaXRlID0gJ1xcdTAwMWJbMzdtJztcbiAgICAgICAgICAgIENvbG91cnMuZ3JleSA9ICdcXHUwMDFiWzkwbSc7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNvbG91cnMgPSBDb2xvdXJzO1xuQ29sb3Vycy5lbmFibGVkID0gZmFsc2U7XG5Db2xvdXJzLnJlc2V0ID0gJyc7XG5Db2xvdXJzLmJyaWdodCA9ICcnO1xuQ29sb3Vycy5kaW0gPSAnJztcbkNvbG91cnMucmVkID0gJyc7XG5Db2xvdXJzLmdyZWVuID0gJyc7XG5Db2xvdXJzLnllbGxvdyA9ICcnO1xuQ29sb3Vycy5ibHVlID0gJyc7XG5Db2xvdXJzLm1hZ2VudGEgPSAnJztcbkNvbG91cnMuY3lhbiA9ICcnO1xuQ29sb3Vycy53aGl0ZSA9ICcnO1xuQ29sb3Vycy5ncmV5ID0gJyc7XG5Db2xvdXJzLnJlZnJlc2goKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbG91cnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/colours.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/index.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./logging-utils */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/logging-utils.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9nb29nbGUtbG9nZ2luZy11dGlscy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsZ0lBQWlCO0FBQ3RDIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2dvb2dsZS1sb2dnaW5nLXV0aWxzL2J1aWxkL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbG9nZ2luZy11dGlsc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/logging-utils.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/logging-utils.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n// Copyright 2021-2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.env = exports.DebugLogBackendBase = exports.placeholder = exports.AdhocDebugLogger = exports.LogSeverity = void 0;\nexports.getNodeBackend = getNodeBackend;\nexports.getDebugBackend = getDebugBackend;\nexports.getStructuredBackend = getStructuredBackend;\nexports.setBackend = setBackend;\nexports.log = log;\nconst node_events_1 = __webpack_require__(/*! node:events */ \"node:events\");\nconst process = __importStar(__webpack_require__(/*! node:process */ \"node:process\"));\nconst util = __importStar(__webpack_require__(/*! node:util */ \"node:util\"));\nconst colours_1 = __webpack_require__(/*! ./colours */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/colours.js\");\n// Some functions (as noted) are based on the Node standard library, from\n// the following file:\n//\n// https://github.com/nodejs/node/blob/main/lib/internal/util/debuglog.js\n/**\n * This module defines an ad-hoc debug logger for Google Cloud Platform\n * client libraries in Node. An ad-hoc debug logger is a tool which lets\n * users use an external, unified interface (in this case, environment\n * variables) to determine what logging they want to see at runtime. This\n * isn't necessarily fed into the console, but is meant to be under the\n * control of the user. The kind of logging that will be produced by this\n * is more like \"call retry happened\", not \"event you'd want to record\n * in Cloud Logger\".\n *\n * More for Googlers implementing libraries with it:\n * go/cloud-client-logging-design\n */\n/**\n * Possible log levels. These are a subset of Cloud Observability levels.\n * https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#LogSeverity\n */\nvar LogSeverity;\n(function (LogSeverity) {\n    LogSeverity[\"DEFAULT\"] = \"DEFAULT\";\n    LogSeverity[\"DEBUG\"] = \"DEBUG\";\n    LogSeverity[\"INFO\"] = \"INFO\";\n    LogSeverity[\"WARNING\"] = \"WARNING\";\n    LogSeverity[\"ERROR\"] = \"ERROR\";\n})(LogSeverity || (exports.LogSeverity = LogSeverity = {}));\n/**\n * Our logger instance. This actually contains the meat of dealing\n * with log lines, including EventEmitter. This contains the function\n * that will be passed back to users of the package.\n */\nclass AdhocDebugLogger extends node_events_1.EventEmitter {\n    /**\n     * @param upstream The backend will pass a function that will be\n     *   called whenever our logger function is invoked.\n     */\n    constructor(namespace, upstream) {\n        super();\n        this.namespace = namespace;\n        this.upstream = upstream;\n        this.func = Object.assign(this.invoke.bind(this), {\n            // Also add an instance pointer back to us.\n            instance: this,\n            // And pull over the EventEmitter functionality.\n            on: (event, listener) => this.on(event, listener),\n        });\n        // Convenience methods for log levels.\n        this.func.debug = (...args) => this.invokeSeverity(LogSeverity.DEBUG, ...args);\n        this.func.info = (...args) => this.invokeSeverity(LogSeverity.INFO, ...args);\n        this.func.warn = (...args) => this.invokeSeverity(LogSeverity.WARNING, ...args);\n        this.func.error = (...args) => this.invokeSeverity(LogSeverity.ERROR, ...args);\n        this.func.sublog = (namespace) => log(namespace, this.func);\n    }\n    invoke(fields, ...args) {\n        // Push out any upstream logger first.\n        if (this.upstream) {\n            this.upstream(fields, ...args);\n        }\n        // Emit sink events.\n        this.emit('log', fields, args);\n    }\n    invokeSeverity(severity, ...args) {\n        this.invoke({ severity }, ...args);\n    }\n}\nexports.AdhocDebugLogger = AdhocDebugLogger;\n/**\n * This can be used in place of a real logger while waiting for Promises or disabling logging.\n */\nexports.placeholder = new AdhocDebugLogger('', () => { }).func;\n/**\n * The base class for debug logging backends. It's possible to use this, but the\n * same non-guarantees above still apply (unstable interface, etc).\n *\n * @private\n * @internal\n */\nclass DebugLogBackendBase {\n    constructor() {\n        var _a;\n        this.cached = new Map();\n        this.filters = [];\n        this.filtersSet = false;\n        // Look for the Node config variable for what systems to enable. We'll store\n        // these for the log method below, which will call setFilters() once.\n        let nodeFlag = (_a = process.env[exports.env.nodeEnables]) !== null && _a !== void 0 ? _a : '*';\n        if (nodeFlag === 'all') {\n            nodeFlag = '*';\n        }\n        this.filters = nodeFlag.split(',');\n    }\n    log(namespace, fields, ...args) {\n        try {\n            if (!this.filtersSet) {\n                this.setFilters();\n                this.filtersSet = true;\n            }\n            let logger = this.cached.get(namespace);\n            if (!logger) {\n                logger = this.makeLogger(namespace);\n                this.cached.set(namespace, logger);\n            }\n            logger(fields, ...args);\n        }\n        catch (e) {\n            // Silently ignore all errors; we don't want them to interfere with\n            // the user's running app.\n            // e;\n            console.error(e);\n        }\n    }\n}\nexports.DebugLogBackendBase = DebugLogBackendBase;\n// The basic backend. This one definitely works, but it's less feature-filled.\n//\n// Rather than using util.debuglog, this implements the same basic logic directly.\n// The reason for this decision is that debuglog checks the value of the\n// NODE_DEBUG environment variable before any user code runs; we therefore\n// can't pipe our own enables into it (and util.debuglog will never print unless\n// the user duplicates it into NODE_DEBUG, which isn't reasonable).\n//\nclass NodeBackend extends DebugLogBackendBase {\n    constructor() {\n        super(...arguments);\n        // Default to allowing all systems, since we gate earlier based on whether the\n        // variable is empty.\n        this.enabledRegexp = /.*/g;\n    }\n    isEnabled(namespace) {\n        return this.enabledRegexp.test(namespace);\n    }\n    makeLogger(namespace) {\n        if (!this.enabledRegexp.test(namespace)) {\n            return () => { };\n        }\n        return (fields, ...args) => {\n            var _a;\n            // TODO: `fields` needs to be turned into a string here, one way or another.\n            const nscolour = `${colours_1.Colours.green}${namespace}${colours_1.Colours.reset}`;\n            const pid = `${colours_1.Colours.yellow}${process.pid}${colours_1.Colours.reset}`;\n            let level;\n            switch (fields.severity) {\n                case LogSeverity.ERROR:\n                    level = `${colours_1.Colours.red}${fields.severity}${colours_1.Colours.reset}`;\n                    break;\n                case LogSeverity.INFO:\n                    level = `${colours_1.Colours.magenta}${fields.severity}${colours_1.Colours.reset}`;\n                    break;\n                case LogSeverity.WARNING:\n                    level = `${colours_1.Colours.yellow}${fields.severity}${colours_1.Colours.reset}`;\n                    break;\n                default:\n                    level = (_a = fields.severity) !== null && _a !== void 0 ? _a : LogSeverity.DEFAULT;\n                    break;\n            }\n            const msg = util.formatWithOptions({ colors: colours_1.Colours.enabled }, ...args);\n            const filteredFields = Object.assign({}, fields);\n            delete filteredFields.severity;\n            const fieldsJson = Object.getOwnPropertyNames(filteredFields).length\n                ? JSON.stringify(filteredFields)\n                : '';\n            const fieldsColour = fieldsJson\n                ? `${colours_1.Colours.grey}${fieldsJson}${colours_1.Colours.reset}`\n                : '';\n            console.error('%s [%s|%s] %s%s', pid, nscolour, level, msg, fieldsJson ? ` ${fieldsColour}` : '');\n        };\n    }\n    // Regexp patterns below are from here:\n    // https://github.com/nodejs/node/blob/c0aebed4b3395bd65d54b18d1fd00f071002ac20/lib/internal/util/debuglog.js#L36\n    setFilters() {\n        const totalFilters = this.filters.join(',');\n        const regexp = totalFilters\n            .replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n            .replace(/\\*/g, '.*')\n            .replace(/,/g, '$|^');\n        this.enabledRegexp = new RegExp(`^${regexp}$`, 'i');\n    }\n}\n/**\n * @returns A backend based on Node util.debuglog; this is the default.\n */\nfunction getNodeBackend() {\n    return new NodeBackend();\n}\nclass DebugBackend extends DebugLogBackendBase {\n    constructor(pkg) {\n        super();\n        this.debugPkg = pkg;\n    }\n    makeLogger(namespace) {\n        const debugLogger = this.debugPkg(namespace);\n        return (fields, ...args) => {\n            // TODO: `fields` needs to be turned into a string here.\n            debugLogger(args[0], ...args.slice(1));\n        };\n    }\n    setFilters() {\n        var _a;\n        const existingFilters = (_a = process.env['NODE_DEBUG']) !== null && _a !== void 0 ? _a : '';\n        process.env['NODE_DEBUG'] = `${existingFilters}${existingFilters ? ',' : ''}${this.filters.join(',')}`;\n    }\n}\n/**\n * Creates a \"debug\" package backend. The user must call require('debug') and pass\n * the resulting object to this function.\n *\n * ```\n *  setBackend(getDebugBackend(require('debug')))\n * ```\n *\n * https://www.npmjs.com/package/debug\n *\n * Note: Google does not explicitly endorse or recommend this package; it's just\n * being provided as an option.\n *\n * @returns A backend based on the npm \"debug\" package.\n */\nfunction getDebugBackend(debugPkg) {\n    return new DebugBackend(debugPkg);\n}\n/**\n * This pretty much works like the Node logger, but it outputs structured\n * logging JSON matching Google Cloud's ingestion specs. Rather than handling\n * its own output, it wraps another backend. The passed backend must be a subclass\n * of `DebugLogBackendBase` (any of the backends exposed by this package will work).\n */\nclass StructuredBackend extends DebugLogBackendBase {\n    constructor(upstream) {\n        var _a;\n        super();\n        this.upstream = (_a = upstream) !== null && _a !== void 0 ? _a : new NodeBackend();\n    }\n    makeLogger(namespace) {\n        const debugLogger = this.upstream.makeLogger(namespace);\n        return (fields, ...args) => {\n            var _a;\n            const severity = (_a = fields.severity) !== null && _a !== void 0 ? _a : LogSeverity.INFO;\n            const json = Object.assign({\n                severity,\n                message: util.format(...args),\n            }, fields);\n            const jsonString = JSON.stringify(json);\n            debugLogger(fields, jsonString);\n        };\n    }\n    setFilters() {\n        this.upstream.setFilters();\n    }\n}\n/**\n * Creates a \"structured logging\" backend. This pretty much works like the\n * Node logger, but it outputs structured logging JSON matching Google\n * Cloud's ingestion specs instead of plain text.\n *\n * ```\n *  setBackend(getStructuredBackend())\n * ```\n *\n * @param upstream If you want to use something besides the Node backend to\n *   write the actual log lines into, pass that here.\n * @returns A backend based on Google Cloud structured logging.\n */\nfunction getStructuredBackend(upstream) {\n    return new StructuredBackend(upstream);\n}\n/**\n * The environment variables that we standardized on, for all ad-hoc logging.\n */\nexports.env = {\n    /**\n     * Filter wildcards specific to the Node syntax, and similar to the built-in\n     * utils.debuglog() environment variable. If missing, disables logging.\n     */\n    nodeEnables: 'GOOGLE_SDK_NODE_LOGGING',\n};\n// Keep a copy of all namespaced loggers so users can reliably .on() them.\n// Note that these cached functions will need to deal with changes in the backend.\nconst loggerCache = new Map();\n// Our current global backend. This might be:\nlet cachedBackend = undefined;\n/**\n * Set the backend to use for our log output.\n * - A backend object\n * - null to disable logging\n * - undefined for \"nothing yet\", defaults to the Node backend\n *\n * @param backend Results from one of the get*Backend() functions.\n */\nfunction setBackend(backend) {\n    cachedBackend = backend;\n    loggerCache.clear();\n}\n/**\n * Creates a logging function. Multiple calls to this with the same namespace\n * will produce the same logger, with the same event emitter hooks.\n *\n * Namespaces can be a simple string (\"system\" name), or a qualified string\n * (system:subsystem), which can be used for filtering, or for \"system:*\".\n *\n * @param namespace The namespace, a descriptive text string.\n * @returns A function you can call that works similar to console.log().\n */\nfunction log(namespace, parent) {\n    // If the enable flag isn't set, do nothing.\n    const enablesFlag = process.env[exports.env.nodeEnables];\n    if (!enablesFlag) {\n        return exports.placeholder;\n    }\n    // This might happen mostly if the typings are dropped in a user's code,\n    // or if they're calling from JavaScript.\n    if (!namespace) {\n        return exports.placeholder;\n    }\n    // Handle sub-loggers.\n    if (parent) {\n        namespace = `${parent.instance.namespace}:${namespace}`;\n    }\n    // Reuse loggers so things like event sinks are persistent.\n    const existing = loggerCache.get(namespace);\n    if (existing) {\n        return existing.func;\n    }\n    // Do we have a backend yet?\n    if (cachedBackend === null) {\n        // Explicitly disabled.\n        return exports.placeholder;\n    }\n    else if (cachedBackend === undefined) {\n        // One hasn't been made yet, so default to Node.\n        cachedBackend = getNodeBackend();\n    }\n    // The logger is further wrapped so we can handle the backend changing out.\n    const logger = (() => {\n        let previousBackend = undefined;\n        const newLogger = new AdhocDebugLogger(namespace, (fields, ...args) => {\n            if (previousBackend !== cachedBackend) {\n                // Did the user pass a custom backend?\n                if (cachedBackend === null) {\n                    // Explicitly disabled.\n                    return;\n                }\n                else if (cachedBackend === undefined) {\n                    // One hasn't been made yet, so default to Node.\n                    cachedBackend = getNodeBackend();\n                }\n                previousBackend = cachedBackend;\n            }\n            cachedBackend === null || cachedBackend === void 0 ? void 0 : cachedBackend.log(namespace, fields, ...args);\n        });\n        return newLogger;\n    })();\n    loggerCache.set(namespace, logger);\n    return logger.func;\n}\n//# sourceMappingURL=logging-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/google-logging-utils/build/src/logging-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/gtoken/build/src/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/gtoken/build/src/index.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _GoogleToken_instances, _GoogleToken_inFlightRequest, _GoogleToken_getTokenAsync, _GoogleToken_getTokenAsyncInner, _GoogleToken_ensureEmail, _GoogleToken_revokeTokenAsync, _GoogleToken_configure, _GoogleToken_requestToken;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GoogleToken = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst jws = __webpack_require__(/*! jws */ \"(rsc)/./node_modules/jws/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst readFile = fs.readFile\n    ? (0, util_1.promisify)(fs.readFile)\n    : async () => {\n        // if running in the web-browser, fs.readFile may not have been shimmed.\n        throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n    };\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\nclass ErrorWithCode extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nclass GoogleToken {\n    get accessToken() {\n        return this.rawToken ? this.rawToken.access_token : undefined;\n    }\n    get idToken() {\n        return this.rawToken ? this.rawToken.id_token : undefined;\n    }\n    get tokenType() {\n        return this.rawToken ? this.rawToken.token_type : undefined;\n    }\n    get refreshToken() {\n        return this.rawToken ? this.rawToken.refresh_token : undefined;\n    }\n    /**\n     * Create a GoogleToken.\n     *\n     * @param options  Configuration object.\n     */\n    constructor(options) {\n        _GoogleToken_instances.add(this);\n        this.transporter = {\n            request: opts => (0, gaxios_1.request)(opts),\n        };\n        _GoogleToken_inFlightRequest.set(this, void 0);\n        __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_configure).call(this, options);\n    }\n    /**\n     * Returns whether the token has expired.\n     *\n     * @return true if the token has expired, false otherwise.\n     */\n    hasExpired() {\n        const now = new Date().getTime();\n        if (this.rawToken && this.expiresAt) {\n            return now >= this.expiresAt;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * Returns whether the token will expire within eagerRefreshThresholdMillis\n     *\n     * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\n     */\n    isTokenExpiring() {\n        var _a;\n        const now = new Date().getTime();\n        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\n        if (this.rawToken && this.expiresAt) {\n            return this.expiresAt <= now + eagerRefreshThresholdMillis;\n        }\n        else {\n            return true;\n        }\n    }\n    getToken(callback, opts = {}) {\n        if (typeof callback === 'object') {\n            opts = callback;\n            callback = undefined;\n        }\n        opts = Object.assign({\n            forceRefresh: false,\n        }, opts);\n        if (callback) {\n            const cb = callback;\n            __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_getTokenAsync).call(this, opts).then(t => cb(null, t), callback);\n            return;\n        }\n        return __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_getTokenAsync).call(this, opts);\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n    async getCredentials(keyFile) {\n        const ext = path.extname(keyFile);\n        switch (ext) {\n            case '.json': {\n                const key = await readFile(keyFile, 'utf8');\n                const body = JSON.parse(key);\n                const privateKey = body.private_key;\n                const clientEmail = body.client_email;\n                if (!privateKey || !clientEmail) {\n                    throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n                }\n                return { privateKey, clientEmail };\n            }\n            case '.der':\n            case '.crt':\n            case '.pem': {\n                const privateKey = await readFile(keyFile, 'utf8');\n                return { privateKey };\n            }\n            case '.p12':\n            case '.pfx': {\n                throw new ErrorWithCode('*.p12 certificates are not supported after v6.1.2. ' +\n                    'Consider utilizing *.json format or converting *.p12 to *.pem using the OpenSSL CLI.', 'UNKNOWN_CERTIFICATE_TYPE');\n            }\n            default:\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\n                    'Current supported extensions are *.json, and *.pem.', 'UNKNOWN_CERTIFICATE_TYPE');\n        }\n    }\n    revokeToken(callback) {\n        if (callback) {\n            __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_revokeTokenAsync).call(this).then(() => callback(), callback);\n            return;\n        }\n        return __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_revokeTokenAsync).call(this);\n    }\n}\nexports.GoogleToken = GoogleToken;\n_GoogleToken_inFlightRequest = new WeakMap(), _GoogleToken_instances = new WeakSet(), _GoogleToken_getTokenAsync = async function _GoogleToken_getTokenAsync(opts) {\n    if (__classPrivateFieldGet(this, _GoogleToken_inFlightRequest, \"f\") && !opts.forceRefresh) {\n        return __classPrivateFieldGet(this, _GoogleToken_inFlightRequest, \"f\");\n    }\n    try {\n        return await (__classPrivateFieldSet(this, _GoogleToken_inFlightRequest, __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_getTokenAsyncInner).call(this, opts), \"f\"));\n    }\n    finally {\n        __classPrivateFieldSet(this, _GoogleToken_inFlightRequest, undefined, \"f\");\n    }\n}, _GoogleToken_getTokenAsyncInner = async function _GoogleToken_getTokenAsyncInner(opts) {\n    if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\n        return Promise.resolve(this.rawToken);\n    }\n    if (!this.key && !this.keyFile) {\n        throw new Error('No key or keyFile set.');\n    }\n    if (!this.key && this.keyFile) {\n        const creds = await this.getCredentials(this.keyFile);\n        this.key = creds.privateKey;\n        this.iss = creds.clientEmail || this.iss;\n        if (!creds.clientEmail) {\n            __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_ensureEmail).call(this);\n        }\n    }\n    return __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_requestToken).call(this);\n}, _GoogleToken_ensureEmail = function _GoogleToken_ensureEmail() {\n    if (!this.iss) {\n        throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n    }\n}, _GoogleToken_revokeTokenAsync = async function _GoogleToken_revokeTokenAsync() {\n    if (!this.accessToken) {\n        throw new Error('No token to revoke.');\n    }\n    const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n    await this.transporter.request({\n        url,\n        retry: true,\n    });\n    __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_configure).call(this, {\n        email: this.iss,\n        sub: this.sub,\n        key: this.key,\n        keyFile: this.keyFile,\n        scope: this.scope,\n        additionalClaims: this.additionalClaims,\n    });\n}, _GoogleToken_configure = function _GoogleToken_configure(options = {}) {\n    this.keyFile = options.keyFile;\n    this.key = options.key;\n    this.rawToken = undefined;\n    this.iss = options.email || options.iss;\n    this.sub = options.sub;\n    this.additionalClaims = options.additionalClaims;\n    if (typeof options.scope === 'object') {\n        this.scope = options.scope.join(' ');\n    }\n    else {\n        this.scope = options.scope;\n    }\n    this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n    if (options.transporter) {\n        this.transporter = options.transporter;\n    }\n}, _GoogleToken_requestToken = \n/**\n * Request the token from Google.\n */\nasync function _GoogleToken_requestToken() {\n    var _a, _b;\n    const iat = Math.floor(new Date().getTime() / 1000);\n    const additionalClaims = this.additionalClaims || {};\n    const payload = Object.assign({\n        iss: this.iss,\n        scope: this.scope,\n        aud: GOOGLE_TOKEN_URL,\n        exp: iat + 3600,\n        iat,\n        sub: this.sub,\n    }, additionalClaims);\n    const signedJWT = jws.sign({\n        header: { alg: 'RS256' },\n        payload,\n        secret: this.key,\n    });\n    try {\n        const r = await this.transporter.request({\n            method: 'POST',\n            url: GOOGLE_TOKEN_URL,\n            data: {\n                grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                assertion: signedJWT,\n            },\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            responseType: 'json',\n            retryConfig: {\n                httpMethodsToRetry: ['POST'],\n            },\n        });\n        this.rawToken = r.data;\n        this.expiresAt =\n            r.data.expires_in === null || r.data.expires_in === undefined\n                ? undefined\n                : (iat + r.data.expires_in) * 1000;\n        return this.rawToken;\n    }\n    catch (e) {\n        this.rawToken = undefined;\n        this.tokenExpires = undefined;\n        const body = e.response && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data)\n            ? (_b = e.response) === null || _b === void 0 ? void 0 : _b.data\n            : {};\n        if (body.error) {\n            const desc = body.error_description\n                ? `: ${body.error_description}`\n                : '';\n            e.message = `${body.error}${desc}`;\n        }\n        throw e;\n    }\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/gtoken/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/Mime.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/mime/Mime.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * @param typeMap [Object] Map of MIME type -> Array[extensions]\n * @param ...\n */\nfunction Mime() {\n  this._types = Object.create(null);\n  this._extensions = Object.create(null);\n\n  for (let i = 0; i < arguments.length; i++) {\n    this.define(arguments[i]);\n  }\n\n  this.define = this.define.bind(this);\n  this.getType = this.getType.bind(this);\n  this.getExtension = this.getExtension.bind(this);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * If a type declares an extension that has already been defined, an error will\n * be thrown.  To suppress this error and force the extension to be associated\n * with the new type, pass `force`=true.  Alternatively, you may prefix the\n * extension with \"*\" to map the type to extension, without mapping the\n * extension to the type.\n *\n * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});\n *\n *\n * @param map (Object) type definitions\n * @param force (Boolean) if true, force overriding of existing definitions\n */\nMime.prototype.define = function(typeMap, force) {\n  for (let type in typeMap) {\n    let extensions = typeMap[type].map(function(t) {\n      return t.toLowerCase();\n    });\n    type = type.toLowerCase();\n\n    for (let i = 0; i < extensions.length; i++) {\n      const ext = extensions[i];\n\n      // '*' prefix = not the preferred type for this extension.  So fixup the\n      // extension, and skip it.\n      if (ext[0] === '*') {\n        continue;\n      }\n\n      if (!force && (ext in this._types)) {\n        throw new Error(\n          'Attempt to change mapping for \"' + ext +\n          '\" extension from \"' + this._types[ext] + '\" to \"' + type +\n          '\". Pass `force=true` to allow this, otherwise remove \"' + ext +\n          '\" from the list of extensions for \"' + type + '\".'\n        );\n      }\n\n      this._types[ext] = type;\n    }\n\n    // Use first extension as default\n    if (force || !this._extensions[type]) {\n      const ext = extensions[0];\n      this._extensions[type] = (ext[0] !== '*') ? ext : ext.substr(1);\n    }\n  }\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.getType = function(path) {\n  path = String(path);\n  let last = path.replace(/^.*[/\\\\]/, '').toLowerCase();\n  let ext = last.replace(/^.*\\./, '').toLowerCase();\n\n  let hasPath = last.length < path.length;\n  let hasDot = ext.length < last.length - 1;\n\n  return (hasDot || !hasPath) && this._types[ext] || null;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.getExtension = function(type) {\n  type = /^\\s*([^;\\s]*)/.test(type) && RegExp.$1;\n  return type && this._extensions[type.toLowerCase()] || null;\n};\n\nmodule.exports = Mime;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9taW1lL01pbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbUNBQW1DO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQixHQUFHLHdCQUF3QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsb0JBQW9CLHVCQUF1QjtBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9taW1lL01pbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB0eXBlTWFwIFtPYmplY3RdIE1hcCBvZiBNSU1FIHR5cGUgLT4gQXJyYXlbZXh0ZW5zaW9uc11cbiAqIEBwYXJhbSAuLi5cbiAqL1xuZnVuY3Rpb24gTWltZSgpIHtcbiAgdGhpcy5fdHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9leHRlbnNpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuZGVmaW5lKGFyZ3VtZW50c1tpXSk7XG4gIH1cblxuICB0aGlzLmRlZmluZSA9IHRoaXMuZGVmaW5lLmJpbmQodGhpcyk7XG4gIHRoaXMuZ2V0VHlwZSA9IHRoaXMuZ2V0VHlwZS5iaW5kKHRoaXMpO1xuICB0aGlzLmdldEV4dGVuc2lvbiA9IHRoaXMuZ2V0RXh0ZW5zaW9uLmJpbmQodGhpcyk7XG59XG5cbi8qKlxuICogRGVmaW5lIG1pbWV0eXBlIC0+IGV4dGVuc2lvbiBtYXBwaW5ncy4gIEVhY2gga2V5IGlzIGEgbWltZS10eXBlIHRoYXQgbWFwc1xuICogdG8gYW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIHR5cGUuICBUaGUgZmlyc3QgZXh0ZW5zaW9uIGlzXG4gKiB1c2VkIGFzIHRoZSBkZWZhdWx0IGV4dGVuc2lvbiBmb3IgdGhlIHR5cGUuXG4gKlxuICogZS5nLiBtaW1lLmRlZmluZSh7J2F1ZGlvL29nZycsIFsnb2dhJywgJ29nZycsICdzcHgnXX0pO1xuICpcbiAqIElmIGEgdHlwZSBkZWNsYXJlcyBhbiBleHRlbnNpb24gdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQsIGFuIGVycm9yIHdpbGxcbiAqIGJlIHRocm93bi4gIFRvIHN1cHByZXNzIHRoaXMgZXJyb3IgYW5kIGZvcmNlIHRoZSBleHRlbnNpb24gdG8gYmUgYXNzb2NpYXRlZFxuICogd2l0aCB0aGUgbmV3IHR5cGUsIHBhc3MgYGZvcmNlYD10cnVlLiAgQWx0ZXJuYXRpdmVseSwgeW91IG1heSBwcmVmaXggdGhlXG4gKiBleHRlbnNpb24gd2l0aCBcIipcIiB0byBtYXAgdGhlIHR5cGUgdG8gZXh0ZW5zaW9uLCB3aXRob3V0IG1hcHBpbmcgdGhlXG4gKiBleHRlbnNpb24gdG8gdGhlIHR5cGUuXG4gKlxuICogZS5nLiBtaW1lLmRlZmluZSh7J2F1ZGlvL3dhdicsIFsnd2F2J119LCB7J2F1ZGlvL3gtd2F2JywgWycqd2F2J119KTtcbiAqXG4gKlxuICogQHBhcmFtIG1hcCAoT2JqZWN0KSB0eXBlIGRlZmluaXRpb25zXG4gKiBAcGFyYW0gZm9yY2UgKEJvb2xlYW4pIGlmIHRydWUsIGZvcmNlIG92ZXJyaWRpbmcgb2YgZXhpc3RpbmcgZGVmaW5pdGlvbnNcbiAqL1xuTWltZS5wcm90b3R5cGUuZGVmaW5lID0gZnVuY3Rpb24odHlwZU1hcCwgZm9yY2UpIHtcbiAgZm9yIChsZXQgdHlwZSBpbiB0eXBlTWFwKSB7XG4gICAgbGV0IGV4dGVuc2lvbnMgPSB0eXBlTWFwW3R5cGVdLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4dGVuc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGV4dCA9IGV4dGVuc2lvbnNbaV07XG5cbiAgICAgIC8vICcqJyBwcmVmaXggPSBub3QgdGhlIHByZWZlcnJlZCB0eXBlIGZvciB0aGlzIGV4dGVuc2lvbi4gIFNvIGZpeHVwIHRoZVxuICAgICAgLy8gZXh0ZW5zaW9uLCBhbmQgc2tpcCBpdC5cbiAgICAgIGlmIChleHRbMF0gPT09ICcqJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmb3JjZSAmJiAoZXh0IGluIHRoaXMuX3R5cGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0F0dGVtcHQgdG8gY2hhbmdlIG1hcHBpbmcgZm9yIFwiJyArIGV4dCArXG4gICAgICAgICAgJ1wiIGV4dGVuc2lvbiBmcm9tIFwiJyArIHRoaXMuX3R5cGVzW2V4dF0gKyAnXCIgdG8gXCInICsgdHlwZSArXG4gICAgICAgICAgJ1wiLiBQYXNzIGBmb3JjZT10cnVlYCB0byBhbGxvdyB0aGlzLCBvdGhlcndpc2UgcmVtb3ZlIFwiJyArIGV4dCArXG4gICAgICAgICAgJ1wiIGZyb20gdGhlIGxpc3Qgb2YgZXh0ZW5zaW9ucyBmb3IgXCInICsgdHlwZSArICdcIi4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3R5cGVzW2V4dF0gPSB0eXBlO1xuICAgIH1cblxuICAgIC8vIFVzZSBmaXJzdCBleHRlbnNpb24gYXMgZGVmYXVsdFxuICAgIGlmIChmb3JjZSB8fCAhdGhpcy5fZXh0ZW5zaW9uc1t0eXBlXSkge1xuICAgICAgY29uc3QgZXh0ID0gZXh0ZW5zaW9uc1swXTtcbiAgICAgIHRoaXMuX2V4dGVuc2lvbnNbdHlwZV0gPSAoZXh0WzBdICE9PSAnKicpID8gZXh0IDogZXh0LnN1YnN0cigxKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTG9va3VwIGEgbWltZSB0eXBlIGJhc2VkIG9uIGV4dGVuc2lvblxuICovXG5NaW1lLnByb3RvdHlwZS5nZXRUeXBlID0gZnVuY3Rpb24ocGF0aCkge1xuICBwYXRoID0gU3RyaW5nKHBhdGgpO1xuICBsZXQgbGFzdCA9IHBhdGgucmVwbGFjZSgvXi4qWy9cXFxcXS8sICcnKS50b0xvd2VyQ2FzZSgpO1xuICBsZXQgZXh0ID0gbGFzdC5yZXBsYWNlKC9eLipcXC4vLCAnJykudG9Mb3dlckNhc2UoKTtcblxuICBsZXQgaGFzUGF0aCA9IGxhc3QubGVuZ3RoIDwgcGF0aC5sZW5ndGg7XG4gIGxldCBoYXNEb3QgPSBleHQubGVuZ3RoIDwgbGFzdC5sZW5ndGggLSAxO1xuXG4gIHJldHVybiAoaGFzRG90IHx8ICFoYXNQYXRoKSAmJiB0aGlzLl90eXBlc1tleHRdIHx8IG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybiBmaWxlIGV4dGVuc2lvbiBhc3NvY2lhdGVkIHdpdGggYSBtaW1lIHR5cGVcbiAqL1xuTWltZS5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uID0gZnVuY3Rpb24odHlwZSkge1xuICB0eXBlID0gL15cXHMqKFteO1xcc10qKS8udGVzdCh0eXBlKSAmJiBSZWdFeHAuJDE7XG4gIHJldHVybiB0eXBlICYmIHRoaXMuX2V4dGVuc2lvbnNbdHlwZS50b0xvd2VyQ2FzZSgpXSB8fCBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNaW1lO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/Mime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/mime/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Mime = __webpack_require__(/*! ./Mime */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/Mime.js\");\nmodule.exports = new Mime(__webpack_require__(/*! ./types/standard */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/types/standard.js\"), __webpack_require__(/*! ./types/other */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/types/other.js\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9taW1lL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyxvRkFBUTtBQUMzQiwwQkFBMEIsbUJBQU8sQ0FBQyx3R0FBa0IsR0FBRyxtQkFBTyxDQUFDLGtHQUFlIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL21pbWUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgTWltZSA9IHJlcXVpcmUoJy4vTWltZScpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgTWltZShyZXF1aXJlKCcuL3R5cGVzL3N0YW5kYXJkJyksIHJlcXVpcmUoJy4vdHlwZXMvb3RoZXInKSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/types/other.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/mime/types/other.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("module.exports = {\"application/prs.cww\":[\"cww\"],\"application/vnd.1000minds.decision-model+xml\":[\"1km\"],\"application/vnd.3gpp.pic-bw-large\":[\"plb\"],\"application/vnd.3gpp.pic-bw-small\":[\"psb\"],\"application/vnd.3gpp.pic-bw-var\":[\"pvb\"],\"application/vnd.3gpp2.tcap\":[\"tcap\"],\"application/vnd.3m.post-it-notes\":[\"pwn\"],\"application/vnd.accpac.simply.aso\":[\"aso\"],\"application/vnd.accpac.simply.imp\":[\"imp\"],\"application/vnd.acucobol\":[\"acu\"],\"application/vnd.acucorp\":[\"atc\",\"acutc\"],\"application/vnd.adobe.air-application-installer-package+zip\":[\"air\"],\"application/vnd.adobe.formscentral.fcdt\":[\"fcdt\"],\"application/vnd.adobe.fxp\":[\"fxp\",\"fxpl\"],\"application/vnd.adobe.xdp+xml\":[\"xdp\"],\"application/vnd.adobe.xfdf\":[\"xfdf\"],\"application/vnd.ahead.space\":[\"ahead\"],\"application/vnd.airzip.filesecure.azf\":[\"azf\"],\"application/vnd.airzip.filesecure.azs\":[\"azs\"],\"application/vnd.amazon.ebook\":[\"azw\"],\"application/vnd.americandynamics.acc\":[\"acc\"],\"application/vnd.amiga.ami\":[\"ami\"],\"application/vnd.android.package-archive\":[\"apk\"],\"application/vnd.anser-web-certificate-issue-initiation\":[\"cii\"],\"application/vnd.anser-web-funds-transfer-initiation\":[\"fti\"],\"application/vnd.antix.game-component\":[\"atx\"],\"application/vnd.apple.installer+xml\":[\"mpkg\"],\"application/vnd.apple.keynote\":[\"key\"],\"application/vnd.apple.mpegurl\":[\"m3u8\"],\"application/vnd.apple.numbers\":[\"numbers\"],\"application/vnd.apple.pages\":[\"pages\"],\"application/vnd.apple.pkpass\":[\"pkpass\"],\"application/vnd.aristanetworks.swi\":[\"swi\"],\"application/vnd.astraea-software.iota\":[\"iota\"],\"application/vnd.audiograph\":[\"aep\"],\"application/vnd.balsamiq.bmml+xml\":[\"bmml\"],\"application/vnd.blueice.multipass\":[\"mpm\"],\"application/vnd.bmi\":[\"bmi\"],\"application/vnd.businessobjects\":[\"rep\"],\"application/vnd.chemdraw+xml\":[\"cdxml\"],\"application/vnd.chipnuts.karaoke-mmd\":[\"mmd\"],\"application/vnd.cinderella\":[\"cdy\"],\"application/vnd.citationstyles.style+xml\":[\"csl\"],\"application/vnd.claymore\":[\"cla\"],\"application/vnd.cloanto.rp9\":[\"rp9\"],\"application/vnd.clonk.c4group\":[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"],\"application/vnd.cluetrust.cartomobile-config\":[\"c11amc\"],\"application/vnd.cluetrust.cartomobile-config-pkg\":[\"c11amz\"],\"application/vnd.commonspace\":[\"csp\"],\"application/vnd.contact.cmsg\":[\"cdbcmsg\"],\"application/vnd.cosmocaller\":[\"cmc\"],\"application/vnd.crick.clicker\":[\"clkx\"],\"application/vnd.crick.clicker.keyboard\":[\"clkk\"],\"application/vnd.crick.clicker.palette\":[\"clkp\"],\"application/vnd.crick.clicker.template\":[\"clkt\"],\"application/vnd.crick.clicker.wordbank\":[\"clkw\"],\"application/vnd.criticaltools.wbs+xml\":[\"wbs\"],\"application/vnd.ctc-posml\":[\"pml\"],\"application/vnd.cups-ppd\":[\"ppd\"],\"application/vnd.curl.car\":[\"car\"],\"application/vnd.curl.pcurl\":[\"pcurl\"],\"application/vnd.dart\":[\"dart\"],\"application/vnd.data-vision.rdz\":[\"rdz\"],\"application/vnd.dbf\":[\"dbf\"],\"application/vnd.dece.data\":[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"],\"application/vnd.dece.ttml+xml\":[\"uvt\",\"uvvt\"],\"application/vnd.dece.unspecified\":[\"uvx\",\"uvvx\"],\"application/vnd.dece.zip\":[\"uvz\",\"uvvz\"],\"application/vnd.denovo.fcselayout-link\":[\"fe_launch\"],\"application/vnd.dna\":[\"dna\"],\"application/vnd.dolby.mlp\":[\"mlp\"],\"application/vnd.dpgraph\":[\"dpg\"],\"application/vnd.dreamfactory\":[\"dfac\"],\"application/vnd.ds-keypoint\":[\"kpxx\"],\"application/vnd.dvb.ait\":[\"ait\"],\"application/vnd.dvb.service\":[\"svc\"],\"application/vnd.dynageo\":[\"geo\"],\"application/vnd.ecowin.chart\":[\"mag\"],\"application/vnd.enliven\":[\"nml\"],\"application/vnd.epson.esf\":[\"esf\"],\"application/vnd.epson.msf\":[\"msf\"],\"application/vnd.epson.quickanime\":[\"qam\"],\"application/vnd.epson.salt\":[\"slt\"],\"application/vnd.epson.ssf\":[\"ssf\"],\"application/vnd.eszigno3+xml\":[\"es3\",\"et3\"],\"application/vnd.ezpix-album\":[\"ez2\"],\"application/vnd.ezpix-package\":[\"ez3\"],\"application/vnd.fdf\":[\"fdf\"],\"application/vnd.fdsn.mseed\":[\"mseed\"],\"application/vnd.fdsn.seed\":[\"seed\",\"dataless\"],\"application/vnd.flographit\":[\"gph\"],\"application/vnd.fluxtime.clip\":[\"ftc\"],\"application/vnd.framemaker\":[\"fm\",\"frame\",\"maker\",\"book\"],\"application/vnd.frogans.fnc\":[\"fnc\"],\"application/vnd.frogans.ltf\":[\"ltf\"],\"application/vnd.fsc.weblaunch\":[\"fsc\"],\"application/vnd.fujitsu.oasys\":[\"oas\"],\"application/vnd.fujitsu.oasys2\":[\"oa2\"],\"application/vnd.fujitsu.oasys3\":[\"oa3\"],\"application/vnd.fujitsu.oasysgp\":[\"fg5\"],\"application/vnd.fujitsu.oasysprs\":[\"bh2\"],\"application/vnd.fujixerox.ddd\":[\"ddd\"],\"application/vnd.fujixerox.docuworks\":[\"xdw\"],\"application/vnd.fujixerox.docuworks.binder\":[\"xbd\"],\"application/vnd.fuzzysheet\":[\"fzs\"],\"application/vnd.genomatix.tuxedo\":[\"txd\"],\"application/vnd.geogebra.file\":[\"ggb\"],\"application/vnd.geogebra.tool\":[\"ggt\"],\"application/vnd.geometry-explorer\":[\"gex\",\"gre\"],\"application/vnd.geonext\":[\"gxt\"],\"application/vnd.geoplan\":[\"g2w\"],\"application/vnd.geospace\":[\"g3w\"],\"application/vnd.gmx\":[\"gmx\"],\"application/vnd.google-apps.document\":[\"gdoc\"],\"application/vnd.google-apps.presentation\":[\"gslides\"],\"application/vnd.google-apps.spreadsheet\":[\"gsheet\"],\"application/vnd.google-earth.kml+xml\":[\"kml\"],\"application/vnd.google-earth.kmz\":[\"kmz\"],\"application/vnd.grafeq\":[\"gqf\",\"gqs\"],\"application/vnd.groove-account\":[\"gac\"],\"application/vnd.groove-help\":[\"ghf\"],\"application/vnd.groove-identity-message\":[\"gim\"],\"application/vnd.groove-injector\":[\"grv\"],\"application/vnd.groove-tool-message\":[\"gtm\"],\"application/vnd.groove-tool-template\":[\"tpl\"],\"application/vnd.groove-vcard\":[\"vcg\"],\"application/vnd.hal+xml\":[\"hal\"],\"application/vnd.handheld-entertainment+xml\":[\"zmm\"],\"application/vnd.hbci\":[\"hbci\"],\"application/vnd.hhe.lesson-player\":[\"les\"],\"application/vnd.hp-hpgl\":[\"hpgl\"],\"application/vnd.hp-hpid\":[\"hpid\"],\"application/vnd.hp-hps\":[\"hps\"],\"application/vnd.hp-jlyt\":[\"jlt\"],\"application/vnd.hp-pcl\":[\"pcl\"],\"application/vnd.hp-pclxl\":[\"pclxl\"],\"application/vnd.hydrostatix.sof-data\":[\"sfd-hdstx\"],\"application/vnd.ibm.minipay\":[\"mpy\"],\"application/vnd.ibm.modcap\":[\"afp\",\"listafp\",\"list3820\"],\"application/vnd.ibm.rights-management\":[\"irm\"],\"application/vnd.ibm.secure-container\":[\"sc\"],\"application/vnd.iccprofile\":[\"icc\",\"icm\"],\"application/vnd.igloader\":[\"igl\"],\"application/vnd.immervision-ivp\":[\"ivp\"],\"application/vnd.immervision-ivu\":[\"ivu\"],\"application/vnd.insors.igm\":[\"igm\"],\"application/vnd.intercon.formnet\":[\"xpw\",\"xpx\"],\"application/vnd.intergeo\":[\"i2g\"],\"application/vnd.intu.qbo\":[\"qbo\"],\"application/vnd.intu.qfx\":[\"qfx\"],\"application/vnd.ipunplugged.rcprofile\":[\"rcprofile\"],\"application/vnd.irepository.package+xml\":[\"irp\"],\"application/vnd.is-xpr\":[\"xpr\"],\"application/vnd.isac.fcs\":[\"fcs\"],\"application/vnd.jam\":[\"jam\"],\"application/vnd.jcp.javame.midlet-rms\":[\"rms\"],\"application/vnd.jisp\":[\"jisp\"],\"application/vnd.joost.joda-archive\":[\"joda\"],\"application/vnd.kahootz\":[\"ktz\",\"ktr\"],\"application/vnd.kde.karbon\":[\"karbon\"],\"application/vnd.kde.kchart\":[\"chrt\"],\"application/vnd.kde.kformula\":[\"kfo\"],\"application/vnd.kde.kivio\":[\"flw\"],\"application/vnd.kde.kontour\":[\"kon\"],\"application/vnd.kde.kpresenter\":[\"kpr\",\"kpt\"],\"application/vnd.kde.kspread\":[\"ksp\"],\"application/vnd.kde.kword\":[\"kwd\",\"kwt\"],\"application/vnd.kenameaapp\":[\"htke\"],\"application/vnd.kidspiration\":[\"kia\"],\"application/vnd.kinar\":[\"kne\",\"knp\"],\"application/vnd.koan\":[\"skp\",\"skd\",\"skt\",\"skm\"],\"application/vnd.kodak-descriptor\":[\"sse\"],\"application/vnd.las.las+xml\":[\"lasxml\"],\"application/vnd.llamagraphics.life-balance.desktop\":[\"lbd\"],\"application/vnd.llamagraphics.life-balance.exchange+xml\":[\"lbe\"],\"application/vnd.lotus-1-2-3\":[\"123\"],\"application/vnd.lotus-approach\":[\"apr\"],\"application/vnd.lotus-freelance\":[\"pre\"],\"application/vnd.lotus-notes\":[\"nsf\"],\"application/vnd.lotus-organizer\":[\"org\"],\"application/vnd.lotus-screencam\":[\"scm\"],\"application/vnd.lotus-wordpro\":[\"lwp\"],\"application/vnd.macports.portpkg\":[\"portpkg\"],\"application/vnd.mapbox-vector-tile\":[\"mvt\"],\"application/vnd.mcd\":[\"mcd\"],\"application/vnd.medcalcdata\":[\"mc1\"],\"application/vnd.mediastation.cdkey\":[\"cdkey\"],\"application/vnd.mfer\":[\"mwf\"],\"application/vnd.mfmp\":[\"mfm\"],\"application/vnd.micrografx.flo\":[\"flo\"],\"application/vnd.micrografx.igx\":[\"igx\"],\"application/vnd.mif\":[\"mif\"],\"application/vnd.mobius.daf\":[\"daf\"],\"application/vnd.mobius.dis\":[\"dis\"],\"application/vnd.mobius.mbk\":[\"mbk\"],\"application/vnd.mobius.mqy\":[\"mqy\"],\"application/vnd.mobius.msl\":[\"msl\"],\"application/vnd.mobius.plc\":[\"plc\"],\"application/vnd.mobius.txf\":[\"txf\"],\"application/vnd.mophun.application\":[\"mpn\"],\"application/vnd.mophun.certificate\":[\"mpc\"],\"application/vnd.mozilla.xul+xml\":[\"xul\"],\"application/vnd.ms-artgalry\":[\"cil\"],\"application/vnd.ms-cab-compressed\":[\"cab\"],\"application/vnd.ms-excel\":[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"],\"application/vnd.ms-excel.addin.macroenabled.12\":[\"xlam\"],\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":[\"xlsb\"],\"application/vnd.ms-excel.sheet.macroenabled.12\":[\"xlsm\"],\"application/vnd.ms-excel.template.macroenabled.12\":[\"xltm\"],\"application/vnd.ms-fontobject\":[\"eot\"],\"application/vnd.ms-htmlhelp\":[\"chm\"],\"application/vnd.ms-ims\":[\"ims\"],\"application/vnd.ms-lrm\":[\"lrm\"],\"application/vnd.ms-officetheme\":[\"thmx\"],\"application/vnd.ms-outlook\":[\"msg\"],\"application/vnd.ms-pki.seccat\":[\"cat\"],\"application/vnd.ms-pki.stl\":[\"*stl\"],\"application/vnd.ms-powerpoint\":[\"ppt\",\"pps\",\"pot\"],\"application/vnd.ms-powerpoint.addin.macroenabled.12\":[\"ppam\"],\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":[\"pptm\"],\"application/vnd.ms-powerpoint.slide.macroenabled.12\":[\"sldm\"],\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":[\"ppsm\"],\"application/vnd.ms-powerpoint.template.macroenabled.12\":[\"potm\"],\"application/vnd.ms-project\":[\"mpp\",\"mpt\"],\"application/vnd.ms-word.document.macroenabled.12\":[\"docm\"],\"application/vnd.ms-word.template.macroenabled.12\":[\"dotm\"],\"application/vnd.ms-works\":[\"wps\",\"wks\",\"wcm\",\"wdb\"],\"application/vnd.ms-wpl\":[\"wpl\"],\"application/vnd.ms-xpsdocument\":[\"xps\"],\"application/vnd.mseq\":[\"mseq\"],\"application/vnd.musician\":[\"mus\"],\"application/vnd.muvee.style\":[\"msty\"],\"application/vnd.mynfc\":[\"taglet\"],\"application/vnd.neurolanguage.nlu\":[\"nlu\"],\"application/vnd.nitf\":[\"ntf\",\"nitf\"],\"application/vnd.noblenet-directory\":[\"nnd\"],\"application/vnd.noblenet-sealer\":[\"nns\"],\"application/vnd.noblenet-web\":[\"nnw\"],\"application/vnd.nokia.n-gage.ac+xml\":[\"*ac\"],\"application/vnd.nokia.n-gage.data\":[\"ngdat\"],\"application/vnd.nokia.n-gage.symbian.install\":[\"n-gage\"],\"application/vnd.nokia.radio-preset\":[\"rpst\"],\"application/vnd.nokia.radio-presets\":[\"rpss\"],\"application/vnd.novadigm.edm\":[\"edm\"],\"application/vnd.novadigm.edx\":[\"edx\"],\"application/vnd.novadigm.ext\":[\"ext\"],\"application/vnd.oasis.opendocument.chart\":[\"odc\"],\"application/vnd.oasis.opendocument.chart-template\":[\"otc\"],\"application/vnd.oasis.opendocument.database\":[\"odb\"],\"application/vnd.oasis.opendocument.formula\":[\"odf\"],\"application/vnd.oasis.opendocument.formula-template\":[\"odft\"],\"application/vnd.oasis.opendocument.graphics\":[\"odg\"],\"application/vnd.oasis.opendocument.graphics-template\":[\"otg\"],\"application/vnd.oasis.opendocument.image\":[\"odi\"],\"application/vnd.oasis.opendocument.image-template\":[\"oti\"],\"application/vnd.oasis.opendocument.presentation\":[\"odp\"],\"application/vnd.oasis.opendocument.presentation-template\":[\"otp\"],\"application/vnd.oasis.opendocument.spreadsheet\":[\"ods\"],\"application/vnd.oasis.opendocument.spreadsheet-template\":[\"ots\"],\"application/vnd.oasis.opendocument.text\":[\"odt\"],\"application/vnd.oasis.opendocument.text-master\":[\"odm\"],\"application/vnd.oasis.opendocument.text-template\":[\"ott\"],\"application/vnd.oasis.opendocument.text-web\":[\"oth\"],\"application/vnd.olpc-sugar\":[\"xo\"],\"application/vnd.oma.dd2+xml\":[\"dd2\"],\"application/vnd.openblox.game+xml\":[\"obgx\"],\"application/vnd.openofficeorg.extension\":[\"oxt\"],\"application/vnd.openstreetmap.data+xml\":[\"osm\"],\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":[\"pptx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slide\":[\"sldx\"],\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":[\"ppsx\"],\"application/vnd.openxmlformats-officedocument.presentationml.template\":[\"potx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":[\"xlsx\"],\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":[\"xltx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":[\"docx\"],\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":[\"dotx\"],\"application/vnd.osgeo.mapguide.package\":[\"mgp\"],\"application/vnd.osgi.dp\":[\"dp\"],\"application/vnd.osgi.subsystem\":[\"esa\"],\"application/vnd.palm\":[\"pdb\",\"pqa\",\"oprc\"],\"application/vnd.pawaafile\":[\"paw\"],\"application/vnd.pg.format\":[\"str\"],\"application/vnd.pg.osasli\":[\"ei6\"],\"application/vnd.picsel\":[\"efif\"],\"application/vnd.pmi.widget\":[\"wg\"],\"application/vnd.pocketlearn\":[\"plf\"],\"application/vnd.powerbuilder6\":[\"pbd\"],\"application/vnd.previewsystems.box\":[\"box\"],\"application/vnd.proteus.magazine\":[\"mgz\"],\"application/vnd.publishare-delta-tree\":[\"qps\"],\"application/vnd.pvi.ptid1\":[\"ptid\"],\"application/vnd.quark.quarkxpress\":[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"],\"application/vnd.rar\":[\"rar\"],\"application/vnd.realvnc.bed\":[\"bed\"],\"application/vnd.recordare.musicxml\":[\"mxl\"],\"application/vnd.recordare.musicxml+xml\":[\"musicxml\"],\"application/vnd.rig.cryptonote\":[\"cryptonote\"],\"application/vnd.rim.cod\":[\"cod\"],\"application/vnd.rn-realmedia\":[\"rm\"],\"application/vnd.rn-realmedia-vbr\":[\"rmvb\"],\"application/vnd.route66.link66+xml\":[\"link66\"],\"application/vnd.sailingtracker.track\":[\"st\"],\"application/vnd.seemail\":[\"see\"],\"application/vnd.sema\":[\"sema\"],\"application/vnd.semd\":[\"semd\"],\"application/vnd.semf\":[\"semf\"],\"application/vnd.shana.informed.formdata\":[\"ifm\"],\"application/vnd.shana.informed.formtemplate\":[\"itp\"],\"application/vnd.shana.informed.interchange\":[\"iif\"],\"application/vnd.shana.informed.package\":[\"ipk\"],\"application/vnd.simtech-mindmapper\":[\"twd\",\"twds\"],\"application/vnd.smaf\":[\"mmf\"],\"application/vnd.smart.teacher\":[\"teacher\"],\"application/vnd.software602.filler.form+xml\":[\"fo\"],\"application/vnd.solent.sdkm+xml\":[\"sdkm\",\"sdkd\"],\"application/vnd.spotfire.dxp\":[\"dxp\"],\"application/vnd.spotfire.sfs\":[\"sfs\"],\"application/vnd.stardivision.calc\":[\"sdc\"],\"application/vnd.stardivision.draw\":[\"sda\"],\"application/vnd.stardivision.impress\":[\"sdd\"],\"application/vnd.stardivision.math\":[\"smf\"],\"application/vnd.stardivision.writer\":[\"sdw\",\"vor\"],\"application/vnd.stardivision.writer-global\":[\"sgl\"],\"application/vnd.stepmania.package\":[\"smzip\"],\"application/vnd.stepmania.stepchart\":[\"sm\"],\"application/vnd.sun.wadl+xml\":[\"wadl\"],\"application/vnd.sun.xml.calc\":[\"sxc\"],\"application/vnd.sun.xml.calc.template\":[\"stc\"],\"application/vnd.sun.xml.draw\":[\"sxd\"],\"application/vnd.sun.xml.draw.template\":[\"std\"],\"application/vnd.sun.xml.impress\":[\"sxi\"],\"application/vnd.sun.xml.impress.template\":[\"sti\"],\"application/vnd.sun.xml.math\":[\"sxm\"],\"application/vnd.sun.xml.writer\":[\"sxw\"],\"application/vnd.sun.xml.writer.global\":[\"sxg\"],\"application/vnd.sun.xml.writer.template\":[\"stw\"],\"application/vnd.sus-calendar\":[\"sus\",\"susp\"],\"application/vnd.svd\":[\"svd\"],\"application/vnd.symbian.install\":[\"sis\",\"sisx\"],\"application/vnd.syncml+xml\":[\"xsm\"],\"application/vnd.syncml.dm+wbxml\":[\"bdm\"],\"application/vnd.syncml.dm+xml\":[\"xdm\"],\"application/vnd.syncml.dmddf+xml\":[\"ddf\"],\"application/vnd.tao.intent-module-archive\":[\"tao\"],\"application/vnd.tcpdump.pcap\":[\"pcap\",\"cap\",\"dmp\"],\"application/vnd.tmobile-livetv\":[\"tmo\"],\"application/vnd.trid.tpt\":[\"tpt\"],\"application/vnd.triscape.mxs\":[\"mxs\"],\"application/vnd.trueapp\":[\"tra\"],\"application/vnd.ufdl\":[\"ufd\",\"ufdl\"],\"application/vnd.uiq.theme\":[\"utz\"],\"application/vnd.umajin\":[\"umj\"],\"application/vnd.unity\":[\"unityweb\"],\"application/vnd.uoml+xml\":[\"uoml\"],\"application/vnd.vcx\":[\"vcx\"],\"application/vnd.visio\":[\"vsd\",\"vst\",\"vss\",\"vsw\"],\"application/vnd.visionary\":[\"vis\"],\"application/vnd.vsf\":[\"vsf\"],\"application/vnd.wap.wbxml\":[\"wbxml\"],\"application/vnd.wap.wmlc\":[\"wmlc\"],\"application/vnd.wap.wmlscriptc\":[\"wmlsc\"],\"application/vnd.webturbo\":[\"wtb\"],\"application/vnd.wolfram.player\":[\"nbp\"],\"application/vnd.wordperfect\":[\"wpd\"],\"application/vnd.wqd\":[\"wqd\"],\"application/vnd.wt.stf\":[\"stf\"],\"application/vnd.xara\":[\"xar\"],\"application/vnd.xfdl\":[\"xfdl\"],\"application/vnd.yamaha.hv-dic\":[\"hvd\"],\"application/vnd.yamaha.hv-script\":[\"hvs\"],\"application/vnd.yamaha.hv-voice\":[\"hvp\"],\"application/vnd.yamaha.openscoreformat\":[\"osf\"],\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":[\"osfpvg\"],\"application/vnd.yamaha.smaf-audio\":[\"saf\"],\"application/vnd.yamaha.smaf-phrase\":[\"spf\"],\"application/vnd.yellowriver-custom-menu\":[\"cmp\"],\"application/vnd.zul\":[\"zir\",\"zirz\"],\"application/vnd.zzazz.deck+xml\":[\"zaz\"],\"application/x-7z-compressed\":[\"7z\"],\"application/x-abiword\":[\"abw\"],\"application/x-ace-compressed\":[\"ace\"],\"application/x-apple-diskimage\":[\"*dmg\"],\"application/x-arj\":[\"arj\"],\"application/x-authorware-bin\":[\"aab\",\"x32\",\"u32\",\"vox\"],\"application/x-authorware-map\":[\"aam\"],\"application/x-authorware-seg\":[\"aas\"],\"application/x-bcpio\":[\"bcpio\"],\"application/x-bdoc\":[\"*bdoc\"],\"application/x-bittorrent\":[\"torrent\"],\"application/x-blorb\":[\"blb\",\"blorb\"],\"application/x-bzip\":[\"bz\"],\"application/x-bzip2\":[\"bz2\",\"boz\"],\"application/x-cbr\":[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"],\"application/x-cdlink\":[\"vcd\"],\"application/x-cfs-compressed\":[\"cfs\"],\"application/x-chat\":[\"chat\"],\"application/x-chess-pgn\":[\"pgn\"],\"application/x-chrome-extension\":[\"crx\"],\"application/x-cocoa\":[\"cco\"],\"application/x-conference\":[\"nsc\"],\"application/x-cpio\":[\"cpio\"],\"application/x-csh\":[\"csh\"],\"application/x-debian-package\":[\"*deb\",\"udeb\"],\"application/x-dgc-compressed\":[\"dgc\"],\"application/x-director\":[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"],\"application/x-doom\":[\"wad\"],\"application/x-dtbncx+xml\":[\"ncx\"],\"application/x-dtbook+xml\":[\"dtb\"],\"application/x-dtbresource+xml\":[\"res\"],\"application/x-dvi\":[\"dvi\"],\"application/x-envoy\":[\"evy\"],\"application/x-eva\":[\"eva\"],\"application/x-font-bdf\":[\"bdf\"],\"application/x-font-ghostscript\":[\"gsf\"],\"application/x-font-linux-psf\":[\"psf\"],\"application/x-font-pcf\":[\"pcf\"],\"application/x-font-snf\":[\"snf\"],\"application/x-font-type1\":[\"pfa\",\"pfb\",\"pfm\",\"afm\"],\"application/x-freearc\":[\"arc\"],\"application/x-futuresplash\":[\"spl\"],\"application/x-gca-compressed\":[\"gca\"],\"application/x-glulx\":[\"ulx\"],\"application/x-gnumeric\":[\"gnumeric\"],\"application/x-gramps-xml\":[\"gramps\"],\"application/x-gtar\":[\"gtar\"],\"application/x-hdf\":[\"hdf\"],\"application/x-httpd-php\":[\"php\"],\"application/x-install-instructions\":[\"install\"],\"application/x-iso9660-image\":[\"*iso\"],\"application/x-iwork-keynote-sffkey\":[\"*key\"],\"application/x-iwork-numbers-sffnumbers\":[\"*numbers\"],\"application/x-iwork-pages-sffpages\":[\"*pages\"],\"application/x-java-archive-diff\":[\"jardiff\"],\"application/x-java-jnlp-file\":[\"jnlp\"],\"application/x-keepass2\":[\"kdbx\"],\"application/x-latex\":[\"latex\"],\"application/x-lua-bytecode\":[\"luac\"],\"application/x-lzh-compressed\":[\"lzh\",\"lha\"],\"application/x-makeself\":[\"run\"],\"application/x-mie\":[\"mie\"],\"application/x-mobipocket-ebook\":[\"prc\",\"mobi\"],\"application/x-ms-application\":[\"application\"],\"application/x-ms-shortcut\":[\"lnk\"],\"application/x-ms-wmd\":[\"wmd\"],\"application/x-ms-wmz\":[\"wmz\"],\"application/x-ms-xbap\":[\"xbap\"],\"application/x-msaccess\":[\"mdb\"],\"application/x-msbinder\":[\"obd\"],\"application/x-mscardfile\":[\"crd\"],\"application/x-msclip\":[\"clp\"],\"application/x-msdos-program\":[\"*exe\"],\"application/x-msdownload\":[\"*exe\",\"*dll\",\"com\",\"bat\",\"*msi\"],\"application/x-msmediaview\":[\"mvb\",\"m13\",\"m14\"],\"application/x-msmetafile\":[\"*wmf\",\"*wmz\",\"*emf\",\"emz\"],\"application/x-msmoney\":[\"mny\"],\"application/x-mspublisher\":[\"pub\"],\"application/x-msschedule\":[\"scd\"],\"application/x-msterminal\":[\"trm\"],\"application/x-mswrite\":[\"wri\"],\"application/x-netcdf\":[\"nc\",\"cdf\"],\"application/x-ns-proxy-autoconfig\":[\"pac\"],\"application/x-nzb\":[\"nzb\"],\"application/x-perl\":[\"pl\",\"pm\"],\"application/x-pilot\":[\"*prc\",\"*pdb\"],\"application/x-pkcs12\":[\"p12\",\"pfx\"],\"application/x-pkcs7-certificates\":[\"p7b\",\"spc\"],\"application/x-pkcs7-certreqresp\":[\"p7r\"],\"application/x-rar-compressed\":[\"*rar\"],\"application/x-redhat-package-manager\":[\"rpm\"],\"application/x-research-info-systems\":[\"ris\"],\"application/x-sea\":[\"sea\"],\"application/x-sh\":[\"sh\"],\"application/x-shar\":[\"shar\"],\"application/x-shockwave-flash\":[\"swf\"],\"application/x-silverlight-app\":[\"xap\"],\"application/x-sql\":[\"sql\"],\"application/x-stuffit\":[\"sit\"],\"application/x-stuffitx\":[\"sitx\"],\"application/x-subrip\":[\"srt\"],\"application/x-sv4cpio\":[\"sv4cpio\"],\"application/x-sv4crc\":[\"sv4crc\"],\"application/x-t3vm-image\":[\"t3\"],\"application/x-tads\":[\"gam\"],\"application/x-tar\":[\"tar\"],\"application/x-tcl\":[\"tcl\",\"tk\"],\"application/x-tex\":[\"tex\"],\"application/x-tex-tfm\":[\"tfm\"],\"application/x-texinfo\":[\"texinfo\",\"texi\"],\"application/x-tgif\":[\"*obj\"],\"application/x-ustar\":[\"ustar\"],\"application/x-virtualbox-hdd\":[\"hdd\"],\"application/x-virtualbox-ova\":[\"ova\"],\"application/x-virtualbox-ovf\":[\"ovf\"],\"application/x-virtualbox-vbox\":[\"vbox\"],\"application/x-virtualbox-vbox-extpack\":[\"vbox-extpack\"],\"application/x-virtualbox-vdi\":[\"vdi\"],\"application/x-virtualbox-vhd\":[\"vhd\"],\"application/x-virtualbox-vmdk\":[\"vmdk\"],\"application/x-wais-source\":[\"src\"],\"application/x-web-app-manifest+json\":[\"webapp\"],\"application/x-x509-ca-cert\":[\"der\",\"crt\",\"pem\"],\"application/x-xfig\":[\"fig\"],\"application/x-xliff+xml\":[\"*xlf\"],\"application/x-xpinstall\":[\"xpi\"],\"application/x-xz\":[\"xz\"],\"application/x-zmachine\":[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"],\"audio/vnd.dece.audio\":[\"uva\",\"uvva\"],\"audio/vnd.digital-winds\":[\"eol\"],\"audio/vnd.dra\":[\"dra\"],\"audio/vnd.dts\":[\"dts\"],\"audio/vnd.dts.hd\":[\"dtshd\"],\"audio/vnd.lucent.voice\":[\"lvp\"],\"audio/vnd.ms-playready.media.pya\":[\"pya\"],\"audio/vnd.nuera.ecelp4800\":[\"ecelp4800\"],\"audio/vnd.nuera.ecelp7470\":[\"ecelp7470\"],\"audio/vnd.nuera.ecelp9600\":[\"ecelp9600\"],\"audio/vnd.rip\":[\"rip\"],\"audio/x-aac\":[\"aac\"],\"audio/x-aiff\":[\"aif\",\"aiff\",\"aifc\"],\"audio/x-caf\":[\"caf\"],\"audio/x-flac\":[\"flac\"],\"audio/x-m4a\":[\"*m4a\"],\"audio/x-matroska\":[\"mka\"],\"audio/x-mpegurl\":[\"m3u\"],\"audio/x-ms-wax\":[\"wax\"],\"audio/x-ms-wma\":[\"wma\"],\"audio/x-pn-realaudio\":[\"ram\",\"ra\"],\"audio/x-pn-realaudio-plugin\":[\"rmp\"],\"audio/x-realaudio\":[\"*ra\"],\"audio/x-wav\":[\"*wav\"],\"chemical/x-cdx\":[\"cdx\"],\"chemical/x-cif\":[\"cif\"],\"chemical/x-cmdf\":[\"cmdf\"],\"chemical/x-cml\":[\"cml\"],\"chemical/x-csml\":[\"csml\"],\"chemical/x-xyz\":[\"xyz\"],\"image/prs.btif\":[\"btif\"],\"image/prs.pti\":[\"pti\"],\"image/vnd.adobe.photoshop\":[\"psd\"],\"image/vnd.airzip.accelerator.azv\":[\"azv\"],\"image/vnd.dece.graphic\":[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"],\"image/vnd.djvu\":[\"djvu\",\"djv\"],\"image/vnd.dvb.subtitle\":[\"*sub\"],\"image/vnd.dwg\":[\"dwg\"],\"image/vnd.dxf\":[\"dxf\"],\"image/vnd.fastbidsheet\":[\"fbs\"],\"image/vnd.fpx\":[\"fpx\"],\"image/vnd.fst\":[\"fst\"],\"image/vnd.fujixerox.edmics-mmr\":[\"mmr\"],\"image/vnd.fujixerox.edmics-rlc\":[\"rlc\"],\"image/vnd.microsoft.icon\":[\"ico\"],\"image/vnd.ms-dds\":[\"dds\"],\"image/vnd.ms-modi\":[\"mdi\"],\"image/vnd.ms-photo\":[\"wdp\"],\"image/vnd.net-fpx\":[\"npx\"],\"image/vnd.pco.b16\":[\"b16\"],\"image/vnd.tencent.tap\":[\"tap\"],\"image/vnd.valve.source.texture\":[\"vtf\"],\"image/vnd.wap.wbmp\":[\"wbmp\"],\"image/vnd.xiff\":[\"xif\"],\"image/vnd.zbrush.pcx\":[\"pcx\"],\"image/x-3ds\":[\"3ds\"],\"image/x-cmu-raster\":[\"ras\"],\"image/x-cmx\":[\"cmx\"],\"image/x-freehand\":[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"],\"image/x-icon\":[\"*ico\"],\"image/x-jng\":[\"jng\"],\"image/x-mrsid-image\":[\"sid\"],\"image/x-ms-bmp\":[\"*bmp\"],\"image/x-pcx\":[\"*pcx\"],\"image/x-pict\":[\"pic\",\"pct\"],\"image/x-portable-anymap\":[\"pnm\"],\"image/x-portable-bitmap\":[\"pbm\"],\"image/x-portable-graymap\":[\"pgm\"],\"image/x-portable-pixmap\":[\"ppm\"],\"image/x-rgb\":[\"rgb\"],\"image/x-tga\":[\"tga\"],\"image/x-xbitmap\":[\"xbm\"],\"image/x-xpixmap\":[\"xpm\"],\"image/x-xwindowdump\":[\"xwd\"],\"message/vnd.wfa.wsc\":[\"wsc\"],\"model/vnd.collada+xml\":[\"dae\"],\"model/vnd.dwf\":[\"dwf\"],\"model/vnd.gdl\":[\"gdl\"],\"model/vnd.gtw\":[\"gtw\"],\"model/vnd.mts\":[\"mts\"],\"model/vnd.opengex\":[\"ogex\"],\"model/vnd.parasolid.transmit.binary\":[\"x_b\"],\"model/vnd.parasolid.transmit.text\":[\"x_t\"],\"model/vnd.sap.vds\":[\"vds\"],\"model/vnd.usdz+zip\":[\"usdz\"],\"model/vnd.valve.source.compiled-map\":[\"bsp\"],\"model/vnd.vtu\":[\"vtu\"],\"text/prs.lines.tag\":[\"dsc\"],\"text/vnd.curl\":[\"curl\"],\"text/vnd.curl.dcurl\":[\"dcurl\"],\"text/vnd.curl.mcurl\":[\"mcurl\"],\"text/vnd.curl.scurl\":[\"scurl\"],\"text/vnd.dvb.subtitle\":[\"sub\"],\"text/vnd.fly\":[\"fly\"],\"text/vnd.fmi.flexstor\":[\"flx\"],\"text/vnd.graphviz\":[\"gv\"],\"text/vnd.in3d.3dml\":[\"3dml\"],\"text/vnd.in3d.spot\":[\"spot\"],\"text/vnd.sun.j2me.app-descriptor\":[\"jad\"],\"text/vnd.wap.wml\":[\"wml\"],\"text/vnd.wap.wmlscript\":[\"wmls\"],\"text/x-asm\":[\"s\",\"asm\"],\"text/x-c\":[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"],\"text/x-component\":[\"htc\"],\"text/x-fortran\":[\"f\",\"for\",\"f77\",\"f90\"],\"text/x-handlebars-template\":[\"hbs\"],\"text/x-java-source\":[\"java\"],\"text/x-lua\":[\"lua\"],\"text/x-markdown\":[\"mkd\"],\"text/x-nfo\":[\"nfo\"],\"text/x-opml\":[\"opml\"],\"text/x-org\":[\"*org\"],\"text/x-pascal\":[\"p\",\"pas\"],\"text/x-processing\":[\"pde\"],\"text/x-sass\":[\"sass\"],\"text/x-scss\":[\"scss\"],\"text/x-setext\":[\"etx\"],\"text/x-sfv\":[\"sfv\"],\"text/x-suse-ymp\":[\"ymp\"],\"text/x-uuencode\":[\"uu\"],\"text/x-vcalendar\":[\"vcs\"],\"text/x-vcard\":[\"vcf\"],\"video/vnd.dece.hd\":[\"uvh\",\"uvvh\"],\"video/vnd.dece.mobile\":[\"uvm\",\"uvvm\"],\"video/vnd.dece.pd\":[\"uvp\",\"uvvp\"],\"video/vnd.dece.sd\":[\"uvs\",\"uvvs\"],\"video/vnd.dece.video\":[\"uvv\",\"uvvv\"],\"video/vnd.dvb.file\":[\"dvb\"],\"video/vnd.fvt\":[\"fvt\"],\"video/vnd.mpegurl\":[\"mxu\",\"m4u\"],\"video/vnd.ms-playready.media.pyv\":[\"pyv\"],\"video/vnd.uvvu.mp4\":[\"uvu\",\"uvvu\"],\"video/vnd.vivo\":[\"viv\"],\"video/x-f4v\":[\"f4v\"],\"video/x-fli\":[\"fli\"],\"video/x-flv\":[\"flv\"],\"video/x-m4v\":[\"m4v\"],\"video/x-matroska\":[\"mkv\",\"mk3d\",\"mks\"],\"video/x-mng\":[\"mng\"],\"video/x-ms-asf\":[\"asf\",\"asx\"],\"video/x-ms-vob\":[\"vob\"],\"video/x-ms-wm\":[\"wm\"],\"video/x-ms-wmv\":[\"wmv\"],\"video/x-ms-wmx\":[\"wmx\"],\"video/x-ms-wvx\":[\"wvx\"],\"video/x-msvideo\":[\"avi\"],\"video/x-sgi-movie\":[\"movie\"],\"video/x-smv\":[\"smv\"],\"x-conference/x-cooltalk\":[\"ice\"]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/types/other.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/types/standard.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/mime/types/standard.js ***!
  \********************************************************************************/
/***/ ((module) => {

eval("module.exports = {\"application/andrew-inset\":[\"ez\"],\"application/applixware\":[\"aw\"],\"application/atom+xml\":[\"atom\"],\"application/atomcat+xml\":[\"atomcat\"],\"application/atomdeleted+xml\":[\"atomdeleted\"],\"application/atomsvc+xml\":[\"atomsvc\"],\"application/atsc-dwd+xml\":[\"dwd\"],\"application/atsc-held+xml\":[\"held\"],\"application/atsc-rsat+xml\":[\"rsat\"],\"application/bdoc\":[\"bdoc\"],\"application/calendar+xml\":[\"xcs\"],\"application/ccxml+xml\":[\"ccxml\"],\"application/cdfx+xml\":[\"cdfx\"],\"application/cdmi-capability\":[\"cdmia\"],\"application/cdmi-container\":[\"cdmic\"],\"application/cdmi-domain\":[\"cdmid\"],\"application/cdmi-object\":[\"cdmio\"],\"application/cdmi-queue\":[\"cdmiq\"],\"application/cu-seeme\":[\"cu\"],\"application/dash+xml\":[\"mpd\"],\"application/davmount+xml\":[\"davmount\"],\"application/docbook+xml\":[\"dbk\"],\"application/dssc+der\":[\"dssc\"],\"application/dssc+xml\":[\"xdssc\"],\"application/ecmascript\":[\"es\",\"ecma\"],\"application/emma+xml\":[\"emma\"],\"application/emotionml+xml\":[\"emotionml\"],\"application/epub+zip\":[\"epub\"],\"application/exi\":[\"exi\"],\"application/express\":[\"exp\"],\"application/fdt+xml\":[\"fdt\"],\"application/font-tdpfr\":[\"pfr\"],\"application/geo+json\":[\"geojson\"],\"application/gml+xml\":[\"gml\"],\"application/gpx+xml\":[\"gpx\"],\"application/gxf\":[\"gxf\"],\"application/gzip\":[\"gz\"],\"application/hjson\":[\"hjson\"],\"application/hyperstudio\":[\"stk\"],\"application/inkml+xml\":[\"ink\",\"inkml\"],\"application/ipfix\":[\"ipfix\"],\"application/its+xml\":[\"its\"],\"application/java-archive\":[\"jar\",\"war\",\"ear\"],\"application/java-serialized-object\":[\"ser\"],\"application/java-vm\":[\"class\"],\"application/javascript\":[\"js\",\"mjs\"],\"application/json\":[\"json\",\"map\"],\"application/json5\":[\"json5\"],\"application/jsonml+json\":[\"jsonml\"],\"application/ld+json\":[\"jsonld\"],\"application/lgr+xml\":[\"lgr\"],\"application/lost+xml\":[\"lostxml\"],\"application/mac-binhex40\":[\"hqx\"],\"application/mac-compactpro\":[\"cpt\"],\"application/mads+xml\":[\"mads\"],\"application/manifest+json\":[\"webmanifest\"],\"application/marc\":[\"mrc\"],\"application/marcxml+xml\":[\"mrcx\"],\"application/mathematica\":[\"ma\",\"nb\",\"mb\"],\"application/mathml+xml\":[\"mathml\"],\"application/mbox\":[\"mbox\"],\"application/mediaservercontrol+xml\":[\"mscml\"],\"application/metalink+xml\":[\"metalink\"],\"application/metalink4+xml\":[\"meta4\"],\"application/mets+xml\":[\"mets\"],\"application/mmt-aei+xml\":[\"maei\"],\"application/mmt-usd+xml\":[\"musd\"],\"application/mods+xml\":[\"mods\"],\"application/mp21\":[\"m21\",\"mp21\"],\"application/mp4\":[\"mp4s\",\"m4p\"],\"application/msword\":[\"doc\",\"dot\"],\"application/mxf\":[\"mxf\"],\"application/n-quads\":[\"nq\"],\"application/n-triples\":[\"nt\"],\"application/node\":[\"cjs\"],\"application/octet-stream\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"],\"application/oda\":[\"oda\"],\"application/oebps-package+xml\":[\"opf\"],\"application/ogg\":[\"ogx\"],\"application/omdoc+xml\":[\"omdoc\"],\"application/onenote\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"],\"application/oxps\":[\"oxps\"],\"application/p2p-overlay+xml\":[\"relo\"],\"application/patch-ops-error+xml\":[\"xer\"],\"application/pdf\":[\"pdf\"],\"application/pgp-encrypted\":[\"pgp\"],\"application/pgp-signature\":[\"asc\",\"sig\"],\"application/pics-rules\":[\"prf\"],\"application/pkcs10\":[\"p10\"],\"application/pkcs7-mime\":[\"p7m\",\"p7c\"],\"application/pkcs7-signature\":[\"p7s\"],\"application/pkcs8\":[\"p8\"],\"application/pkix-attr-cert\":[\"ac\"],\"application/pkix-cert\":[\"cer\"],\"application/pkix-crl\":[\"crl\"],\"application/pkix-pkipath\":[\"pkipath\"],\"application/pkixcmp\":[\"pki\"],\"application/pls+xml\":[\"pls\"],\"application/postscript\":[\"ai\",\"eps\",\"ps\"],\"application/provenance+xml\":[\"provx\"],\"application/pskc+xml\":[\"pskcxml\"],\"application/raml+yaml\":[\"raml\"],\"application/rdf+xml\":[\"rdf\",\"owl\"],\"application/reginfo+xml\":[\"rif\"],\"application/relax-ng-compact-syntax\":[\"rnc\"],\"application/resource-lists+xml\":[\"rl\"],\"application/resource-lists-diff+xml\":[\"rld\"],\"application/rls-services+xml\":[\"rs\"],\"application/route-apd+xml\":[\"rapd\"],\"application/route-s-tsid+xml\":[\"sls\"],\"application/route-usd+xml\":[\"rusd\"],\"application/rpki-ghostbusters\":[\"gbr\"],\"application/rpki-manifest\":[\"mft\"],\"application/rpki-roa\":[\"roa\"],\"application/rsd+xml\":[\"rsd\"],\"application/rss+xml\":[\"rss\"],\"application/rtf\":[\"rtf\"],\"application/sbml+xml\":[\"sbml\"],\"application/scvp-cv-request\":[\"scq\"],\"application/scvp-cv-response\":[\"scs\"],\"application/scvp-vp-request\":[\"spq\"],\"application/scvp-vp-response\":[\"spp\"],\"application/sdp\":[\"sdp\"],\"application/senml+xml\":[\"senmlx\"],\"application/sensml+xml\":[\"sensmlx\"],\"application/set-payment-initiation\":[\"setpay\"],\"application/set-registration-initiation\":[\"setreg\"],\"application/shf+xml\":[\"shf\"],\"application/sieve\":[\"siv\",\"sieve\"],\"application/smil+xml\":[\"smi\",\"smil\"],\"application/sparql-query\":[\"rq\"],\"application/sparql-results+xml\":[\"srx\"],\"application/srgs\":[\"gram\"],\"application/srgs+xml\":[\"grxml\"],\"application/sru+xml\":[\"sru\"],\"application/ssdl+xml\":[\"ssdl\"],\"application/ssml+xml\":[\"ssml\"],\"application/swid+xml\":[\"swidtag\"],\"application/tei+xml\":[\"tei\",\"teicorpus\"],\"application/thraud+xml\":[\"tfi\"],\"application/timestamped-data\":[\"tsd\"],\"application/toml\":[\"toml\"],\"application/trig\":[\"trig\"],\"application/ttml+xml\":[\"ttml\"],\"application/ubjson\":[\"ubj\"],\"application/urc-ressheet+xml\":[\"rsheet\"],\"application/urc-targetdesc+xml\":[\"td\"],\"application/voicexml+xml\":[\"vxml\"],\"application/wasm\":[\"wasm\"],\"application/widget\":[\"wgt\"],\"application/winhlp\":[\"hlp\"],\"application/wsdl+xml\":[\"wsdl\"],\"application/wspolicy+xml\":[\"wspolicy\"],\"application/xaml+xml\":[\"xaml\"],\"application/xcap-att+xml\":[\"xav\"],\"application/xcap-caps+xml\":[\"xca\"],\"application/xcap-diff+xml\":[\"xdf\"],\"application/xcap-el+xml\":[\"xel\"],\"application/xcap-ns+xml\":[\"xns\"],\"application/xenc+xml\":[\"xenc\"],\"application/xhtml+xml\":[\"xhtml\",\"xht\"],\"application/xliff+xml\":[\"xlf\"],\"application/xml\":[\"xml\",\"xsl\",\"xsd\",\"rng\"],\"application/xml-dtd\":[\"dtd\"],\"application/xop+xml\":[\"xop\"],\"application/xproc+xml\":[\"xpl\"],\"application/xslt+xml\":[\"*xsl\",\"xslt\"],\"application/xspf+xml\":[\"xspf\"],\"application/xv+xml\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"],\"application/yang\":[\"yang\"],\"application/yin+xml\":[\"yin\"],\"application/zip\":[\"zip\"],\"audio/3gpp\":[\"*3gpp\"],\"audio/adpcm\":[\"adp\"],\"audio/amr\":[\"amr\"],\"audio/basic\":[\"au\",\"snd\"],\"audio/midi\":[\"mid\",\"midi\",\"kar\",\"rmi\"],\"audio/mobile-xmf\":[\"mxmf\"],\"audio/mp3\":[\"*mp3\"],\"audio/mp4\":[\"m4a\",\"mp4a\"],\"audio/mpeg\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"],\"audio/ogg\":[\"oga\",\"ogg\",\"spx\",\"opus\"],\"audio/s3m\":[\"s3m\"],\"audio/silk\":[\"sil\"],\"audio/wav\":[\"wav\"],\"audio/wave\":[\"*wav\"],\"audio/webm\":[\"weba\"],\"audio/xm\":[\"xm\"],\"font/collection\":[\"ttc\"],\"font/otf\":[\"otf\"],\"font/ttf\":[\"ttf\"],\"font/woff\":[\"woff\"],\"font/woff2\":[\"woff2\"],\"image/aces\":[\"exr\"],\"image/apng\":[\"apng\"],\"image/avif\":[\"avif\"],\"image/bmp\":[\"bmp\"],\"image/cgm\":[\"cgm\"],\"image/dicom-rle\":[\"drle\"],\"image/emf\":[\"emf\"],\"image/fits\":[\"fits\"],\"image/g3fax\":[\"g3\"],\"image/gif\":[\"gif\"],\"image/heic\":[\"heic\"],\"image/heic-sequence\":[\"heics\"],\"image/heif\":[\"heif\"],\"image/heif-sequence\":[\"heifs\"],\"image/hej2k\":[\"hej2\"],\"image/hsj2\":[\"hsj2\"],\"image/ief\":[\"ief\"],\"image/jls\":[\"jls\"],\"image/jp2\":[\"jp2\",\"jpg2\"],\"image/jpeg\":[\"jpeg\",\"jpg\",\"jpe\"],\"image/jph\":[\"jph\"],\"image/jphc\":[\"jhc\"],\"image/jpm\":[\"jpm\"],\"image/jpx\":[\"jpx\",\"jpf\"],\"image/jxr\":[\"jxr\"],\"image/jxra\":[\"jxra\"],\"image/jxrs\":[\"jxrs\"],\"image/jxs\":[\"jxs\"],\"image/jxsc\":[\"jxsc\"],\"image/jxsi\":[\"jxsi\"],\"image/jxss\":[\"jxss\"],\"image/ktx\":[\"ktx\"],\"image/ktx2\":[\"ktx2\"],\"image/png\":[\"png\"],\"image/sgi\":[\"sgi\"],\"image/svg+xml\":[\"svg\",\"svgz\"],\"image/t38\":[\"t38\"],\"image/tiff\":[\"tif\",\"tiff\"],\"image/tiff-fx\":[\"tfx\"],\"image/webp\":[\"webp\"],\"image/wmf\":[\"wmf\"],\"message/disposition-notification\":[\"disposition-notification\"],\"message/global\":[\"u8msg\"],\"message/global-delivery-status\":[\"u8dsn\"],\"message/global-disposition-notification\":[\"u8mdn\"],\"message/global-headers\":[\"u8hdr\"],\"message/rfc822\":[\"eml\",\"mime\"],\"model/3mf\":[\"3mf\"],\"model/gltf+json\":[\"gltf\"],\"model/gltf-binary\":[\"glb\"],\"model/iges\":[\"igs\",\"iges\"],\"model/mesh\":[\"msh\",\"mesh\",\"silo\"],\"model/mtl\":[\"mtl\"],\"model/obj\":[\"obj\"],\"model/step+xml\":[\"stpx\"],\"model/step+zip\":[\"stpz\"],\"model/step-xml+zip\":[\"stpxz\"],\"model/stl\":[\"stl\"],\"model/vrml\":[\"wrl\",\"vrml\"],\"model/x3d+binary\":[\"*x3db\",\"x3dbz\"],\"model/x3d+fastinfoset\":[\"x3db\"],\"model/x3d+vrml\":[\"*x3dv\",\"x3dvz\"],\"model/x3d+xml\":[\"x3d\",\"x3dz\"],\"model/x3d-vrml\":[\"x3dv\"],\"text/cache-manifest\":[\"appcache\",\"manifest\"],\"text/calendar\":[\"ics\",\"ifb\"],\"text/coffeescript\":[\"coffee\",\"litcoffee\"],\"text/css\":[\"css\"],\"text/csv\":[\"csv\"],\"text/html\":[\"html\",\"htm\",\"shtml\"],\"text/jade\":[\"jade\"],\"text/jsx\":[\"jsx\"],\"text/less\":[\"less\"],\"text/markdown\":[\"markdown\",\"md\"],\"text/mathml\":[\"mml\"],\"text/mdx\":[\"mdx\"],\"text/n3\":[\"n3\"],\"text/plain\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"],\"text/richtext\":[\"rtx\"],\"text/rtf\":[\"*rtf\"],\"text/sgml\":[\"sgml\",\"sgm\"],\"text/shex\":[\"shex\"],\"text/slim\":[\"slim\",\"slm\"],\"text/spdx\":[\"spdx\"],\"text/stylus\":[\"stylus\",\"styl\"],\"text/tab-separated-values\":[\"tsv\"],\"text/troff\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"],\"text/turtle\":[\"ttl\"],\"text/uri-list\":[\"uri\",\"uris\",\"urls\"],\"text/vcard\":[\"vcard\"],\"text/vtt\":[\"vtt\"],\"text/xml\":[\"*xml\"],\"text/yaml\":[\"yaml\",\"yml\"],\"video/3gpp\":[\"3gp\",\"3gpp\"],\"video/3gpp2\":[\"3g2\"],\"video/h261\":[\"h261\"],\"video/h263\":[\"h263\"],\"video/h264\":[\"h264\"],\"video/iso.segment\":[\"m4s\"],\"video/jpeg\":[\"jpgv\"],\"video/jpm\":[\"*jpm\",\"jpgm\"],\"video/mj2\":[\"mj2\",\"mjp2\"],\"video/mp2t\":[\"ts\"],\"video/mp4\":[\"mp4\",\"mp4v\",\"mpg4\"],\"video/mpeg\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"],\"video/ogg\":[\"ogv\"],\"video/quicktime\":[\"qt\",\"mov\"],\"video/webm\":[\"webm\"]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9taW1lL3R5cGVzL3N0YW5kYXJkLmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9taW1lL3R5cGVzL3N0YW5kYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1wiYXBwbGljYXRpb24vYW5kcmV3LWluc2V0XCI6W1wiZXpcIl0sXCJhcHBsaWNhdGlvbi9hcHBsaXh3YXJlXCI6W1wiYXdcIl0sXCJhcHBsaWNhdGlvbi9hdG9tK3htbFwiOltcImF0b21cIl0sXCJhcHBsaWNhdGlvbi9hdG9tY2F0K3htbFwiOltcImF0b21jYXRcIl0sXCJhcHBsaWNhdGlvbi9hdG9tZGVsZXRlZCt4bWxcIjpbXCJhdG9tZGVsZXRlZFwiXSxcImFwcGxpY2F0aW9uL2F0b21zdmMreG1sXCI6W1wiYXRvbXN2Y1wiXSxcImFwcGxpY2F0aW9uL2F0c2MtZHdkK3htbFwiOltcImR3ZFwiXSxcImFwcGxpY2F0aW9uL2F0c2MtaGVsZCt4bWxcIjpbXCJoZWxkXCJdLFwiYXBwbGljYXRpb24vYXRzYy1yc2F0K3htbFwiOltcInJzYXRcIl0sXCJhcHBsaWNhdGlvbi9iZG9jXCI6W1wiYmRvY1wiXSxcImFwcGxpY2F0aW9uL2NhbGVuZGFyK3htbFwiOltcInhjc1wiXSxcImFwcGxpY2F0aW9uL2NjeG1sK3htbFwiOltcImNjeG1sXCJdLFwiYXBwbGljYXRpb24vY2RmeCt4bWxcIjpbXCJjZGZ4XCJdLFwiYXBwbGljYXRpb24vY2RtaS1jYXBhYmlsaXR5XCI6W1wiY2RtaWFcIl0sXCJhcHBsaWNhdGlvbi9jZG1pLWNvbnRhaW5lclwiOltcImNkbWljXCJdLFwiYXBwbGljYXRpb24vY2RtaS1kb21haW5cIjpbXCJjZG1pZFwiXSxcImFwcGxpY2F0aW9uL2NkbWktb2JqZWN0XCI6W1wiY2RtaW9cIl0sXCJhcHBsaWNhdGlvbi9jZG1pLXF1ZXVlXCI6W1wiY2RtaXFcIl0sXCJhcHBsaWNhdGlvbi9jdS1zZWVtZVwiOltcImN1XCJdLFwiYXBwbGljYXRpb24vZGFzaCt4bWxcIjpbXCJtcGRcIl0sXCJhcHBsaWNhdGlvbi9kYXZtb3VudCt4bWxcIjpbXCJkYXZtb3VudFwiXSxcImFwcGxpY2F0aW9uL2RvY2Jvb2sreG1sXCI6W1wiZGJrXCJdLFwiYXBwbGljYXRpb24vZHNzYytkZXJcIjpbXCJkc3NjXCJdLFwiYXBwbGljYXRpb24vZHNzYyt4bWxcIjpbXCJ4ZHNzY1wiXSxcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHRcIjpbXCJlc1wiLFwiZWNtYVwiXSxcImFwcGxpY2F0aW9uL2VtbWEreG1sXCI6W1wiZW1tYVwiXSxcImFwcGxpY2F0aW9uL2Vtb3Rpb25tbCt4bWxcIjpbXCJlbW90aW9ubWxcIl0sXCJhcHBsaWNhdGlvbi9lcHViK3ppcFwiOltcImVwdWJcIl0sXCJhcHBsaWNhdGlvbi9leGlcIjpbXCJleGlcIl0sXCJhcHBsaWNhdGlvbi9leHByZXNzXCI6W1wiZXhwXCJdLFwiYXBwbGljYXRpb24vZmR0K3htbFwiOltcImZkdFwiXSxcImFwcGxpY2F0aW9uL2ZvbnQtdGRwZnJcIjpbXCJwZnJcIl0sXCJhcHBsaWNhdGlvbi9nZW8ranNvblwiOltcImdlb2pzb25cIl0sXCJhcHBsaWNhdGlvbi9nbWwreG1sXCI6W1wiZ21sXCJdLFwiYXBwbGljYXRpb24vZ3B4K3htbFwiOltcImdweFwiXSxcImFwcGxpY2F0aW9uL2d4ZlwiOltcImd4ZlwiXSxcImFwcGxpY2F0aW9uL2d6aXBcIjpbXCJnelwiXSxcImFwcGxpY2F0aW9uL2hqc29uXCI6W1wiaGpzb25cIl0sXCJhcHBsaWNhdGlvbi9oeXBlcnN0dWRpb1wiOltcInN0a1wiXSxcImFwcGxpY2F0aW9uL2lua21sK3htbFwiOltcImlua1wiLFwiaW5rbWxcIl0sXCJhcHBsaWNhdGlvbi9pcGZpeFwiOltcImlwZml4XCJdLFwiYXBwbGljYXRpb24vaXRzK3htbFwiOltcIml0c1wiXSxcImFwcGxpY2F0aW9uL2phdmEtYXJjaGl2ZVwiOltcImphclwiLFwid2FyXCIsXCJlYXJcIl0sXCJhcHBsaWNhdGlvbi9qYXZhLXNlcmlhbGl6ZWQtb2JqZWN0XCI6W1wic2VyXCJdLFwiYXBwbGljYXRpb24vamF2YS12bVwiOltcImNsYXNzXCJdLFwiYXBwbGljYXRpb24vamF2YXNjcmlwdFwiOltcImpzXCIsXCJtanNcIl0sXCJhcHBsaWNhdGlvbi9qc29uXCI6W1wianNvblwiLFwibWFwXCJdLFwiYXBwbGljYXRpb24vanNvbjVcIjpbXCJqc29uNVwiXSxcImFwcGxpY2F0aW9uL2pzb25tbCtqc29uXCI6W1wianNvbm1sXCJdLFwiYXBwbGljYXRpb24vbGQranNvblwiOltcImpzb25sZFwiXSxcImFwcGxpY2F0aW9uL2xncit4bWxcIjpbXCJsZ3JcIl0sXCJhcHBsaWNhdGlvbi9sb3N0K3htbFwiOltcImxvc3R4bWxcIl0sXCJhcHBsaWNhdGlvbi9tYWMtYmluaGV4NDBcIjpbXCJocXhcIl0sXCJhcHBsaWNhdGlvbi9tYWMtY29tcGFjdHByb1wiOltcImNwdFwiXSxcImFwcGxpY2F0aW9uL21hZHMreG1sXCI6W1wibWFkc1wiXSxcImFwcGxpY2F0aW9uL21hbmlmZXN0K2pzb25cIjpbXCJ3ZWJtYW5pZmVzdFwiXSxcImFwcGxpY2F0aW9uL21hcmNcIjpbXCJtcmNcIl0sXCJhcHBsaWNhdGlvbi9tYXJjeG1sK3htbFwiOltcIm1yY3hcIl0sXCJhcHBsaWNhdGlvbi9tYXRoZW1hdGljYVwiOltcIm1hXCIsXCJuYlwiLFwibWJcIl0sXCJhcHBsaWNhdGlvbi9tYXRobWwreG1sXCI6W1wibWF0aG1sXCJdLFwiYXBwbGljYXRpb24vbWJveFwiOltcIm1ib3hcIl0sXCJhcHBsaWNhdGlvbi9tZWRpYXNlcnZlcmNvbnRyb2wreG1sXCI6W1wibXNjbWxcIl0sXCJhcHBsaWNhdGlvbi9tZXRhbGluayt4bWxcIjpbXCJtZXRhbGlua1wiXSxcImFwcGxpY2F0aW9uL21ldGFsaW5rNCt4bWxcIjpbXCJtZXRhNFwiXSxcImFwcGxpY2F0aW9uL21ldHMreG1sXCI6W1wibWV0c1wiXSxcImFwcGxpY2F0aW9uL21tdC1hZWkreG1sXCI6W1wibWFlaVwiXSxcImFwcGxpY2F0aW9uL21tdC11c2QreG1sXCI6W1wibXVzZFwiXSxcImFwcGxpY2F0aW9uL21vZHMreG1sXCI6W1wibW9kc1wiXSxcImFwcGxpY2F0aW9uL21wMjFcIjpbXCJtMjFcIixcIm1wMjFcIl0sXCJhcHBsaWNhdGlvbi9tcDRcIjpbXCJtcDRzXCIsXCJtNHBcIl0sXCJhcHBsaWNhdGlvbi9tc3dvcmRcIjpbXCJkb2NcIixcImRvdFwiXSxcImFwcGxpY2F0aW9uL214ZlwiOltcIm14ZlwiXSxcImFwcGxpY2F0aW9uL24tcXVhZHNcIjpbXCJucVwiXSxcImFwcGxpY2F0aW9uL24tdHJpcGxlc1wiOltcIm50XCJdLFwiYXBwbGljYXRpb24vbm9kZVwiOltcImNqc1wiXSxcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiOltcImJpblwiLFwiZG1zXCIsXCJscmZcIixcIm1hclwiLFwic29cIixcImRpc3RcIixcImRpc3R6XCIsXCJwa2dcIixcImJwa1wiLFwiZHVtcFwiLFwiZWxjXCIsXCJkZXBsb3lcIixcImV4ZVwiLFwiZGxsXCIsXCJkZWJcIixcImRtZ1wiLFwiaXNvXCIsXCJpbWdcIixcIm1zaVwiLFwibXNwXCIsXCJtc21cIixcImJ1ZmZlclwiXSxcImFwcGxpY2F0aW9uL29kYVwiOltcIm9kYVwiXSxcImFwcGxpY2F0aW9uL29lYnBzLXBhY2thZ2UreG1sXCI6W1wib3BmXCJdLFwiYXBwbGljYXRpb24vb2dnXCI6W1wib2d4XCJdLFwiYXBwbGljYXRpb24vb21kb2MreG1sXCI6W1wib21kb2NcIl0sXCJhcHBsaWNhdGlvbi9vbmVub3RlXCI6W1wib25ldG9jXCIsXCJvbmV0b2MyXCIsXCJvbmV0bXBcIixcIm9uZXBrZ1wiXSxcImFwcGxpY2F0aW9uL294cHNcIjpbXCJveHBzXCJdLFwiYXBwbGljYXRpb24vcDJwLW92ZXJsYXkreG1sXCI6W1wicmVsb1wiXSxcImFwcGxpY2F0aW9uL3BhdGNoLW9wcy1lcnJvcit4bWxcIjpbXCJ4ZXJcIl0sXCJhcHBsaWNhdGlvbi9wZGZcIjpbXCJwZGZcIl0sXCJhcHBsaWNhdGlvbi9wZ3AtZW5jcnlwdGVkXCI6W1wicGdwXCJdLFwiYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZVwiOltcImFzY1wiLFwic2lnXCJdLFwiYXBwbGljYXRpb24vcGljcy1ydWxlc1wiOltcInByZlwiXSxcImFwcGxpY2F0aW9uL3BrY3MxMFwiOltcInAxMFwiXSxcImFwcGxpY2F0aW9uL3BrY3M3LW1pbWVcIjpbXCJwN21cIixcInA3Y1wiXSxcImFwcGxpY2F0aW9uL3BrY3M3LXNpZ25hdHVyZVwiOltcInA3c1wiXSxcImFwcGxpY2F0aW9uL3BrY3M4XCI6W1wicDhcIl0sXCJhcHBsaWNhdGlvbi9wa2l4LWF0dHItY2VydFwiOltcImFjXCJdLFwiYXBwbGljYXRpb24vcGtpeC1jZXJ0XCI6W1wiY2VyXCJdLFwiYXBwbGljYXRpb24vcGtpeC1jcmxcIjpbXCJjcmxcIl0sXCJhcHBsaWNhdGlvbi9wa2l4LXBraXBhdGhcIjpbXCJwa2lwYXRoXCJdLFwiYXBwbGljYXRpb24vcGtpeGNtcFwiOltcInBraVwiXSxcImFwcGxpY2F0aW9uL3Bscyt4bWxcIjpbXCJwbHNcIl0sXCJhcHBsaWNhdGlvbi9wb3N0c2NyaXB0XCI6W1wiYWlcIixcImVwc1wiLFwicHNcIl0sXCJhcHBsaWNhdGlvbi9wcm92ZW5hbmNlK3htbFwiOltcInByb3Z4XCJdLFwiYXBwbGljYXRpb24vcHNrYyt4bWxcIjpbXCJwc2tjeG1sXCJdLFwiYXBwbGljYXRpb24vcmFtbCt5YW1sXCI6W1wicmFtbFwiXSxcImFwcGxpY2F0aW9uL3JkZit4bWxcIjpbXCJyZGZcIixcIm93bFwiXSxcImFwcGxpY2F0aW9uL3JlZ2luZm8reG1sXCI6W1wicmlmXCJdLFwiYXBwbGljYXRpb24vcmVsYXgtbmctY29tcGFjdC1zeW50YXhcIjpbXCJybmNcIl0sXCJhcHBsaWNhdGlvbi9yZXNvdXJjZS1saXN0cyt4bWxcIjpbXCJybFwiXSxcImFwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzLWRpZmYreG1sXCI6W1wicmxkXCJdLFwiYXBwbGljYXRpb24vcmxzLXNlcnZpY2VzK3htbFwiOltcInJzXCJdLFwiYXBwbGljYXRpb24vcm91dGUtYXBkK3htbFwiOltcInJhcGRcIl0sXCJhcHBsaWNhdGlvbi9yb3V0ZS1zLXRzaWQreG1sXCI6W1wic2xzXCJdLFwiYXBwbGljYXRpb24vcm91dGUtdXNkK3htbFwiOltcInJ1c2RcIl0sXCJhcHBsaWNhdGlvbi9ycGtpLWdob3N0YnVzdGVyc1wiOltcImdiclwiXSxcImFwcGxpY2F0aW9uL3Jwa2ktbWFuaWZlc3RcIjpbXCJtZnRcIl0sXCJhcHBsaWNhdGlvbi9ycGtpLXJvYVwiOltcInJvYVwiXSxcImFwcGxpY2F0aW9uL3JzZCt4bWxcIjpbXCJyc2RcIl0sXCJhcHBsaWNhdGlvbi9yc3MreG1sXCI6W1wicnNzXCJdLFwiYXBwbGljYXRpb24vcnRmXCI6W1wicnRmXCJdLFwiYXBwbGljYXRpb24vc2JtbCt4bWxcIjpbXCJzYm1sXCJdLFwiYXBwbGljYXRpb24vc2N2cC1jdi1yZXF1ZXN0XCI6W1wic2NxXCJdLFwiYXBwbGljYXRpb24vc2N2cC1jdi1yZXNwb25zZVwiOltcInNjc1wiXSxcImFwcGxpY2F0aW9uL3NjdnAtdnAtcmVxdWVzdFwiOltcInNwcVwiXSxcImFwcGxpY2F0aW9uL3NjdnAtdnAtcmVzcG9uc2VcIjpbXCJzcHBcIl0sXCJhcHBsaWNhdGlvbi9zZHBcIjpbXCJzZHBcIl0sXCJhcHBsaWNhdGlvbi9zZW5tbCt4bWxcIjpbXCJzZW5tbHhcIl0sXCJhcHBsaWNhdGlvbi9zZW5zbWwreG1sXCI6W1wic2Vuc21seFwiXSxcImFwcGxpY2F0aW9uL3NldC1wYXltZW50LWluaXRpYXRpb25cIjpbXCJzZXRwYXlcIl0sXCJhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb25cIjpbXCJzZXRyZWdcIl0sXCJhcHBsaWNhdGlvbi9zaGYreG1sXCI6W1wic2hmXCJdLFwiYXBwbGljYXRpb24vc2lldmVcIjpbXCJzaXZcIixcInNpZXZlXCJdLFwiYXBwbGljYXRpb24vc21pbCt4bWxcIjpbXCJzbWlcIixcInNtaWxcIl0sXCJhcHBsaWNhdGlvbi9zcGFycWwtcXVlcnlcIjpbXCJycVwiXSxcImFwcGxpY2F0aW9uL3NwYXJxbC1yZXN1bHRzK3htbFwiOltcInNyeFwiXSxcImFwcGxpY2F0aW9uL3NyZ3NcIjpbXCJncmFtXCJdLFwiYXBwbGljYXRpb24vc3Jncyt4bWxcIjpbXCJncnhtbFwiXSxcImFwcGxpY2F0aW9uL3NydSt4bWxcIjpbXCJzcnVcIl0sXCJhcHBsaWNhdGlvbi9zc2RsK3htbFwiOltcInNzZGxcIl0sXCJhcHBsaWNhdGlvbi9zc21sK3htbFwiOltcInNzbWxcIl0sXCJhcHBsaWNhdGlvbi9zd2lkK3htbFwiOltcInN3aWR0YWdcIl0sXCJhcHBsaWNhdGlvbi90ZWkreG1sXCI6W1widGVpXCIsXCJ0ZWljb3JwdXNcIl0sXCJhcHBsaWNhdGlvbi90aHJhdWQreG1sXCI6W1widGZpXCJdLFwiYXBwbGljYXRpb24vdGltZXN0YW1wZWQtZGF0YVwiOltcInRzZFwiXSxcImFwcGxpY2F0aW9uL3RvbWxcIjpbXCJ0b21sXCJdLFwiYXBwbGljYXRpb24vdHJpZ1wiOltcInRyaWdcIl0sXCJhcHBsaWNhdGlvbi90dG1sK3htbFwiOltcInR0bWxcIl0sXCJhcHBsaWNhdGlvbi91Ympzb25cIjpbXCJ1YmpcIl0sXCJhcHBsaWNhdGlvbi91cmMtcmVzc2hlZXQreG1sXCI6W1wicnNoZWV0XCJdLFwiYXBwbGljYXRpb24vdXJjLXRhcmdldGRlc2MreG1sXCI6W1widGRcIl0sXCJhcHBsaWNhdGlvbi92b2ljZXhtbCt4bWxcIjpbXCJ2eG1sXCJdLFwiYXBwbGljYXRpb24vd2FzbVwiOltcIndhc21cIl0sXCJhcHBsaWNhdGlvbi93aWRnZXRcIjpbXCJ3Z3RcIl0sXCJhcHBsaWNhdGlvbi93aW5obHBcIjpbXCJobHBcIl0sXCJhcHBsaWNhdGlvbi93c2RsK3htbFwiOltcIndzZGxcIl0sXCJhcHBsaWNhdGlvbi93c3BvbGljeSt4bWxcIjpbXCJ3c3BvbGljeVwiXSxcImFwcGxpY2F0aW9uL3hhbWwreG1sXCI6W1wieGFtbFwiXSxcImFwcGxpY2F0aW9uL3hjYXAtYXR0K3htbFwiOltcInhhdlwiXSxcImFwcGxpY2F0aW9uL3hjYXAtY2Fwcyt4bWxcIjpbXCJ4Y2FcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLWRpZmYreG1sXCI6W1wieGRmXCJdLFwiYXBwbGljYXRpb24veGNhcC1lbCt4bWxcIjpbXCJ4ZWxcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLW5zK3htbFwiOltcInhuc1wiXSxcImFwcGxpY2F0aW9uL3hlbmMreG1sXCI6W1wieGVuY1wiXSxcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiOltcInhodG1sXCIsXCJ4aHRcIl0sXCJhcHBsaWNhdGlvbi94bGlmZit4bWxcIjpbXCJ4bGZcIl0sXCJhcHBsaWNhdGlvbi94bWxcIjpbXCJ4bWxcIixcInhzbFwiLFwieHNkXCIsXCJybmdcIl0sXCJhcHBsaWNhdGlvbi94bWwtZHRkXCI6W1wiZHRkXCJdLFwiYXBwbGljYXRpb24veG9wK3htbFwiOltcInhvcFwiXSxcImFwcGxpY2F0aW9uL3hwcm9jK3htbFwiOltcInhwbFwiXSxcImFwcGxpY2F0aW9uL3hzbHQreG1sXCI6W1wiKnhzbFwiLFwieHNsdFwiXSxcImFwcGxpY2F0aW9uL3hzcGYreG1sXCI6W1wieHNwZlwiXSxcImFwcGxpY2F0aW9uL3h2K3htbFwiOltcIm14bWxcIixcInhodm1sXCIsXCJ4dm1sXCIsXCJ4dm1cIl0sXCJhcHBsaWNhdGlvbi95YW5nXCI6W1wieWFuZ1wiXSxcImFwcGxpY2F0aW9uL3lpbit4bWxcIjpbXCJ5aW5cIl0sXCJhcHBsaWNhdGlvbi96aXBcIjpbXCJ6aXBcIl0sXCJhdWRpby8zZ3BwXCI6W1wiKjNncHBcIl0sXCJhdWRpby9hZHBjbVwiOltcImFkcFwiXSxcImF1ZGlvL2FtclwiOltcImFtclwiXSxcImF1ZGlvL2Jhc2ljXCI6W1wiYXVcIixcInNuZFwiXSxcImF1ZGlvL21pZGlcIjpbXCJtaWRcIixcIm1pZGlcIixcImthclwiLFwicm1pXCJdLFwiYXVkaW8vbW9iaWxlLXhtZlwiOltcIm14bWZcIl0sXCJhdWRpby9tcDNcIjpbXCIqbXAzXCJdLFwiYXVkaW8vbXA0XCI6W1wibTRhXCIsXCJtcDRhXCJdLFwiYXVkaW8vbXBlZ1wiOltcIm1wZ2FcIixcIm1wMlwiLFwibXAyYVwiLFwibXAzXCIsXCJtMmFcIixcIm0zYVwiXSxcImF1ZGlvL29nZ1wiOltcIm9nYVwiLFwib2dnXCIsXCJzcHhcIixcIm9wdXNcIl0sXCJhdWRpby9zM21cIjpbXCJzM21cIl0sXCJhdWRpby9zaWxrXCI6W1wic2lsXCJdLFwiYXVkaW8vd2F2XCI6W1wid2F2XCJdLFwiYXVkaW8vd2F2ZVwiOltcIip3YXZcIl0sXCJhdWRpby93ZWJtXCI6W1wid2ViYVwiXSxcImF1ZGlvL3htXCI6W1wieG1cIl0sXCJmb250L2NvbGxlY3Rpb25cIjpbXCJ0dGNcIl0sXCJmb250L290ZlwiOltcIm90ZlwiXSxcImZvbnQvdHRmXCI6W1widHRmXCJdLFwiZm9udC93b2ZmXCI6W1wid29mZlwiXSxcImZvbnQvd29mZjJcIjpbXCJ3b2ZmMlwiXSxcImltYWdlL2FjZXNcIjpbXCJleHJcIl0sXCJpbWFnZS9hcG5nXCI6W1wiYXBuZ1wiXSxcImltYWdlL2F2aWZcIjpbXCJhdmlmXCJdLFwiaW1hZ2UvYm1wXCI6W1wiYm1wXCJdLFwiaW1hZ2UvY2dtXCI6W1wiY2dtXCJdLFwiaW1hZ2UvZGljb20tcmxlXCI6W1wiZHJsZVwiXSxcImltYWdlL2VtZlwiOltcImVtZlwiXSxcImltYWdlL2ZpdHNcIjpbXCJmaXRzXCJdLFwiaW1hZ2UvZzNmYXhcIjpbXCJnM1wiXSxcImltYWdlL2dpZlwiOltcImdpZlwiXSxcImltYWdlL2hlaWNcIjpbXCJoZWljXCJdLFwiaW1hZ2UvaGVpYy1zZXF1ZW5jZVwiOltcImhlaWNzXCJdLFwiaW1hZ2UvaGVpZlwiOltcImhlaWZcIl0sXCJpbWFnZS9oZWlmLXNlcXVlbmNlXCI6W1wiaGVpZnNcIl0sXCJpbWFnZS9oZWoya1wiOltcImhlajJcIl0sXCJpbWFnZS9oc2oyXCI6W1wiaHNqMlwiXSxcImltYWdlL2llZlwiOltcImllZlwiXSxcImltYWdlL2psc1wiOltcImpsc1wiXSxcImltYWdlL2pwMlwiOltcImpwMlwiLFwianBnMlwiXSxcImltYWdlL2pwZWdcIjpbXCJqcGVnXCIsXCJqcGdcIixcImpwZVwiXSxcImltYWdlL2pwaFwiOltcImpwaFwiXSxcImltYWdlL2pwaGNcIjpbXCJqaGNcIl0sXCJpbWFnZS9qcG1cIjpbXCJqcG1cIl0sXCJpbWFnZS9qcHhcIjpbXCJqcHhcIixcImpwZlwiXSxcImltYWdlL2p4clwiOltcImp4clwiXSxcImltYWdlL2p4cmFcIjpbXCJqeHJhXCJdLFwiaW1hZ2Uvanhyc1wiOltcImp4cnNcIl0sXCJpbWFnZS9qeHNcIjpbXCJqeHNcIl0sXCJpbWFnZS9qeHNjXCI6W1wianhzY1wiXSxcImltYWdlL2p4c2lcIjpbXCJqeHNpXCJdLFwiaW1hZ2Uvanhzc1wiOltcImp4c3NcIl0sXCJpbWFnZS9rdHhcIjpbXCJrdHhcIl0sXCJpbWFnZS9rdHgyXCI6W1wia3R4MlwiXSxcImltYWdlL3BuZ1wiOltcInBuZ1wiXSxcImltYWdlL3NnaVwiOltcInNnaVwiXSxcImltYWdlL3N2Zyt4bWxcIjpbXCJzdmdcIixcInN2Z3pcIl0sXCJpbWFnZS90MzhcIjpbXCJ0MzhcIl0sXCJpbWFnZS90aWZmXCI6W1widGlmXCIsXCJ0aWZmXCJdLFwiaW1hZ2UvdGlmZi1meFwiOltcInRmeFwiXSxcImltYWdlL3dlYnBcIjpbXCJ3ZWJwXCJdLFwiaW1hZ2Uvd21mXCI6W1wid21mXCJdLFwibWVzc2FnZS9kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjpbXCJkaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIl0sXCJtZXNzYWdlL2dsb2JhbFwiOltcInU4bXNnXCJdLFwibWVzc2FnZS9nbG9iYWwtZGVsaXZlcnktc3RhdHVzXCI6W1widThkc25cIl0sXCJtZXNzYWdlL2dsb2JhbC1kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjpbXCJ1OG1kblwiXSxcIm1lc3NhZ2UvZ2xvYmFsLWhlYWRlcnNcIjpbXCJ1OGhkclwiXSxcIm1lc3NhZ2UvcmZjODIyXCI6W1wiZW1sXCIsXCJtaW1lXCJdLFwibW9kZWwvM21mXCI6W1wiM21mXCJdLFwibW9kZWwvZ2x0Zitqc29uXCI6W1wiZ2x0ZlwiXSxcIm1vZGVsL2dsdGYtYmluYXJ5XCI6W1wiZ2xiXCJdLFwibW9kZWwvaWdlc1wiOltcImlnc1wiLFwiaWdlc1wiXSxcIm1vZGVsL21lc2hcIjpbXCJtc2hcIixcIm1lc2hcIixcInNpbG9cIl0sXCJtb2RlbC9tdGxcIjpbXCJtdGxcIl0sXCJtb2RlbC9vYmpcIjpbXCJvYmpcIl0sXCJtb2RlbC9zdGVwK3htbFwiOltcInN0cHhcIl0sXCJtb2RlbC9zdGVwK3ppcFwiOltcInN0cHpcIl0sXCJtb2RlbC9zdGVwLXhtbCt6aXBcIjpbXCJzdHB4elwiXSxcIm1vZGVsL3N0bFwiOltcInN0bFwiXSxcIm1vZGVsL3ZybWxcIjpbXCJ3cmxcIixcInZybWxcIl0sXCJtb2RlbC94M2QrYmluYXJ5XCI6W1wiKngzZGJcIixcIngzZGJ6XCJdLFwibW9kZWwveDNkK2Zhc3RpbmZvc2V0XCI6W1wieDNkYlwiXSxcIm1vZGVsL3gzZCt2cm1sXCI6W1wiKngzZHZcIixcIngzZHZ6XCJdLFwibW9kZWwveDNkK3htbFwiOltcIngzZFwiLFwieDNkelwiXSxcIm1vZGVsL3gzZC12cm1sXCI6W1wieDNkdlwiXSxcInRleHQvY2FjaGUtbWFuaWZlc3RcIjpbXCJhcHBjYWNoZVwiLFwibWFuaWZlc3RcIl0sXCJ0ZXh0L2NhbGVuZGFyXCI6W1wiaWNzXCIsXCJpZmJcIl0sXCJ0ZXh0L2NvZmZlZXNjcmlwdFwiOltcImNvZmZlZVwiLFwibGl0Y29mZmVlXCJdLFwidGV4dC9jc3NcIjpbXCJjc3NcIl0sXCJ0ZXh0L2NzdlwiOltcImNzdlwiXSxcInRleHQvaHRtbFwiOltcImh0bWxcIixcImh0bVwiLFwic2h0bWxcIl0sXCJ0ZXh0L2phZGVcIjpbXCJqYWRlXCJdLFwidGV4dC9qc3hcIjpbXCJqc3hcIl0sXCJ0ZXh0L2xlc3NcIjpbXCJsZXNzXCJdLFwidGV4dC9tYXJrZG93blwiOltcIm1hcmtkb3duXCIsXCJtZFwiXSxcInRleHQvbWF0aG1sXCI6W1wibW1sXCJdLFwidGV4dC9tZHhcIjpbXCJtZHhcIl0sXCJ0ZXh0L24zXCI6W1wibjNcIl0sXCJ0ZXh0L3BsYWluXCI6W1widHh0XCIsXCJ0ZXh0XCIsXCJjb25mXCIsXCJkZWZcIixcImxpc3RcIixcImxvZ1wiLFwiaW5cIixcImluaVwiXSxcInRleHQvcmljaHRleHRcIjpbXCJydHhcIl0sXCJ0ZXh0L3J0ZlwiOltcIipydGZcIl0sXCJ0ZXh0L3NnbWxcIjpbXCJzZ21sXCIsXCJzZ21cIl0sXCJ0ZXh0L3NoZXhcIjpbXCJzaGV4XCJdLFwidGV4dC9zbGltXCI6W1wic2xpbVwiLFwic2xtXCJdLFwidGV4dC9zcGR4XCI6W1wic3BkeFwiXSxcInRleHQvc3R5bHVzXCI6W1wic3R5bHVzXCIsXCJzdHlsXCJdLFwidGV4dC90YWItc2VwYXJhdGVkLXZhbHVlc1wiOltcInRzdlwiXSxcInRleHQvdHJvZmZcIjpbXCJ0XCIsXCJ0clwiLFwicm9mZlwiLFwibWFuXCIsXCJtZVwiLFwibXNcIl0sXCJ0ZXh0L3R1cnRsZVwiOltcInR0bFwiXSxcInRleHQvdXJpLWxpc3RcIjpbXCJ1cmlcIixcInVyaXNcIixcInVybHNcIl0sXCJ0ZXh0L3ZjYXJkXCI6W1widmNhcmRcIl0sXCJ0ZXh0L3Z0dFwiOltcInZ0dFwiXSxcInRleHQveG1sXCI6W1wiKnhtbFwiXSxcInRleHQveWFtbFwiOltcInlhbWxcIixcInltbFwiXSxcInZpZGVvLzNncHBcIjpbXCIzZ3BcIixcIjNncHBcIl0sXCJ2aWRlby8zZ3BwMlwiOltcIjNnMlwiXSxcInZpZGVvL2gyNjFcIjpbXCJoMjYxXCJdLFwidmlkZW8vaDI2M1wiOltcImgyNjNcIl0sXCJ2aWRlby9oMjY0XCI6W1wiaDI2NFwiXSxcInZpZGVvL2lzby5zZWdtZW50XCI6W1wibTRzXCJdLFwidmlkZW8vanBlZ1wiOltcImpwZ3ZcIl0sXCJ2aWRlby9qcG1cIjpbXCIqanBtXCIsXCJqcGdtXCJdLFwidmlkZW8vbWoyXCI6W1wibWoyXCIsXCJtanAyXCJdLFwidmlkZW8vbXAydFwiOltcInRzXCJdLFwidmlkZW8vbXA0XCI6W1wibXA0XCIsXCJtcDR2XCIsXCJtcGc0XCJdLFwidmlkZW8vbXBlZ1wiOltcIm1wZWdcIixcIm1wZ1wiLFwibXBlXCIsXCJtMXZcIixcIm0ydlwiXSxcInZpZGVvL29nZ1wiOltcIm9ndlwiXSxcInZpZGVvL3F1aWNrdGltZVwiOltcInF0XCIsXCJtb3ZcIl0sXCJ2aWRlby93ZWJtXCI6W1wid2VibVwiXX07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/mime/types/standard.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/package.json":
/*!*********************************************************!*\
  !*** ./node_modules/@google-cloud/storage/package.json ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@google-cloud/storage","description":"Cloud Storage Client Library for Node.js","version":"7.16.0","license":"Apache-2.0","author":"Google Inc.","engines":{"node":">=14"},"repository":"googleapis/nodejs-storage","main":"./build/cjs/src/index.js","types":"./build/cjs/src/index.d.ts","type":"module","exports":{".":{"import":{"types":"./build/esm/src/index.d.ts","default":"./build/esm/src/index.js"},"require":{"types":"./build/cjs/src/index.d.ts","default":"./build/cjs/src/index.js"}}},"files":["build/cjs/src","build/cjs/package.json","!build/cjs/src/**/*.map","build/esm/src","!build/esm/src/**/*.map"],"keywords":["google apis client","google api client","google apis","google api","google","google cloud platform","google cloud","cloud","google storage","storage"],"scripts":{"all-test":"npm test && npm run system-test && npm run samples-test","benchwrapper":"node bin/benchwrapper.js","check":"gts check","clean":"rm -rf build/","compile:cjs":"tsc -p ./tsconfig.cjs.json","compile:esm":"tsc -p .","compile":"npm run compile:cjs && npm run compile:esm","conformance-test":"mocha --parallel build/cjs/conformance-test/ --require build/cjs/conformance-test/globalHooks.js","docs-test":"linkinator docs","docs":"jsdoc -c .jsdoc.json","fix":"gts fix","lint":"gts check","postcompile":"cp ./src/package-json-helper.cjs ./build/cjs/src && cp ./src/package-json-helper.cjs ./build/esm/src","postcompile:cjs":"babel --plugins gapic-tools/build/src/replaceImportMetaUrl,gapic-tools/build/src/toggleESMFlagVariable build/cjs/src/util.js -o build/cjs/src/util.js && cp internal-tooling/helpers/package.cjs.json build/cjs/package.json","precompile":"rm -rf build/","preconformance-test":"npm run compile:cjs -- --sourceMap","predocs-test":"npm run docs","predocs":"npm run compile:cjs -- --sourceMap","prelint":"cd samples; npm link ../; npm install","prepare":"npm run compile","presystem-test:esm":"npm run compile:esm","presystem-test":"npm run compile -- --sourceMap","pretest":"npm run compile -- --sourceMap","samples-test":"npm link && cd samples/ && npm link ../ && npm test && cd ../","system-test:esm":"mocha build/esm/system-test --timeout 600000 --exit","system-test":"mocha build/cjs/system-test --timeout 600000 --exit","test":"c8 mocha build/cjs/test"},"dependencies":{"@google-cloud/paginator":"^5.0.0","@google-cloud/projectify":"^4.0.0","@google-cloud/promisify":"<4.1.0","abort-controller":"^3.0.0","async-retry":"^1.3.3","duplexify":"^4.1.3","fast-xml-parser":"^4.4.1","gaxios":"^6.0.2","google-auth-library":"^9.6.3","html-entities":"^2.5.2","mime":"^3.0.0","p-limit":"^3.0.1","retry-request":"^7.0.0","teeny-request":"^9.0.0","uuid":"^8.0.0"},"devDependencies":{"@babel/cli":"^7.22.10","@babel/core":"^7.22.11","@google-cloud/pubsub":"^4.0.0","@grpc/grpc-js":"^1.0.3","@grpc/proto-loader":"^0.7.0","@types/async-retry":"^1.4.3","@types/duplexify":"^3.6.4","@types/mime":"^3.0.0","@types/mocha":"^9.1.1","@types/mockery":"^1.4.29","@types/node":"^22.0.0","@types/node-fetch":"^2.1.3","@types/proxyquire":"^1.3.28","@types/request":"^2.48.4","@types/sinon":"^17.0.0","@types/tmp":"0.2.6","@types/uuid":"^8.0.0","@types/yargs":"^17.0.10","c8":"^9.0.0","form-data":"^4.0.0","gapic-tools":"^0.4.0","gts":"^5.0.0","jsdoc":"^4.0.0","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","linkinator":"^3.0.0","mocha":"^9.2.2","mockery":"^2.1.0","nock":"~13.5.0","node-fetch":"^2.6.7","pack-n-play":"^2.0.0","proxyquire":"^2.1.3","sinon":"^18.0.0","nise":"6.0.0","path-to-regexp":"6.3.0","tmp":"^0.2.0","typescript":"^5.1.6","yargs":"^17.3.1"}}');

/***/ })

};
;